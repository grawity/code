#!/usr/bin/env python3
# setptr -- change rDNS PTR records using DNS UPDATE
import argparse
import dns.name
import dns.resolver
import ipaddress
import logging
import subprocess

def chase_one_cname(name):
    try:
        ans = dns.resolver.resolve(name, "CNAME")
    except dns.resolver.NoAnswer:
        return name
    except dns.resolver.NXDOMAIN:
        return name
    else:
        return ans.rrset[0].target

def send_nsupdate(zone, cmds, *, debug=False, no_gss=False):
    cmds = [f"zone {zone}\n",
            *cmds,
            f"send\n"]
    if debug:
        print("\n\t" + "\t".join(cmds))

    nsupdate_args = ["nsupdate"]
    if debug:
        nsupdate_args += ["-d"]
    if not no_gss:
        nsupdate_args += ["-g"]

    subprocess.run(nsupdate_args,
                   input="".join(cmds).encode(),
                   check=True)

parser = argparse.ArgumentParser()
parser.add_argument("-z", "--zone",
                    help="override automatically determined rDNS zone")
parser.add_argument("-l", "--ttl", type=int, default=3600,
                    help="set the TTL for created records")
parser.add_argument("-x", "--no-gss", action="store_true",
                    help="disable Kerberos (GSS-TSIG) authentication")
parser.add_argument("-d", "--debug", action="store_true",
                    help="enable nsupdate debugging")
parser.add_argument("-v", "--verbose", action="store_true",
                    help="show detailed information")
parser.add_argument("address",
                    help="IP address to update the PTR for")
parser.add_argument("target",
                    help="PTR target domain name, or \".\" to remove")
args = parser.parse_args()

logging.basicConfig(level=[logging.INFO, logging.DEBUG][args.verbose],
                    format="%(message)s")

addr = ipaddress.ip_address(args.address)
rname = dns.name.from_text(addr.reverse_pointer)
target = dns.name.from_text(args.target)

if args.zone:
    zone = dns.name.from_text(args.zone)
else:
    # Detect IPv4 classless delegations
    rname = chase_one_cname(rname)
    zone = dns.resolver.zone_for_name(rname)

logging.debug(f"Updating zone \"{zone}\"")

if str(target) == ".":
    print(f"Removing PTR for [{addr}]")
    cmds = [f"del {rname} {args.ttl} PTR\n"]
else:
    print(f"Changing PTR for [{addr}] to \"{target}\"")
    cmds = [f"del {rname} {args.ttl} PTR\n",
            f"add {rname} {args.ttl} PTR {target}\n"]

send_nsupdate(zone, cmds, debug=args.debug, no_gss=args.no_gss)
