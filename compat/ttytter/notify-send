#!/usr/bin/env bash
# compatibility layer for 'notify-send' as used by TTYtter, using grawity/code/notify
# (should be the first in $PATH as seen by TTYtter, before real notify-send)

. lib.bash || exit

xmlescape() {
	printf '%s\n' "$@" | sed 's/&/\&amp;/g; s/"/\&quot;/g; s/</\&lt;/g; s/>/\&gt;/g'
}

args=()
file=''
timeout=''
urgency='low'

while getopts ":f:t:" OPT; do
	case $OPT in
	f) file=$OPTARG;;
	t) timeout=$OPTARG;;
	*) die_getopts;;
	esac
done; shift $((OPTIND-1))

title="$1"

args+=(	-a "TTYtter"
	-i "twitter"
	-s "+ttytter"
	-h "urgency=$urgency" )

[[ $timeout ]] && args+=(-t "$timeout")

if [[ $file ]]; then
	if [[ $file == "-" ]]; then
		file='/dev/stdin'
	fi
	exec {fd}<"$file"
	IFS='' read -r -u $fd body
	exec {fd}<&-
else
	body="${*:2}"
fi

# parse given title and body into something useful

tre='^TTYtter: ([[:alpha:]]+)$'		# get event type from given title
bre='^<(.+?)> (.+)$'			# get actor & message from given body
mre='^(@.+?) (.+)$'			# (unused) match @mention at start of text
if [[ $title == "TTYtter: libnotify support activated" ]]; then
	exit 0
elif [[ $title =~ $tre ]]; then
	msgtype=${BASH_REMATCH[1]}
	if [[ $body =~ $bre ]]; then
		title=${BASH_REMATCH[1]}
		body=$(xmlescape "${BASH_REMATCH[2]}")
		#case $msgtype in
		#"reply"|"mention")
		#	body+=" <i>($msgtype)</i>";;
		#esac
	fi
else
	body=$(xmlescape "$body")
fi
body=${body//'\n'/$'\n'}

exec notify "${args[@]}" -- "$title" "$body"
