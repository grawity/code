#!/usr/bin/env python3
# arpawalk -- nibble crawler for {e164,ip6,in-addr}.arpa
#
# This is the same method as described here:
#
# http://web.archive.org/web/20120905125325/http://7bits.nl/blog/2012/03/26/finding-v6-hosts-by-efficiently-mapping-ip6-arpa

import argparse
from collections import deque
import dns.name
import dns.resolver
import dns.reversename
import ipaddress
from nullroute.core import Core
import sys

stat = {
    "requests": 0,
    "answers": 0,
    "nonterminals": 0,
    "nxdomains": 0,
    "baddelegations": 0,
}

def get_rdns_domains(addr):
    net = ipaddress.ip_network(addr)
    rev = net.reverse_pointer.split(".")
    if net.version == 6:
        full, bits = divmod(net.prefixlen, 4)
        full += 2
        if bits:
            full += 1
            start = int(rev[-full], 16)
            count = 2 ** (4 - bits)
            for i in range(count):
                rev[-full] = "%x" % (start + i)
                yield ".".join(rev[-full:])
        else:
            yield ".".join(rev[-full:])
    else:
        full, bits = divmod(net.prefixlen, 8)
        full += 2
        if bits:
            full += 1
            start = int(rev[-full], 10)
            count = 2 ** (8 - bits)
            for i in range(count):
                rev[-full] = "%d" % (start + i)
                yield ".".join(rev[-full:])
        else:
            if net.prefixlen == 32:
                rev[0] = "0"
            yield ".".join(rev[-full:])

def fmt_domain(dom):
    dom = dom.lower()
    if len(dom) == 73 and dom.endswith(".ip6.arpa."):
        dom = dns.name.from_text(dom)
        dom = dns.reversename.to_address(dom)
    return dom

def crawl_recursively(domain, card=16, fmt="%x", rtype="PTR",
                              maxdepth=-1, depth=0):
    Core.debug("(%d) >> crawling %r recursively", depth, domain)
    if not depth:
        depth = len(domain.strip(".").split("."))

    if depth > maxdepth:
        domains = [domain]
        Core.trace(" - domain already at max length; using as-is")
    else:
        domains = ["%s.%s" % (fmt % i, domain) for i in range(card)]
        Core.trace(" - domain below max length; expanding to %d subdomains", len(domains))

    for domain in domains:
        stat["requests"] += 1
        try:
            answers = dns.resolver.query(domain, rtype)
        except dns.resolver.NoAnswer:
            if depth > maxdepth:
                # Could be that the hostmaster accidentally added
                # records with too many labels (e.g. the PTR record for
                # 2001:778:0:20::192 has too many '0's in the middle),
                # in this case we won't know how to descend further and
                # will loop forever.
                Core.trace("got NoAnswer for %r at terminal depth; continuing", domain)
                stat["baddelegations"] += 1
                continue
            else:
                Core.trace("got NoAnswer for %r; descending", domain)
                stat["nonterminals"] += 1
                yield from crawl_recursively(domain, card, fmt, rtype,
                                                     maxdepth, depth+1)
        except dns.resolver.NXDOMAIN:
            Core.trace("got NXDOMAIN for %r; continuing", domain)
            stat["nxdomains"] += 1
            continue
        except dns.resolver.NoNameservers:
            Core.warn("got SERVFAIL for %r; returning and continuing", domain)
            stat["baddelegations"] += 1
            yield (domain, None)
            continue
        else:
            if depth < maxdepth:
                Core.trace("got answer for %r; returning and descending", domain)
            else:
                Core.trace("got answer for %r; assuming terminal and returning", domain)
            stat["answers"] += 1
            yield from [(domain, j) for j in answers]
            if depth < maxdepth:
                yield from crawl_recursively(domain, card, fmt, rtype,
                                                     maxdepth, depth+1)
    Core.debug("(%d) << leaving %r", depth, domain)

def crawl_iteratively(domain, card=16, fmt="%x", rtype="PTR",
                              maxdepth=-1):
    Core.debug("crawling %r iteratively", domain)
    depth = len(domain.strip(".").split("."))
    queue = deque()
    queue += [(depth, domain)]
    while queue:
        (depth, domain) = queue.popleft()
        Core.debug("processing suffix %r at depth %d (%d more queued)", domain, depth, len(queue))
        childs = ["%s.%s" % (fmt % i, domain) for i in range(card)]
        childs = [(depth + 1, d) for d in childs]
        stat["requests"] += 1
        try:
            answers = dns.resolver.query(domain, rtype)
        except dns.resolver.NoAnswer:
            if depth > maxdepth:
                # Could be that the hostmaster accidentally added records with
                # too many labels (e.g. the PTR records for 2001:778:0:20::19x
                # have too many '0's in the middle). We now *can* handle those.
                Core.notice("found non-terminal %r beyond expected depth", domain)
            Core.trace("got NoAnswer for %r; descending", domain)
            stat["nonterminals"] += 1
            queue += childs
        except dns.resolver.NXDOMAIN:
            Core.trace("got NXDOMAIN for %r; continuing", domain)
            stat["nxdomains"] += 1
        except dns.resolver.NoNameservers:
            Core.warn("got SERVFAIL for %r; returning and continuing", domain)
            stat["baddelegations"] += 1
            yield (domain, None)
        else:
            if depth < maxdepth:
                Core.trace("got answer for %r; returning and descending", domain)
                queue += childs
            else:
                Core.trace("got answer for %r; assuming terminal and returning", domain)
            stat["answers"] += 1
            yield from [(domain, j) for j in answers]

ap = argparse.ArgumentParser()
ap.add_argument("-r", dest="recursive", action="store_true")
ap.add_argument("domain", nargs="+")
args = ap.parse_args()

if args.recursive:
    crawl = crawl_recursively
else:
    crawl = crawl_iteratively

for arg in args.domain:
    if "/" in arg:
        tmp = [*get_rdns_domains(arg)]
    else:
        tmp = [arg]
    Core.trace("initial zones: %r", tmp)
    for domain in tmp:
        domain = domain.lower()
        if not domain.endswith("."):
            domain = "%s." % domain

        if domain.endswith(".e164.arpa."):
            params = dict(card=10, fmt="%d", rtype="NAPTR", maxdepth=13)
        elif domain.endswith(".ip6.arpa."):
            params = dict(card=16, fmt="%x", rtype="PTR", maxdepth=33)
        elif domain.endswith(".in-addr.arpa."):
            params = dict(card=256, fmt="%d", rtype="PTR", maxdepth=5)
        else:
            Core.err("unrecognized domain %r", domain)
            continue

        for node in crawl(domain, **params):
            name, rdata = node
            name = fmt_domain(name)
            print(name, "=>", rdata)

        Core.info("crawled %r in %d requests (%d pos, %d mid, %d neg)",
                  domain, stat["requests"], stat["answers"],
                  stat["nonterminals"], stat["nxdomains"])

Core.fini()
