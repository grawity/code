#!/usr/bin/env bash
# hi - download latest hilights from IRC log

. lib.bash || exit

set -o pipefail
log=$XDG_CACHE_HOME/highlights.txt
link=$XDG_CONFIG_HOME/highlights.txt.url

touch "$log"     || die "cannot create highlight cache"
exec {fd}<"$log" || die "cannot open highlight cache"
flock -x -w3 $fd || die "another instance is running"

fmt() {
	perl -M'POSIX' -M'POSIX::strptime' -E'

	if (-t 1) {
		$C{DARK} = "\e[38;5;8m";
		$C{BOLD} = "\e[1m";
		$C{RESET} = "\e[m";

		$C{DATE} = "\e[$ENV{date}m";
		$C{BUFFER} = "\e[$ENV{color}m";
		$C{PREFIX} = "\e[$ENV{prefix}m";
		$C{PRIVATE} = "\e[$ENV{private}m";
		$C{NOTICE} = "\e[$ENV{notice}m";
		$C{TEXT} = "\e[$ENV{text}m";
	} else {
		%C = ();
	}

	if ($ENV{maxlines}) {
		$max = abs int ($ENV{maxlines} || 0);
	} else {
		$max = -1;
	}

	@lines = ();

	for (<>) {
		($date, $buffer, @line) = split(/\t/);

		@tm = POSIX::strptime($date, "%Y-%m-%d %H:%M:%S %z");
		$udate = mktime(@tm);
		$fmt = (time - $udate < 70000) ? "%H:%M" : "%b %-d, %H:%M";
		$sdate = strftime($fmt, @tm);

		$buffer =~ s/^<(.+)>$/$1/;

		$line = join("\t", @line);
		chomp $line;
		# FIXME: gnome-terminal somehow acts on 0xC2 0x9A
		$line =~ s/[\x00-\x1F\x9A]/sprintf("%%%02X", ord($&))/seg;

		if ($buffer !~ /#/ && $line =~ s/^<\Q$buffer\E> (\S+) \(\S+\): //) {
			$from = "-$1-";
		} elsif ($buffer !~ /#/ && $line =~ s/^<(\S+)> \1: //i) {
			$from = "-$1-";
		} elsif ($buffer !~ /#/ && $line =~ s/^<(\S+)> \1 //i) {
			$from = "* $1";
		} elsif ($buffer =~ /#/ && $line =~ s/^(\* \S+) //i) {
			$from = "$1";
		} elsif ($buffer =~ /^server\.(.+)$/
		      && $line =~ s/^<\Q$1\E> (\S+) \(\S+\): //) {
			$from = "-$1-";
		} elsif ($line =~ s/^<-i?-> Notice:(.)\((\S+)\): //) {
			$from = "-$2/$1-";
		} elsif ($line =~ s/^<-i?-> Notice\((\S+)\): //) {
			$from = "-$1-";
		} elsif ($line =~ s/^<-i?-> Mode (\S+) \[(.+?)\] by (\S+)$//) {
			$from = "-- $3:";
			$line = "Mode $1 [$2]";
		} elsif ($line =~ s/^<(\S+?)> //) {
			$from = "<$1>";
		} else {
			$from = "";
		}

		next if $from =~ /^-(auth|bot|chan|host|info|nick|oper|sasl)serv-$/i
			&& $buffer !~ /#/;
		next if ($buffer =~ /^(quake|under|what)net$/i && $from =~ /^-[HQX]-$/i);
		next if ($buffer eq "freenode" && $from =~ /^-(alis|phrik)-$/i);
		next if ($from =~ /^-Global-$/i && $line =~ /\[(Logon|Random) News -/);
		next if $line =~ /You are connected to .* with TLS.*/;

		push @lines, [$buffer, $from, $line];
	}

	if ($max >= 0) {
		@lines = @lines[$#lines+1-$max..$#lines];
	}

	for (@lines) {
		($buffer, $from, $line) = @$_;

		if ($from =~ /^-/) {
			$C{tPFX} = $C{NOTICE};
		} elsif ($buffer !~ /#/) {
			$C{tPFX} = $C{PRIVATE};
		} else {
			$C{tPFX} = $C{PREFIX};
		}

		$sbuffer = $buffer;
		$sbuffer =~ s/[.#]/$C{BOLD}$&/ if $C{BOLD};

		$indent = " " x length($sdate);
		$indent = " " x 1;

		$f_dash = sprintf "$C{DARK}%s$C{RESET}", "--";
		$f_hdate = sprintf "$C{DATE}%s$C{RESET}", $sdate;
		$f_ddate = sprintf "$C{DARK}%s$C{RESET}", $sdate;
		$f_buffer = sprintf "$C{BUFFER}%s$C{RESET}", $sbuffer;
		$f_msg = sprintf "$C{tPFX}%s$C{RESET} $C{TEXT}%s$C{RESET}", $from, $line;

		if ($lastbuf eq $buffer) {
			if ($firstdate > $udate-300) {
				print "${indent}${f_msg}\n";
			}
			elsif ($firstdate > $udate-1200 && time-$udate > 70000) {
				print "${indent}${f_msg}\n";
			}
			else {
				print "${f_dash} ${f_ddate} ${f_dash}\n";
				print "${indent}${f_msg}\n";
				$firstdate = $udate;
			}
		}
		else {
			print "${f_dash} ${f_hdate} ${f_buffer} ${f_dash}\n";
			print "${indent}${f_msg}\n";
			$firstdate = $udate;
		}

		$lastdate = $udate;
		$lastbuf = $buffer;
	}'
}

url=$(attr -qg "xdg.origin.url" "$log" 2>/dev/null) ||
if [[ -h "$link" ]]
	then url=$(readlink "$link")
	else url=$(< "$link")
fi ||
die "could not find URL for $log"

opts='-4'
size=$(stat -c %s "$log")
now=$(date +%s)

export date color prefix private notice text maxlines

debug "local cache is <$log>"

date='38;5;102'
color='38;5;102'
prefix='38;5;145'
private=$prefix
notice=$prefix
text='38;5;188'
maxlines=${1:-"-3"}

cat "$log" | fmt

debug "remote URL is <$url>"

date=$'38;5;9m\e[1'
color='38;5;72'
private='38;5;178'
prefix='38;5;150'
notice='38;5;66'
text=''
maxlines=''

tmp="$log.tmp"
out=$({ curl -s -S -C "$size" $opts "$url" > "$log.tmp"; } 2>&1)
ret=$?

bad='^<head><title>416 Requested Range Not Satisfiable</title></head>'
if [ $ret -eq 0 ] && grep -qs "$bad" "$log.tmp"; then
	# I hate nginx.
	# I also hate curl, because for some reason even with --fail it
	# considers 416 with data a successful reply.
	ret=33
	: > "$log.tmp"
fi

cat "$log.tmp" | tee -a "$log" | fmt

rm -f "$log.tmp"

case $ret in
	0)  exit 0;;
	33) echo -e "\e[38;5;102m(No new items.)\e[m"; exit 0;;
	*)  echo -e "\e[33m$out\e[m" >&2; exit $ret;
esac
