#!/usr/bin/env python
import os
from os.path import expanduser
import sys
import shelve
import glob
from operator import itemgetter, attrgetter

def print_bar(rating, song):
	bar = "\033[1;33m" + "▮"*rating + "\033[1;30m" + "▯"*(5-rating) + "\033[m"
	print(bar, song)

def file_to_key(file_name):
	dot_pos = file_name.find(".")
	slash_pos = file_name.find("/")
	if dot_pos > slash_pos:
		file_name = file_name[:dot_pos]
	return "file:" + file_name.lower()

def song_to_key(song_name):
	return "song:" + song_name.lower()

def is_file_key(key):
	return key.startswith("file:")

def is_song_key(key):
	return key.startswith("song:")

def song_file_exists(file_name):
	dir_name = expanduser("~/Music")
	file_name = "%s/%s" % (dir_name, file_name)
	if os.path.exists(file_name):
		return True
	if glob.glob1(dir_name, file_name+".*"):
		return True
	return False

class Database(object):
	def __init__(self):
		self.ratings = shelve.open(expanduser("~/.cache/songdb-ratings.db"))
		self.equiv = shelve.open(expanduser("~/.cache/songdb-equiv.db"))

	def get(self, file_name, song_name):
		file_key = file_to_key(file_name)
		song_key = song_to_key(song_name)

		if file_key in self.ratings:
			r = int(self.ratings[file_key])
			self.ratings[song_key] = r
			return r
		elif song_key in self.ratings:
			r = int(self.ratings[song_key])
			self.ratings[file_key] = r
			return r
		else:
			return 0
	
	def set(self, rating, file_name, song_name):
		file_key = file_to_key(file_name)
		song_key = song_to_key(song_name)
		
		self.ratings[file_key] = rating
		self.ratings[song_key] = rating

		self.equiv[file_key] = file_name, song_name
		self.equiv[song_key] = file_name, song_name
	
	def list(self, minrating=0, maxrating=5):
		ratings = {}
		for key, value in self.ratings.items():
			value = int(value)
			if value < minrating:
				continue
			elif value > maxrating:
				continue

			file_name, song_name = self.equiv[key]
			if not song_file_exists(file_name):
				continue
			if not is_song_key(key):
				key = song_to_key(song_name)

			ratings[song_name] = value
		return ratings

db = Database()

action = sys.argv[1]

if action == "get":
	file_name = sys.argv[2]
	song_name = sys.argv[3]

	rating = db.get(file_name, song_name)
	
	print_bar(rating, song_name)

elif action == "set":
	file_name = sys.argv[2]
	song_name = sys.argv[3]
	rating = int(sys.argv[4])

	if not (0 <= rating <= 5):
		raise ValueError("rating out of range 1-5")

	db.set(rating, file_name, song_name)

	print_bar(rating, song_name)

elif action == "list":
	minrating = int(sys.argv[2])
	try:
		maxrating = int(sys.argv[3])
	except IndexError:
		maxrating = 5

	ratings = db.list(maxrating=maxrating)
	ratings = list(ratings.items())
	ratings.sort(key=itemgetter(0))
	ratings.sort(key=itemgetter(1))
	for song, rating in ratings:
	#	try:
	#		fullpath = file_names[song_files[song]]
	#		if not fullpath.startswith("/"):
	#			fullpath = expanduser("~/Music/") + fullpath
	#	except KeyError:
	#		pass
	#	else:
	#		if not os.path.exists(fullpath):
	#			continue
		print_bar(rating, song)
