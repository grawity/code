#!/usr/bin/env python3
from collections import defaultdict
from nullroute.ui import print_status
import os
import re
import sys

def bad_win32_name(item):
    if {*item} & {*"?*<>|:\"\n\x7F\\"}:
        return True
    elif re.match(r"^(con|prn|aux|nul|com[1-9]|lpt[1-9])$", item.lower()):
        return True
    elif any([ord(c) < 0x20 for c in item]):
        return True
    else:
        return False

def bad_ucs2_name(item):
    if re.match(r"[^\u0000-\uFFFF]", item):
        return True
    else:
        return False

roots = sys.argv[1:]
bad = 0

for root in roots:
    seen = defaultdict(set)
    badwin = set()
    baducs = set()
    total = 0

    print_status(root)

    for dirpath, dirnames, filenames in os.walk(root):
        print_status(dirpath)
        for item in [*dirnames, *filenames]:
            path = os.path.join(dirpath, item)
            path = os.path.relpath(path, root)
            cfpath = path.casefold()
            seen[cfpath].add(path)
            if bad_win32_name(item):
                badwin.add(path)
            if bad_ucs2_name(item):
                baducs.add(path)
            total += 1

    print_status()

    for cfpath in sorted(seen):
        if len(seen[cfpath]) > 1:
            print("Colliding paths:")
            for ogpath in sorted(seen[cfpath]):
                print("  %s" % ogpath)
                bad += 1

    if badwin:
        print("Names incompatible with Windows:")
        for path in sorted(badwin):
            print("  %r" % path)
            bad += 1

    if baducs:
        print("Names incompatible with Dropbox:")
        for path in sorted(baducs):
            print("  %r" % path)
            bad += 1

    print("Scanned %s items with %s unique paths" % (total, len(seen)))

if bad > 0:
    print("Found %d issues" % bad)
    sys.exit(1)
