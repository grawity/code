#!/usr/bin/env python3
# hi -- show recent IRC highlights
import argparse
import datetime
from nullroute.core import Env
import io
import re
import os
import subprocess

def download_log(remote_host, remote_path, local_path):
    try:
        osize = os.stat(local_path).st_size
        rcmd = f"tail -c +{osize+1} '{remote_path}'"
    except FileNotFoundError:
        osize = 0
        rcmd = f"cat '{remote_path}'"

    with open(local_path, "ab") as fh:
        subprocess.run(["ssh", remote_host, rcmd],
                       stdout=fh,
                       check=True)

    nsize = os.stat(local_path).st_size
    return nsize-osize, osize

def parse_log(fh):
    for line in fh:
        date, wname, text = line.split("\t", 2)
        date = datetime.datetime.fromisoformat(date)
        wname = re.sub(r"^<(.+)>$", r"\1", wname)
        text = text.rstrip()

        if "#" in wname:
            # Channel messages
            name = "?"
            if m := re.match(r"^<-i-> Mode (\S+) \[(.+?)\] by (\S+)$", text):
                # /mode
                name = "-- %s:" % m[3]
                text = "Mode %s [%s]" % (m[1], m[2])
            elif m := re.match(r"^<(\S+)> (.*)$", text):
                # Regular
                name = "(%s)" % m[1]
                text = m[2]
        else:
            # All kinds of non-channel messages
            if m := re.match(r"^<(\S+)> \1: (.*)$", text):
                # /notice
                name = "Msg: -%s-" % m[1]
                text = m[2]
            elif m := re.match(r"^<(\S+)> \1 (.*)$", text):
                # /me
                name = "Msg: * %s" % m[1]
                text = m[2]
            elif m := re.match(r"^<(\S+)> (.*)$", text):
                # /msg
                name = "Msg: (%s)" % m[1]
                text = m[2]

        if re.match(r"^-(nick|chan)serv-$", name, re.I):
            continue

        yield (date, wname, name, text)

def sgr(arg, text):
    return "\033[%sm%s\033[m" % (arg, text)

def vis(text):
    return re.sub(r"[\x00-\x1F\x80-\x9F]",
                  lambda m: "\033[2m<%02X>\033[m" % ord(m[0]),
                  text)

def print_log(fh, unseen):
    SGR_DATE = "1;31"
    SGR_WNAME = "1;32"
    SGR_WTAIL = "32"
    SGR_TIME = "38;5;244"

    lastdate = None
    lastwname = None

    for date, wname, name, text in parse_log(fh):
        if wname != lastwname:
            hdrdate = date.strftime("%b %-d")
            hdrname = wname
            hdrtail = ""

            if m := re.match(r"^(.+)(#.+)$", wname):
                hdrname = m[2]
                hdrtail = "(%s)" % m[1]

            if unseen:
                hdrdate = sgr(SGR_DATE, hdrdate)
                hdrname = sgr(SGR_WNAME, hdrname)
                hdrtail = sgr(SGR_WTAIL, hdrtail)

            if lastwname:
                print()

            print(hdrdate, hdrname, hdrtail)

        print(" "*2,
              sgr(SGR_TIME, date.strftime("%H:%M")),
              sgr(SGR_TIME, "â”‚"),
              vis(name),
              vis(text))

        lastdate = date
        lastwname = wname

parser = argparse.ArgumentParser()
parser.add_argument("-q", "--quiet",
                        action="store_true",
                        help="don't show old messages")
args = parser.parse_args()

os.umask(0o077)

rhost = "star"
rpath = "irclogs/perl.highmon.log"
cpath = Env.find_cache_file("highlights.txt")

delta, offs = download_log(rhost, rpath, cpath)
if delta:
    with open(cpath, "rb") as fh:
        fh.seek(offs)
        print_log(io.TextIOWrapper(fh), unseen=True)
elif args.quiet:
    print("hi: no new messages")
else:
    with os.popen("tail -n 10 '%s'" % cpath, "r") as fh:
        print_log(fh, unseen=False)
    print("hi: no new messages")
