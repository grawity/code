#!/usr/bin/env python3
# tpm2_listpersistent -- show persistent objects stored in TPM 2.0
import argparse
import os
from pprint import pprint
import yaml
import subprocess

def yrun(*cmd):
    res = subprocess.run(cmd, stdout=subprocess.PIPE,
                              check=True)
    buf = res.stdout.replace(b'value: ""!!', b'value: "!!')
    return yaml.safe_load(buf)

def findrange(ranges, key):
    for (start, end, *rest) in ranges:
        if start <= key <= end:
            return rest

# https://trustedcomputinggroup.org/wp-content/uploads/RegistryOfReservedTPM2HandlesAndLocalities_v1p1_pub.pdf
handle_ranges = [
    (0x01000000, 0x013FFFFF, "Free use: TPM OEM"),
    (0x01400000, 0x017FFFFF, "Free use: platform"),
    (0x01800000, 0x01BFFFFF, "Free use: owner"),

    (0x01C07F00, 0x01C07FFF, "TCG: EK policies"),
    (0x01C00000, 0x01C07FFF, "TCG: Endorsement certificates"),

    (0x01C08000, 0x01C0FFFF, "TCG: Platform certificates"),

    (0x01C10100, 0x01C1013F, "TCG: component OEM - Intel"),
    (0x01C10140, 0x01C1017F, "TCG: component OEM - Cisco"),
    (0x01C10180, 0x01C101BF, "TCG: component OEM - IBM"),
    (0x01C101C0, 0x01C101FF, "TCG: component OEM - Microsoft"),
    (0x01C10200, 0x01C1023F, "TCG: component OEM - AMD"),
    (0x01C10240, 0x01C1027F, "TCG: component OEM - HP"),
    (0x01C10280, 0x01C102BF, "TCG: component OEM - HPE"),
    (0x01C10000, 0x01C1FFFF, "TCG: component OEM"),

    (0x01C20000, 0x01C2007F, "TCG: TPM OEM - Infineon"),
    (0x01C20000, 0x01C2FFFF, "TCG: TPM OEM"),

    (0x01C30100, 0x01C3013F, "TCG: platform OEM - Intel"),
    (0x01C30140, 0x01C3017F, "TCG: platform OEM - Cisco"),
    (0x01C30180, 0x01C301BF, "TCG: platform OEM - HPE"),
    (0x01C301C0, 0x01C301FF, "TCG: platform OEM - IBM"),
    (0x01C30200, 0x01C3023F, "TCG: platform OEM - Juniper"),
    (0x01C30240, 0x01C3027F, "TCG: platform OEM - GE"),
    (0x01C30280, 0x01C302BF, "TCG: platform OEM - Raytheon"),
    (0x01C302C0, 0x01C302FF, "TCG: platform OEM - HP"),
    (0x01C30300, 0x01C3033F, "TCG: platform OEM - AMD"),
    (0x01C30340, 0x01C3037F, "TCG: platform OEM - Qualcomm"),
    (0x01C30000, 0x01C3FFFF, "TCG: platform OEM"),

    (0x01C40000, 0x01C4000F, "TCG: PC-Client: GPIO"),
    (0x01C40100, 0x01C401FF, "TCG: PC-Client: EPI"),
    (0x01C40000, 0x01C4FFFF, "TCG: PC-Client workgroup"),
    (0x01C50000, 0x01C5FFFF, "TCG: Server workgroup"),
    (0x01C60000, 0x01C6FFFF, "TCG: Virtualized workgroup"),
    (0x01C70000, 0x01C7FFFF, "TCG: MP workgroup"),
    (0x01C80000, 0x01C8FFFF, "TCG: Embedded workgroup"),
    (0x01C90000, 0x01C9FFFF, "TCG: Infrastructure workgroup"),
    (0x01D00000, 0x01D0FFFF, "TCG: TPM workgroup"),
    (0x01C40000, 0x01FFFFFF, "TCG: other specific usages"),

    (0x81000000, 0x810000FF, "Storage Primary Key"),
    (0x81000000, 0x8100FFFF, "Storage hierarchy"),
    (0x81010000, 0x810100FF, "Endorsement Primary Key"),
    (0x81020000, 0x810200FF, "Endorsement Infrastructure WG"),
    (0x81010000, 0x8103FFFF, "Endorsement hierarchy"),
    (0x81800000, 0x818000FF, "Platform Primary Key"),
    (0x81800000, 0x81FFFFFF, "Platform hierarchy"),
]
handle_names = {
	# NV indices
	#0x01800001: "unknown (HP platform)",
	#0x01800003: "unknown (HP platform)",
	#0x01800004: "unknown (HP platform)",
	#0x01810000: "unknown (HP platform)",
	0x01C00002: "EK Certificate (RSA) (TPM TCG)",
	0x01C0000A: "EK Certificate (EC) (TPM TCG)",
	0x01C90000: "IDevID Certificate (TPM TCG)",
	# Object handles
	0x81000001: "Storage Root Key (Microsoft, TPM TCG)",
	0x81000002: "Not sure what (Microsoft)",
	0x81010001: "Endorsement Key (RSA) (Microsoft, TPM TCG)",
	0x81020000: "IDevID Key (TPM TCG)",
}

parser = argparse.ArgumentParser()
parser.add_argument("-N", "--nv", action="store_true",
                    help="show NV indices")
parser.add_argument("-T", "--tcti",
                    help="specify the TPM transport")
args = parser.parse_args()

if args.tcti:
    os.environ["TPM2TOOLS_TCTI"] = args.tcti

if not args.nv:
    info = yrun("tpm2_getcap", "properties-fixed")
    capacity = info["TPM2_PT_HR_PERSISTENT_MIN"]["raw"]
    print("TPM has capacity for %d persistent objects." % capacity)
    print()

    handles = yrun("tpm2_getcap", "handles-persistent") or []
    if not handles:
        print("No persistent objects.")
    for i, handle in enumerate(handles):
        if i:
            print()
        if hdesc := handle_names.get(handle):
            hdesc = "\033[1m%s\033[m" % hdesc
        else:
            hdesc = "\033[3m%s\033[m" % "unknown"
        if htype := findrange(handle_ranges, handle):
            hdesc += " \033[2m(%s)\033[m" % htype[0]
        print("\033[32mObject \033[1m0x%08x:\033[m %s" % (handle, hdesc))
        info = yrun("tpm2_readpublic", "-c", hex(handle))
        #pprint(info)
        print("\tAttributes:", info["attributes"]["value"])
        print("\tType:", info["type"]["value"].upper())
        if info.get("curve-id") and info["curve-id"]["value"]:
            print("\tCurve:", info["curve-id"]["value"].upper())
        if info.get("sym-alg") and info["sym-alg"]["value"]:
            print("\tSym alg:", info["sym-alg"]["value"].upper(),
                                info["sym-keybits"],
                                info["sym-mode"]["value"].upper())
        if info.get("scheme") and info["scheme"]["value"]:
            print("\tSig alg:", info["scheme"]["value"].upper(),
                                info["scheme-halg"]["value"].upper())
        if info.get("kdfa-alg") and info["kdfa-alg"]["value"]:
            print("\tKDF alg:", info["kdfa-alg"]["value"].upper(),
                                info["kdfa-halg"]["value"].upper())

if args.nv:
    handles = yrun("tpm2_getcap", "handles-nv-index") or []
    if not handles:
        print("No NV indices.")
    for i, handle in enumerate(handles):
        if i:
            print()
        info = yrun("tpm2_nvreadpublic", hex(handle))
        info = info[handle]
        #pprint(info)
        if hdesc := handle_names.get(handle):
            hdesc = "\033[1m%s\033[m" % hdesc
        else:
            hdesc = "\033[3m%s\033[m" % "unknown"
        if htype := findrange(handle_ranges, handle):
            hdesc += " \033[2m(%s)\033[m" % htype[0]
        if "platformcreate" in info["attributes"]["friendly"].split("|"):
            print("\033[95m\033[1m0x%08x\033[22m (platform):\033[m %s" % (handle, hdesc))
        else:
            print("\033[96m\033[1m0x%08x\033[22m (user):\033[m %s" % (handle, hdesc))
        print("\tAttributes:", info["attributes"]["friendly"])
        print("\tPolicy:", info.get("authorization policy"))
