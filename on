#!/usr/bin/env bash
# on, @ -- Run commands on another host
#
# This is like 'ssh -t <host>', but preserves the current directory.
#
#   - If called as '@' or '@foo', it will just preserve cwd exactly, i.e.
#     remote commands will act on remote files.
#     (For example, 'cd ~/Dropbox; @ ember wget ...')
#
#   - If called as 'on', it will try to access the *local* cwd via NFS,
#     i.e. remote commands will still act on local files.
#     (For example, 'cd ~src/systemd; on buildbox ninja')
#
# Accepts '@foo' symlinks (hostname in argv[0]) like ssh/rsh.
#
# Kind of inspired by the SunOS /tmp story from:
# https://www-uxsup.csx.cam.ac.uk/misc/horror.txt
#
# Apparently the 'on' command did indeed exist:
# http://www.bitsavers.org/pdf/sun/sunos/3.4/800-1295-04A_Commands_Reference_Manual_198609.pdf#page=290

. lib.bash || exit

usage() {
	echo "Usage: on <host> [-DKNSnrv] [-C <path>] [<command>]"
	echo "       @ <host> [-DKNSnrv] [-C <path>] [<command>]"
	echo
	echo "Run an interactive shell or command on the specified host, preserving the"
	echo "current working directory. When invoked as '@' will use the remote equivalent"
	echo "of the local path; if invoked as 'on' will access the local directory via NFS."
	echo
	echo_opt "-n"		"access local current directory via NFS (default for 'on')"
	echo_opt "-N"		"access remote current directory, keeping NFS paths"
	echo_opt "-r"		"access remote current directory (default for '@')"
	echo
	echo_opt "-C <path>"	"access specified remote directory (relative to remote home)"
	echo_opt "-D"		"access remote home directory (equal to '-C.')"
	echo
	echo_opt "-K"		"allow Kerberos ticket delegation, disable SSH multiplexing"
	echo_opt "-S"		"connect as superuser (root)"
	echo_opt "-v"		"verbose (display remote host and path)"
	echo
	echo "The program may also be invoked through symlinks for specific hosts:"
	echo
	echo_opt "<host>"	"like 'on -D <host>' or 'on -d. <host>'"
	echo_opt "@<host>"	"like 'on -r <host>' or '@ <host>'"
}

arg0=${0##*/}
wd=$PWD
nfsmode=KEEP
host=""
user=""
Kflag=""
qflag="-q"
verbose=0

if [[ $1 == --help ]]; then
	usage; exit
elif [[ $arg0 == 'on' && $1 == [!-]* ]]; then
	host=$1; shift
	nfsmode=USE
elif [[ $arg0 == 'on' ]]; then
	nfsmode=USE
elif [[ $arg0 == '@'?* ]]; then
	host=${arg0#@}
	nfsmode=STRIP
elif [[ $arg0 == '@' && $1 == [!-]* ]]; then
	host=$1; shift
	nfsmode=STRIP
elif [[ $arg0 != @('@'|'on') ]]; then
	host=$arg0
	wd=""
fi

while getopts ":C:Dd:KNnrSv" OPT; do
	case $OPT in
	# -C is equal to -d for consistency with other tools
	C) nfsmode=KEEP; wd=$OPTARG;;
	D) nfsmode=KEEP; wd=".";;
	d) nfsmode=KEEP; wd=$OPTARG;;
	K) Kflag="-K -Snone";;
	N) nfsmode=KEEP;;
	n) nfsmode=USE;;	# default 'on' behavior
	r) nfsmode=STRIP;;	# default '@' behavior
	S) user="root@";;
	v) verbose=1;;
	*) lib:die_getopts;;
	esac
done; shift $((OPTIND-1))

if [[ ! $host ]]; then
	host=$1; shift
	if [[ ! $host ]]; then
		die "host not specified"
	fi
fi

if ! klist -s; then
	warn "Kerberos tickets not available"
	qflag=""
fi

case $nfsmode in
	USE)
		# 'on' mode, add /net and try to access client filesystem via NFS
		# (but if client is on an NFS mount, try to access that NFS mount)
		#
		#	/etc			-> /net/clienthost/etc
		#	/net/targethost/etc	-> /etc
		#	/net/otherhost/etc	-> /net/otherhost/etc
		if [[ $wd == /net/* ]]; then
			# NFS mount - strip if it's for target, keep as-is otherwise
			wd=${wd/#"/net/$host/"/"/"}
		else
			# Local path - convert to NFS mount
			wd="/net/$HOSTNAME$wd"
			if [[ ! -e /proc/fs/nfsd/versions ]]; then
				die "NFS service not running on $HOSTNAME"
			fi
		fi
		;;
	KEEP)
		# Partial '@' mode, access remote filesystem but preserve /net PWD
		# (e.g. "cd /net/ember/home; @ ember foo" will use just /home).
		#
		#	/etc			-> /etc
		#	/net/targethost/etc	-> /etc
		#	/net/otherhost/etc	-> /net/otherhost/etc
		wd=${wd/#"/net/$host/"/"/"}
		;;
	STRIP)
		# Full '@' mode, always strip /net and access remote filesystem
		# (even if the client is on an NFS mount to a third host)
		#
		#	/etc			-> /etc
		#	/net/targethost/etc	-> /etc
		#	/net/otherhost/ec	-> /etc
		wd="/${wd#/net/*/}"
		wd=${wd/#"//"/"/"}
		;;
	*)
		lib:crash "bad nfsmode value"
esac

if (( verbose )); then
	info "Running in $host:${wd:-~}"
fi

if [[ $wd ]]; then
	q_wd=${wd@Q}
else
	q_wd=""
fi

# 0 args - run a shell
# 1 arg - use as raw command line
# 2+ args - quote individual args

if (( $# == 0 )); then
	q_cmd=bash
elif (( $# == 1 )) && [[ $1 == *\ * ]]; then
	q_cmd=$1
else
	q_cmd=${@@Q}
fi

if [[ -t 0 && -t 1 && -t 2 ]]; then
	tflag="-t"
else
	tflag=""
fi

exec ssh $Kflag $qflag $tflag "$user$host" \
	"export SILENT=1;
	if [ -e /etc/profile ]; then . /etc/profile; fi;
	if [ -e ~/.profile ]; then . ~/.profile; fi;
	cd $q_wd && ($q_cmd)"
