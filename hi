#!/usr/bin/env python3
# hi -- show recent IRC highlights
import argparse
import datetime
from nullroute.core import Env
import io
import re
import os
import subprocess

def download_log(remote_host, remote_path, local_path):
    try:
        osize = os.stat(local_path).st_size
        rcmd = f"tail -c +{osize+1} '{remote_path}'"
    except FileNotFoundError:
        osize = 0
        rcmd = f"cat '{remote_path}'"

    with open(local_path, "ab") as fh:
        subprocess.run(["ssh", remote_host, rcmd],
                       stdout=fh,
                       check=True)

    nsize = os.stat(local_path).st_size
    return nsize-osize, osize

def csi(arg, text):
    return "\033[%sm%s\033[m" % (arg, text)

def vis(text):
    return re.sub(r"[\x00-\x1F\x80-\x9F]",
                  lambda m: "\033[2m<%02X>\033[m" % ord(m[0]),
                  text)

def print_log(fh):
    now = datetime.datetime.now().astimezone()

    firstdate = None
    lastdate = None
    lastwname = None

    for line in fh:
        date, wname, text = line.split("\t", 2)
        date = datetime.datetime.fromisoformat(date)
        wname = re.sub(r"^<(.+)>$", r"\1", wname)
        text = text.rstrip()
        text = vis(text)

        if "#" in wname:
            # Channel messages
            name = "?"
            if m := re.match(r"^<-i-> Mode (\S+) \[(.+?)\] by (\S+)$", text):
                # /mode
                name = "-- %s:" % m[3]
                text = "Mode %s [%s]" % (m[1], m[2])
            elif m := re.match(r"^<(\S+)> (.*)$", text):
                # Regular
                name = "<%s>" % m[1]
                text = m[2]
        else:
            # All kinds of non-channel messages
            if m := re.match(r"^<(\S+)> \1: (.*)$", text):
                # /notice
                name = "-%s-" % m[1]
                text = m[2]
            elif m := re.match(r"^<(\S+)> \1 (.*)$", text):
                # /me
                name = "* %s" % m[1]
                text = m[2]

        if (now - date).total_seconds() > 70000:
            datefmt = "%b %-d, %H:%M"
        else:
            datefmt = "%H:%M"

        FMT_DASH = "38;5;8"
        FMT_ODATE = "38;5;8"
        FMT_HDATE = "1;91"
        FMT_WNAME = "38;5;72"
        FMT_NAME_CHAN = "38;5;150"
        FMT_NAME_PRIV = "38;5;178"
        FMT_NAME_NOTICE = "38;5;66"

        if wname != lastwname:
            # Always print full header if buffer changes
            firstdate = date
            print(csi(FMT_DASH, "--"),
                  csi(FMT_HDATE, date.strftime(datefmt)),
                  csi(FMT_WNAME, wname),
                  csi(FMT_DASH, "--"))
        elif (date - firstdate).total_seconds() > 300:
            # If same buffer, print date-only header every 5 minutes
            firstdate = date
            print(csi(FMT_DASH, "--"),
                  csi(FMT_ODATE, date.strftime(datefmt)),
                  csi(FMT_DASH, "--"))

        if name.startswith("-"):
            fmt = FMT_NAME_NOTICE
        elif "#" in wname:
            fmt = FMT_NAME_CHAN
        else:
            fmt = FMT_NAME_PRIV

        print("  " + csi(fmt, name), text)

        lastdate = date
        lastwname = wname

os.umask(0o077)

cache_path = Env.find_cache_file("highlights.txt")

rhost = "star"
rpath = "irclogs/perl.highmon.log"

delta, offs = download_log(rhost, rpath, cache_path)
if delta:
    with open(cache_path, "rb") as fh:
        fh.seek(offs)
        print_log(io.TextIOWrapper(fh))
else:
    print("hi: no new items")
