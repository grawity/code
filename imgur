#!/bin/bash

# imgur script by Bart Nagel <bart@tremby.net>
# version 3
# I release this into the public domain. Do with it what you will.

# Required: curl
#
# Optional: xsel or xclip for automatically putting the URLs on the X selection
# for easy pasting
#
# Instructions:
# Put it somewhere in your path and maybe rename it:
# 	mv ~/Downloads/imgurbash.sh ~/bin/imgur
# Make it executable:
# 	chmod +x ~/bin/imgur
# Optional, since Alan kindly provided an API key for this script: stick your
# API key in the top:
# 	vim ~/bin/imgur
# Upload an image:
# 	imgur images/hilarious/manfallingover.jpg
# Upload multiple images:
# 	imgur images/delicious/cake.png images/exciting/bungeejump.jpg
# The URLs will be displayed (and the delete page's URLs will be displayed on
# stderr). If you have xsel or xclip the URLs will also be put on the X
# selection, which you can usually paste with a middle click.

apikey="bba16b32760b0d259092636758c9c4c2"

errors=false
images=0
clip=""

for file; do
	if [[ ! -f $file ]]; then
		echo "Error: '$file' is not a file, skipping" >&2
		errors=true
		continue
	fi

	curlopt=(
		-s
		-H "Expect: "
		-F "key=$apikey"
		-F "image=@$file"
	)

	if [[ $DEBUG ]]; then
		curlopt+=( "-v" )
	fi

	if (( `stat -c %s "$file"` > 1024*100 )); then
		curlopt+=( "-#" )
	fi

	response=$(curl "${curlopt[@]}" \
		http://imgur.com/api/upload.xml)
	# the "Expect: " header is to get around a problem when using this through
	# the Squid proxy. Not sure if it's a Squid bug or what.

	if (( $? )); then
		echo "Upload failed" >&2
		errors=true
		continue
	elif echo "$response" | grep -qs "<error_msg>"; then
		echo "Error message from imgur:" >&2
		echo "$response" | sed -rn 's/.*<error_msg>(.*)<\/error_msg>.*/\1/p' >&2
		errors=true
		continue
	fi

	if ! echo "$response" | grep -qs original_image; then
		echo "CAPTCHA'd again. Darnit."
		exit 1
	fi

	url=$(echo "$response" |
		sed -rn 's/.*<original_image>(.*)<\/original_image>.*/\1/p')

	deleteurl=$(echo "$response" |
		sed -rn 's/.*<delete_page>(.*)<\/delete_page>.*/\1/p')

	setfattr -n "user.imgur.image-url" -v "$url" "$file"
	setfattr -n "user.imgur.delete-url" -v "$deleteurl" "$file"

	printf "%s\n" "$url $deleteurl" >> ~/Pictures/.uploads

	printf "%s\n" "$url"

	printf "Delete page:\n%s\n" "$deleteurl" >&2

	if (( images++ )); then
		clip+=$'\n'
	fi
	clip+=$url
done

# put the URLs on the clipboard if we have xsel or xclip
if [[ $DISPLAY && $clip ]]; then
	echo -n "$clip" | xsel -i -b
fi

! $errors
