#!/usr/bin/env bash

. lib.bash || exit

repo=$1
if ! [[ $repo ]]; then
	die "missing repository argument"
elif ! [[ -d $repo ]]; then
	die "repository '$repo' does not exist"
elif ! gitdir=$(git -C "$repo" rev-parse --git-dir) || ! [[ $gitdir ]]; then
	die "could not determine Git repository directory"
fi
objdir=$gitdir/annex/objects
bare=$(git -C "$repo" config --get core.bare)
direct=$(git -C "$repo" config --get annex.direct)

cd "$objdir" || die "could not change to '$objdir'"
if [[ $bare == true && $direct != true ]]; then
	log "converting from non-bare (mixed) to bare (lower)"
	format='${hashdirmixed} ${hashdirlower} ${key}\n'
elif [[ $bare == false ]] || [[ $bare == true && $direct == true ]]; then
	log "converting from bare (lower) to non-bare (mixed)"
	format='${hashdirlower} ${hashdirmixed} ${key}\n'
else
	die "could not determine whether repository is bare"
fi
find . -mindepth 3 -maxdepth 3 -type d -printf '%f\n' |
git annex examinekey --batch --format="$format" | {
	declare -i migrated=0 skipped=0 collided=0
	while read -r olddir newdir key; do
		if [[ -d $olddir$key && ! -d $newdir$key ]]; then
			[[ -d $newdir ]] || mkdir -p "$newdir"
			log "migrating {${olddir%/} => ${newdir%/}}/$key"
			chmod u=rwx "$olddir$key"
			mv "$olddir$key" "$newdir$key" || die "could not migrate $key"
			chmod u=rx "$newdir$key"
			(( ++migrated ))
		elif [[ -d $newdir$key && ! -d $olddir$key ]]; then
			debug "skipping $newdir$key (already migrated)"
			(( ++skipped ))
		elif [[ ! -d $olddir$key ]]; then
			die "old path '$olddir$key' does not exist"
		elif [[ -d $newdir$key ]]; then
			warn "new path '$newdir$key' already exists"
			if [[ -e $olddir$key/$key ]]; then
				log "reinjecting $key"
				git annex setkey "$key" "$olddir$key/$key" ||
					die "failed to reinject $key"
				log "removing $olddir$key"
				chmod u=rwx "$olddir$key"
				rm -rf "$olddir$key"
			else
				err "foo: '$olddir$key/$key' not found"
			fi
			(( ++collided ))
		fi
	done
	log2 "converted $migrated keys (skipped $skipped, collided $collided)"
}
log "cleaning up leftover empty directories"
rmdir --parents --ignore-fail-on-non-empty */*/
