#!/usr/bin/env bash

. lib.bash || exit

do_mount=0
while getopts ":m" OPT; do
	case $OPT in
	m) do_mount=1;;
	*) lib::die_getopts;;
	esac
done; shift $((OPTIND-1))
while [[ $1 == --* ]]; do
	case $1 in
	--mount) do_mount=1; shift;;
	*) break;;
	esac
done

host=$HOSTNAME
root=$HOME

if (( do_mount )); then
	if (( $# >= 2 )); then
		host=$1
		shift
	fi
	path=$1
else
	rel=${PWD#"${root%/}/"}
	#rel=$(realpath --relative-base="$root" "$PWD")
	debug "pwd relative to root: '$rel'"

	depth=${rel//[^\/]/}/
	depth=${#depth}
	debug "strip depth relative to root: $depth"

	paths=()
	for arg in "$@"; do
		arg=$(realpath --relative-base="$root" "$arg")
		#paths+=("$rel/$arg")
		paths+=("$arg")
	done
	debug "paths to restore: ${paths[@]}"
fi

case $host in
	frost)	repo="/vol4/Backup/Homes/$host.borg";;
	rain|midnight)
		repo="/vol3/Backup/Homes/$host.borg";;
esac

[[ -d $repo ]] || die "repository '$repo' not found"

archive=$(borg list --last 1 --short "$repo")
debug "latest archive is '$archive'"

if (( do_mount )); then
	info "mounting $repo ($archive) at '$path'"
	do: borg mount \
		"$repo::$archive" "$path"
else
	info "restoring from $repo ($archive)"
	do: borg extract \
		--list \
		--verbose \
		--strip-components "$depth" \
		"$repo::$archive" "${paths[@]}"
fi
