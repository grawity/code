#!/usr/bin/env php
<?php
# rdt v1.5 - recursive DNS lookup tool
#
# (c) 2009–2020 Mantas Mikulėnas <grawity@gmail.com>
# Released under the MIT License (dist/LICENSE.mit)
#
# Q: Why haven't you rewritten this in Python, Perl, or some other
#    civilized language?
# A: Performance. It takes longer to `import dns.resolver` in Python
#    than to run this whole script to completion in PHP.
#
# Q: Does it matter, since lookups from cold cache are slow anyway?
# A: Yes.
#
# Q: Would PyDNS be faster?
# A: I don't know. I already have other scripts using dnspython and
#    don't feel like rewriting them for consistency. (And I would feel
#    bad if I had some scripts using one and some using the other.)
#
# Q: Golang?
# A: Goaway.
#
# Q: Rust?
# A: Not yet.

error_reporting(-1); // use strict;

function msg_help() {
	$usage = <<<EOTFM
Usage: rdt [-cC] ADDRESS [ADDRESS ...]

Displays forward and/or reverse DNS of a given address, recursively.

Options:
  -c, -C                        Enable/disable coloured output.

EOTFM;
	fwrite(STDERR, $usage);
	return 2;
}

function is_inetaddr($a) {
	return @inet_pton($a) !== false;
}
function is_inet4addr($a) {
	return ($p = @inet_pton($a)) !== false and strlen($p) == 4;
}
function is_inet6addr($a) {
	return ($p = @inet_pton($a)) !== false and strlen($p) == 16;
}

# convert IP address to .arpa domain for PTR
function to_ptr($ip) {
	$packed = @inet_pton($ip);
	if ($packed === false) {
		return false;
	} elseif (strlen($packed) == 4) {
		$ip = unpack("C*", $packed);
		$suffix = ".in-addr.arpa.";
	} elseif (strlen($packed) == 16) {
		$ip = unpack("H*", $packed);
		$ip = str_split($ip[1]);
		$suffix = ".ip6.arpa.";
	} else {
		return false;
	}
	return implode(".", array_reverse($ip)) . $suffix;
}

# Do DNS requests
function resolve($addr) {
	if (is_inetaddr($addr)) {
		$addr = to_ptr($addr);
		$rr = @dns_get_record($addr, DNS_PTR);
	} else {
		$rr = @dns_get_record($addr, DNS_CNAME);
		if (empty($rr)) {
			$rr4 = @dns_get_record($addr, DNS_A);
			$rr6 = @dns_get_record($addr, DNS_AAAA);
			$rr = array_merge($rr4 ? $rr4 : array(),
			                  $rr6 ? $rr6 : array());
		}
	}

	$addresses = array();
	if (empty($rr))
		return $addresses;
	foreach ($rr as $record) {
		switch ($record["type"]) {
		case "A":
			$addresses[] = $record["ip"];
			break;
		case "AAAA":
			$addresses[] = $record["ipv6"];
			break;
		case "CNAME":
		case "PTR":
			$addresses[] = $record["target"];
			break;
		}
	}
	return $addresses;
}

# Colourize the provided string.
function colour($addr) {
	$addr = "$addr";

	if (!$GLOBALS["use_colour"])
		return $addr;

	if ($addr === "(none)")
		$c = "38;5;9";
	elseif ($addr[0] == "_") // SRV name
		$c = "1";
	elseif (preg_match('/^[0-9]+$/', $addr)) // port number
		$c = "38;5;112";
	elseif (is_inet4addr($addr))
		$c = "38;5;175";
	elseif (is_inet6addr($addr))
		$c = "38;5;110";
	else
		$c = "38;5;215";

	return "\033[{$c}m{$addr}\033[m";
}

# This is where the fun happens.
function go($from, $depth = 0, $skip = array(), &$visited = array()) {
	$visited[] = $from;

	# print current address
	print str_repeat(" ", $depth*3) . colour($from) . " = ";

	$addresses = resolve($from); sort($addresses);

	if (empty($addresses))
		print colour("(none)");
	else
		print implode(", ", $addresses);
	print "\n";

	# recursively look up the results
	foreach ($addresses as $addr) {
		$addr = strtolower($addr);
		if (in_array($addr, $visited) or in_array($addr, $skip))
			continue;
		$visited[] = $addr;
		go($addr, $depth+1, $skip+$addresses, $visited);
	}
}

function gosrv($from) {
	if (preg_match('/^(.*)@(.*)$/', $from, $m)) {
		list(, $service, $domain) = $m;
	} else {
		$service = $from;
		$domain = "nullroute.eu.org";
	}

	if (!strlen($domain)) {
		fprintf(STDERR, "rdt: domain name cannot be empty\n");
		return false;
	}
	if (!strlen($service)) {
		fprintf(STDERR, "rdt: service name cannot be empty\n");
		return false;
	}
	if (!preg_match('/^[a-z0-9-]+$/', $service)) {
		fprintf(STDERR, "rdt: service '$service' does not look valid\n");
		return false;
	}
	switch ($service) {
		case "afsdb": $service = "afs3-vlserver"; break;
	}

	$found = 0;
	foreach (["tcp", "udp", "sctp"] as $proto) {
		$name = "_$service._$proto.$domain";
		$rrset = dns_get_record($name, DNS_SRV);
		if (!$rrset)
			continue;
		print colour($name) . " is provided by:\n";
		foreach ($rrset as $rr) {
			if ($rr["target"] == "" && $rr["port"] == 0) {
				print str_repeat(" ", 1*3) . colour("(none)") . " (null record found)\n";
				continue;
			}
			print str_repeat(" ", 1*3) . colour($rr["target"]) . " port " . colour($rr["port"])." = ";
			$addresses = resolve($rr["target"]);
			sort($addresses);
			if (empty($addresses))
				print colour("(none)");
			else
				print implode(", ", $addresses);
			print "\n";
		}
		$found++;
	}
	if (!$found) {
		fprintf(STDERR, "rdt: service '$service' on '$domain' not found\n");
		return false;
	}
	return true;
}

# on Windows, %TERM% will most likely be unset
# on Unix, posix.so might be disabled, if it is -- check $TERM
if (function_exists("posix_isatty")) {
	$use_colour = posix_isatty(STDOUT);
} else {
	$TERM = getenv("TERM");
	$use_colour = !($TERM === false or $TERM === "dumb");
}

$dosrv = (basename($argv[0]) == "srv");
$addresses = array();

$err = 0;
$optind = 0;
foreach (getopt("cChs", ["color", "no-color", "help", "srv"], $optind) as $opt => $arg) {
	switch ($opt) {
		case "c":
		case "color":
			$use_colour = true; break;
		case "C":
		case "no-color":
			$use_colour = false; break;
		case "s":
		case "srv":
			$dosrv = true; break;
		case "h":
		case "help":
			exit(msg_help());
		default:
			fwrite(STDERR, "rdt: unknown option '$opt'\n");
			++$err;
	}
}
for ($i = $optind; $i < $argc; $i++) {
	$addresses[] = $argv[$i];
}

if ($err > 0 || count($addresses) == 0)
	exit(msg_help());

foreach ($addresses as $i => $start_addr) {
	if ($i > 0)
		print "\n";

	if ($dosrv)
		gosrv($start_addr);
	else
		go($start_addr);
}
