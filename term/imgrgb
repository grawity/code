#!/usr/bin/env perl
# Image viewer for terminals that support true colors.
# (c) 2020 Mantas Mikulėnas <grawity@gmail.com>
#
# Based on vte/perf/img.sh
# (c) 2014 Egmont Koblinger
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

use Getopt::Long qw(:config no_ignore_case);
use Image::Magick;

# The first separator is used for most parameters;
# the second is used only between the color-type and color-codes.
my $sep1 = ";";
my $sep2 = ";";
my $promptheight = 3;
my $fullwidth = 0;

GetOptions(
	"O|colon4|official|dejure"	=> sub { $sep1 = ":"; $sep2 = "::"; },
	"W|colon3|wrong"		=> sub { $sep1 = ":"; $sep2 = ":"; },
	"S|semicolon|common|defacto"	=> sub { $sep1 = ";"; $sep2 = ";"; },
	"w|wide"			=> \$fullwidth,
) || exit(2);

if (!@ARGV) {
	print "Usage: imgrgb [--format] imagefile\n";
	print "\n";
	print "  --colon4|--official|--dejure:    Official format            \\e[38:2::R:G:Bm\n";
	print "  --colon3|--wrong:                Misinterpreted format      \\e[38:2:R:G:Bm\n";
	print "  --semicolon|--common|--defacto:  Commonly used format       \\e[38;2;R;G;Bm\n";
	exit(2);
}

if (!-f $ARGV[0]) {
	die "imgrgb: input '$ARGV[0]' is not a file\n";
}

my $COLUMNS = int(`tput cols`);
my $LINES = int(`tput lines`);

$COLUMNS -= 1;
$LINES -= $promptheight;	# Reserve space for shell prompt
$LINES *= 2;			# Two rows per text line

my $size = ($fullwidth) ? "${COLUMNS}x" : "${COLUMNS}x${LINES}";

my $image = Image::Magick->new;
$image->Read($ARGV[0]);
$image->Thumbnail(geometry => $size);
$image->Quantize(colorspace => "srgb");

my @upper = ();
my @lower = ();
my $buf = "";
for my $row (0..$image->Get("height")) {
	for my $col (0..$image->Get("width")) {
		my ($r, $g, $b, $a) = $image->GetPixel(x => $col, y => $row);

		# GetPixel returns values 0..1 after Quantize()
		if ($r > 1 || $g > 1 || $b > 1 || $a < 1) {
			warn "pixel ($col,$row) = <$r $g $b $a>\n";
		}
		$r = int($r * 255);
		$g = int($g * 255);
		$b = int($b * 255);

		if ($row % 2) {
			$lower[$col] = "$r$sep1$g$sep1$b";
		} else {
			$upper[$col] = "$r$sep1$g$sep1$b";
		}
	}

	if ($row % 2) {
		for my $i (0..@lower-1) {
			$buf .= "\e[38${sep1}2${sep2}${upper[$i]};48${sep1}2${sep2}${lower[$i]}m▀";
		}
		$buf .= "\e[0m\e[K\n";
		@upper = ();
		@lower = ();
	}
}
# Print the last half line, if required.
if (@upper) {
	for my $i (0..@upper-1) {
		$buf .= "\e[38${sep1}2${sep2}${upper[$i]}m▀";
	}
	$buf .= "\e[0m\e[K\n";
}
print $buf;
