#!/usr/bin/env bash
# pull - update version control repositories to latest upstream versions

# fetch.output compact
# merge.stat off

. lib.bash || exit

_log_color[logcmd]='\e[32m'
_log_fprefix[logcmd]=' >'
_log_fcolor[logcmd]='\e[35m'

is() {
	local dir=$(realpath --relative-to="$_PULL_STARTDIR" "$PWD")
	if [[ $1 == none ]]; then
		log2 "skipping '$dir' (unknown)"
	else
		log2 "updating '$dir' ($1)"
	fi
}

log:() {
	#lib:msg "$*" 'logcmd' >&2
	"$@" || err "command '$1' failed (status $?)"
}

upd:() {
	local old=$1 new=$2 cmd=("${@:3}")
	local bold= reset=
	if [[ -t 1 ]]; then
		bold=$'\e[1m' reset=$'\e[m'
	fi
	if [[ "$old" != "$new" ]]; then
		lib:log "Updated from ${bold}${old}${reset} to ${bold}${new}${reset}"
		echo " # ${cmd[*]}"
	fi
}

svnsync() {
	local lib=$(which libfunsync.so 2>/dev/null)
	if [[ -f $lib ]]; then
		env LD_PRELOAD="$lib" svnsync "$@"
	else
		env svnsync "$@"
	fi
}

do_pull() {
	debug "pull[$[++depth],$BASHPID] called, checking '$PWD' for repo"

	local errors=0
	local git_diffstat_opts=(
		":(exclude)fuzz/*"
		":(exclude)testing/*"
		":(exclude)tests/*"
		":(exclude)vendor/*"
	)

	if [[ -d .git ]]; then
		while IFS="" read -r line; do
			if [[ $line == @(":(exclude)"*|":!"*) ]]; then
				git_diffstat_opts+=("$line")
			fi
		done < <(git config --get-all nullroute.git-new.paths)
	fi

	if (( opt_dryrun > 1 )); then
		is "noop"
	elif [[ -f Pullfile ]] && ! [[ $1 == file && $2 == . ]]; then
		do_main
	elif (( opt_dryrun > 0 )); then
		is "noop"
	elif [[ -d .git/svn ]]; then
		is "Git (SVN clone)"
		if remote=$(git config --get svn-remote.svn.url); then
			rroot=$(log: svn info "$remote" | sed -n 's/^Repository Root: //p')
			if [[ $rroot == file://* ]]; then
				log: svnsync sync "$rroot"
			fi
		fi
		ref=$(git config --get svn-remote.svn.fetch)
		ref=${ref#*:}
		ref=${ref:-refs/remotes/git-svn}
		rev() { git rev-parse --verify HEAD; }
		old=$(rev)
		log: git svn fetch
		log: git merge --ff-only "$ref"
		new=$(rev)
		if [[ "$old" != "$new" ]]; then
			old=${old:0:12}
			new=${new:0:12}
			upd: "$old" "$new" tig $old..$new
		fi
	elif [[ -e .git ]]; then
		is "Git"
		rev() { git rev-parse --verify ${1:-HEAD}; }
		sparse=$(git config --type bool core.sparseCheckout || echo false)
		case $sparse in
			true) recurseopt='--recurse-submodules=no';;
			*) recurseopt='';
		esac
		old=$(rev)
		if log: git pull --ff-only --no-stat $recurseopt; then
			new=$(rev)
			if [[ -e .gitmodules ]] && [[ $sparse != true ]]; then
				log: git submodule update
			fi
		else
			new=$(rev @{u})
		fi
		if [[ "$old" != "$new" ]]; then
			old=${old:0:12}
			new=${new:0:12}
			log: git --no-pager diff --stat "$old".."$new" -- "${git_diffstat_opts[@]}"
			upd: "$old" "$new" tig $old..$new
		fi
	elif [[ "$(git config core.bare)" == "true" ]]; then
		is "Git bare"
		rev() { git rev-parse --verify HEAD; }
		old=$(rev)
		log: git fetch
		new=$(rev)
		if [[ "$old" != "$new" ]]; then
			git --no-pager diff --stat "$old" "$new" "${git_diffstat_opts[@]}"
			old=${old:0:12}
			new=${new:0:12}
			upd: "$old" "$new" tig "$old..$new"
		fi
	else
		is none
	fi || (( ++errors ))

	debug "pull[$[depth--],$BASHPID] returning with $errors errors"
	(( !errors ))
}

do_main() {
	debug "main[$[++depth],$BASHPID] called, checking for Pullfile"

	local src=none
	local errors=0
	local -A did

	if [[ ! $_PULL_STARTDIR ]]; then
		export _PULL_STARTDIR=$PWD
	fi

	if (( ! $# )) && [[ -s Pullfile ]]; then
		debug "reading args from Pullfile"
		src=file
		set -- $(grep '^[^#]' Pullfile)
	fi

	if (( ! $# )) && [[ -f Pullfile ]] && [[ ! -s Pullfile ]]; then
		debug "empty Pullfile, assuming '*/'"
		src=empty
		set -- */
	fi

	if (( ! $# )); then
		debug "no args, assuming '.'"
		src=auto
		set -- .
	fi

	for arg; do
		debug "processing arg '$arg'"

		if [[ $arg == -* ]]; then
			arg=${arg#-}
			if [[ ! -d $arg ]]; then
				debug "- exclusion is not a directory, ignoring"
				if [[ $arg == *[*?]* ]]; then
					warn "use '!$arg', not '-$arg', to exclude globs"
				fi
				continue
			fi
			dir=$(readlink -f "$arg")
			debug "- excluding dir '$dir'"
			did[$dir]=y
			continue
		fi

		if [[ $arg == !* ]]; then
			arg=${arg#!}
			debug "- excluding glob '$arg'"
			_skip_glob+="|$arg"
			skip_glob="@(${_skip_glob#|})"
			debug "- skip_glob is now '$skip_glob'"
			continue
		fi

		lib:trace "matching ${arg@Q} against ${skip_glob}"
		if [[ $skip_glob && $arg == $skip_glob ]]; then
			debug "- arg '$arg' is excluded, skipping"
			continue
		fi

		if [[ ! -d $arg && -d $arg.git && ! ${did["$arg"]} ]]; then
			arg+=.git
		fi

		if [[ ! -d $arg ]]; then
			err "not a directory: '$arg'"
			continue
		fi

		dir=$(readlink -f "$arg")

		if [[ ${did[$dir]} ]]; then
			debug "- dir '$dir' already seen, skipping"
			continue
		fi
		did[$dir]=y

		if [[ -u $dir ]]; then
			debug "- dir '$dir' is ignored (+u), skipping"
			continue
		fi

		debug "- updating '$dir'"
		(cd "$dir" && do_pull "$src" "$arg") || err "update of '$dir' failed"
	done

	if (( errors && depth == 1 )); then
		(notice "$errors/$# failed")
	fi

	debug "main[$[depth--],$BASHPID] returning with $errors errors"
	(( !errors ))
}

usage() {
	echo "Usage: $progname [-n] [DIR...]"
	echo
	echo_opt "-n" "dry run (process Pullfile and exit)"
}

depth=0
opt_dryrun=0

while getopts ":n" OPT; do
	case $OPT in
	n) (( ++opt_dryrun ));;
	*) lib:die_getopts;;
	esac
done; shift $((OPTIND-1))

do_main "$@" && (( !errors ))
