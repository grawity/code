#!/usr/bin/env python3
# dhcpclassless - Generate DHCP option 121 (classless static route)
import argparse
import ipaddress

def n_octets(width):
    assert 0 <= width <= 32
    return int((width + 7) / 8) # equivalent to int(ceil(width / 8))

parser = argparse.ArgumentParser()
parser.add_argument("-d", "--no-default", action="store_true",
                    help="allow default route to be missing")
parser.add_argument("route", nargs="+",
                    help="route as 'prefix/len@gateway'")
args = parser.parse_args()

routes = []
has_default = False

for arg in args.route:
    network, _, gateway = arg.partition("@")
    network = ipaddress.IPv4Network(network or "0.0.0.0/0")
    gateway = ipaddress.IPv4Address(gateway or "0.0.0.0")
    if network.prefixlen == 0:
        has_default = True
    routes.append((network.network_address,
                   network.prefixlen,
                   gateway))

if not has_default and not args.no_default:
    exit("error: Default route was not specified")

routes.sort()
buf = b""

print("Routes:")
for network, prefixlen, gateway in routes:
    print(f"\t{network}/{prefixlen} via {gateway}")
    buf += bytes([prefixlen])
    buf += network.packed[:n_octets(prefixlen)]
    buf += gateway.packed

print()
# Windows XP only recognizes option 249; later versions understand 121.
print(f"Option code: 121 (standard), 249 (MS pre-standard)")
print(f"Option data: 0x{buf.hex().upper()}")
print()
print(f"Mikrotik RouterOS:")
print(f"/ip dhcp-server option")
print(f"add name=classless code=121 value=0x{buf.hex().upper()}")
print(f"add name=ms-classless code=249 value=0x{buf.hex().upper()}")
