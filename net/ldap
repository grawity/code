#!/usr/bin/env perl
use warnings;
use strict;
use Authen::SASL;
use File::Basename;
use Net::LDAP;
use Net::LDAP::Util qw(ldap_explode_dn);
use Nullroute::Lib qw(_debug _info _warn _err _die);
use Nullroute::LDAP qw(ldap_check ldap_format_error);
use Getopt::Long qw(:config bundling require_order);

sub confirm {
	my ($msg) = @_;
	print "$msg ";
	STDOUT->flush();
	return (<STDIN> =~ /^y$/i);
}

sub get_ldap_conf {
	my ($key) = @_;
	my $path = "/etc/ldap/ldap.conf";
	if (open(my $fh, "<", $path)) {
		while (<$fh>) {
			next if /^#/;
			next unless /^\w/;
			if (/^\Q$key\E\s+(.+?)\s*$/) {
				_debug("found $key = '$1'");
				close($fh);
				return $1;
			}
		}
		close($fh);
	}
}

sub ldap_attrset_parse {
	my ($args, %opts) = @_;
	my %changes;

	for (@$args) {
		if (/^(?<attr>\w+)(?<op>[+]?=)(?<value>.+)$/s) {
			my ($op, $attr, $value) = ($+{op}, $+{attr}, $+{value});
			_debug("value op '$op' on '$attr' with '$value'");
			if ($opts{translate}) {
				($attr, $value) = $opts{translate}->($attr, $value);
			} elsif ($opts{attr_map}) {
				$attr = $opts{attr_map}{$attr} // $attr;
			}
			push @{$changes{$attr}}, $value;
		}
		else {
			_err("syntax error: bad operation '$_'");
			return;
		}
	}

	return \%changes;
}

sub ldap_changeset_parse {
	my ($args, %opts) = @_;
	my %changes;
	my %attrs;

	for (@$args) {
		# interpret 'foo=' as unset op (due to '-foo' conflicting with getopt)
		s/^(\w+)=$/-$1/;
		# HACK: strip whitespace for easier copypasting
		s/[\s\n]+/ /gs;
		if (/^(?<op>-)(?<attr>\w+)$/s) {
			my ($op, $attr) = ($+{op}, $+{attr});
			_debug("attr op '$op' on '$attr'");
			if ($opts{translate}) {
				($attr) = $opts{translate}->($attr);
			} elsif ($opts{attr_map}) {
				$attr = $opts{attr_map}{$attr} // $attr;
			}
			if ($op eq "-") {
				$changes{"delete"}{$attr} = [];
				$attrs{$attr}{delattr}++;
			}
			else {
				_die("BUG: unhandled op '$op' in '$_'");
			}
		}
		elsif (/^(?<attr>\w+)(?<op>[+-]?=)(?<value>.+)$/s) {
			my ($op, $attr, $value) = ($+{op}, $+{attr}, $+{value});
			_debug("value op '$op' on '$attr' with '$value'");
			if ($opts{translate}) {
				($attr, $value) = $opts{translate}->($attr, $value);
			} elsif ($opts{attr_map}) {
				$attr = $opts{attr_map}{$attr} // $attr;
			}
			#if ($ATTR_PACK{lc $attr}) {
			#	 $value = $ATTR_PACK{lc $attr}->($value);
			#}
			if ($op eq "=") {
				push @{$changes{"replace"}{$attr}}, $value;
				$attrs{$attr}{"replace"}++;
			}
			elsif ($op eq "+=") {
				push @{$changes{"add"}{$attr}}, $value;
				$attrs{$attr}{"add"}++;
			}
			elsif ($op eq "-=") {
				push @{$changes{"delete"}{$attr}}, $value;
				$attrs{$attr}{"delete"}++;
			}
			else {
				_die("BUG: unhandled op '$op' in '$_'");
			}
		}
		else {
			_err("syntax error: bad operation '$_'");
			return;
		}
	}

	for my $attr (keys %attrs) {
		my $n = $attrs{$attr};
		if (($n->{add} || $n->{replace}) && $n->{delattr}) {
			_warn("'$attr': attribute deletion will override all other operations");
		}
		if (($n->{add} || $n->{delete}) && $n->{replace}) {
			_warn("'$attr': reassignment will override add/delete operations");
		}
	}

	return \%changes;
}

sub ldap_changeset_dump {
	my ($changes) = @_;
	my @types = qw(replace add delete);
	my %ops = qw(replace = add += delete -=);
	my @out;
	for my $type (@types) {
		my $c = $changes->{$type};
		if ($c && %$c) {
			for my $key (sort keys %$c) {
				my $vals = $c->{$key};
				if (@$vals) {
					#if ($ATTR_UNPACK{lc $key}) {
					#	$vals = [map {$ATTR_UNPACK{lc $key}->($_)} @$vals];
					#}
					push @out, "$key $ops{$type} \"$_\"" for @$vals;
				} else {
					push @out, "$key $ops{$type} all values";
				}
			}
		}
	}
	return @out;
}

sub get_connection {
}

my $cmd;
my $opt_uri;
my $opt_starttls = 0;
my $opt_mech = "GSSAPI";
my $opt_base;
my $opt_scope = "sub";
my $opt_filter;
my @opt_changes;

GetOptions(
	"cmd=s" => \$cmd,
	"H|uri=s" => \$opt_uri,
	"b|base=s" => \$opt_base,
	"f|filter=s" => \$opt_filter,
	"s|scope=s" => \$opt_scope,
) or exit(2);

$opt_uri //= get_ldap_conf("URI");
$opt_base //= get_ldap_conf("BASE");

if (!$cmd) {
	if (basename($0) =~ /^ldap(\w+)$/) {
		$cmd = $1;
	} else {
		$cmd = shift @ARGV;
	}
}

if (!$cmd) {
	_die("missing subcommand");
}

if ($cmd eq "ls" || $cmd eq "set" || $cmd eq "rm") {
	if (!$opt_filter) {
		$opt_filter = shift @ARGV;
	}
	if (!$opt_filter) {
		_die("missing entry filter");
	}

	my $changes;
	if ($cmd eq "set") {
		for (@ARGV) {
			if (/=/ || /^-/) {
				push @opt_changes, $_;
			} else {
				_err("unrecognized argument '$_'");
			}
		}
		$changes = ldap_changeset_parse(\@opt_changes);
	} else {
		_die("too many arguments given") if @ARGV;
	}

	_debug("connecting to '$opt_uri'");
	my $conn = Net::LDAP->new($opt_uri,
				verify => "require")
		or _die("failed to connect: $@");
	_debug("connected to host '".$conn->host."'");

	if ($opt_starttls) {
		_debug("starting TLS");
		ldap_check($conn->start_tls());
	}

	_debug("authenticating with SASL $opt_mech");
	ldap_check($conn->bind(sasl => Authen::SASL->new($opt_mech)));

	my $srch = $conn->search(base => $opt_base,
				scope => $opt_scope,
				filter => $opt_filter,
				attrs => ["1.1"]);
	ldap_check($srch);
	_info("found ".$srch->count." entries");
	for my $en ($srch->entries) {
		my $dn = $en->dn;
		if ($cmd eq "set" && %$changes) {
			print "modifying $dn\n";
			my $res = $conn->modify($dn, %$changes);
			if ($res->is_error) {
				if ($res->error_name eq "LDAP_TYPE_OR_VALUE_EXISTS") {
					_warn($res->error);
				} else {
					_err($res->error);
				}
			}
		} elsif ($cmd eq "rm") {
			if (confirm("remove entry '$dn'?")) {
				print "removing $dn\n";
				my $res = $conn->delete($dn);
				ldap_check($res);
			}
		} else {
			print "$dn\n";
		}
	}
}
elsif ($cmd eq "new") {
	my $dn;
	my $changes;

	$dn = shift @ARGV;
	if (!$dn || $dn !~ /,/) {
		_die("missing new entry DN");
	}
	if ($dn =~ /,$/) {
		$dn .= $opt_base;
	}

	for (@ARGV) {
		if (/=/) {
			push @opt_changes, $_;
		} elsif (/^@(.+)/) {
			push @opt_changes, "objectClass=$1";
		} else {
			_err("unrecognized argument '$_'");
		}
	}
	$changes = ldap_attrset_parse(\@opt_changes);
	if (!$changes || !%$changes) {
		_die("no attributes specified");
	}

	_info("creating entry '$dn'");
	my $edn = ldap_explode_dn($dn);
	my $echanges = {%$changes};
	for my $attr (keys %{$edn->[0]}) {
		# TODO: This doesn't work 100% well if the attr name
		#       is not all-lowercase in the attrset...
		my $val = $edn->[0]->{$attr};
		if (!grep {$_ eq $val} @{$echanges->{lc($attr)}}) {
			push @{$echanges->{lc($attr)}}, $val;
		}
	}
	for my $attr (sort keys %$echanges) {
		for my $val (sort @{$echanges->{$attr}}) {
			print "  \e[1m$attr\e[m: $val\n";
		}
	}

	_debug("connecting to '$opt_uri'");
	my $conn = Net::LDAP->new($opt_uri,
				verify => "require")
		or _die("failed to connect: $@");
	_debug("connected to host '".$conn->host."'");

	if ($opt_starttls) {
		_debug("starting TLS");
		ldap_check($conn->start_tls());
	}

	_debug("authenticating with SASL $opt_mech");
	ldap_check($conn->bind(sasl => Authen::SASL->new($opt_mech)));

	my $res = $conn->add($dn, attrs => [%$changes]);
	ldap_check($res);
}
else {
	_die("unknown subcommand '$cmd'");
}
