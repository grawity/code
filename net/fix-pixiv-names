#!/usr/bin/env python3
import argparse
import bs4
from functools import lru_cache
from nullroute.core import Core, Env
from nullroute.misc import filter_filename, set_file_attrs
from nullroute.api.pixiv import PixivClient, PixivApiClient, PixivApiError
from nullroute.renameutil import RenameJob
import os
from pprint import pprint
import re
from requests.exceptions import HTTPError

class PixivRenamer():
    def __init__(self):
        self.pixiv = PixivClient()
        self.api = PixivApiClient()
        self.api._authenticate()
        self.web = None
        self.dry_run = False

    def init_web_client(self):
        if not self.web:
            from nullroute.api.pixiv_web import PixivWebClient
            self.web = PixivWebClient()
            self.web._authenticate()

    ## fallback HTML scrape functions

    @lru_cache(maxsize=1024)
    def scrape_member_name_by_member_id(self, member_id):
        url = self.pixiv.fmt_member_url(member_id)
        Core.info("fetching %s" % url)
        resp = self.api.ua.get(url)
        resp.raise_for_status()
        body = bs4.BeautifulSoup(resp.content, "lxml")
        name = body.find("h1", {"class": "name"})
        if name:
            return name.get_text()
        raise ValueError("could not find member name tag")

    def scrape_member_id_by_illust_id(self, illust_id):
        url = self.pixiv.fmt_illust_url(illust_id)
        Core.info("fetching %s" % url)
        resp = self.api.ua.get(url)
        resp.raise_for_status()
        m = re.search(r'"/?member\.php\?id=(\d+)"',
                      resp.content.decode("utf-8"))
        if m:
            return int(m.group(1))
        raise ValueError("could not find member ID tag")

    ## public interface functions

    @lru_cache(maxsize=1024)
    def get_prefix_by_member_id(self, member_id):
        resp = self.api.get_member_info(member_id)
        prefix = self.pixiv.fmt_member_tag(resp["id"], resp["name"])
        return filter_filename(prefix)

    @lru_cache(maxsize=1024)
    def get_prefix_by_illust_id(self, illust_id):
        try:
            resp = self.api.get_illust_info(illust_id)
            prefix = self.pixiv.fmt_member_tag(resp["user"]["id"], resp["user"]["name"])
            return filter_filename(prefix)
        except (ValueError, PixivApiError) as e:
            Core.err(str(e))
            member_id = self.scrape_member_id_by_illust_id(illust_id)
            member_name = self.scrape_member_name_by_member_id(member_id)
            prefix = self.pixiv.fmt_member_tag(member_id, member_name)
            return filter_filename(prefix)

    @lru_cache(maxsize=1024)
    def get_prefix_by_fanbox_id(self, fanbox_id):
        self.init_web_client()
        resp = self.web.get_fanbox_post(fanbox_id)
        prefix = self.pixiv.fmt_member_tag(resp["user"]["userId"], resp["user"]["name"])
        return filter_filename(prefix)

    def get_fanbox_post_number(self, fanbox_id, image_id):
        self.init_web_client()
        resp = self.web.get_fanbox_post(fanbox_id)
        if "images" in resp["body"]:
            # image-only posts
            for i, img in enumerate(resp["body"]["images"]):
                if img["id"] == image_id:
                    return "fanbox%s_p%s" % (resp["id"], i)
        elif "blocks" in resp["body"]:
            # mixed text/image posts
            blocks = resp["body"]["blocks"]
            blocks = [b for b in blocks if b["type"] == "image"]
            for i, blk in enumerate(blocks):
                if blk["imageId"] == image_id:
                    return "fanbox%s_p%s" % (resp["id"], i)
        else:
            pprint(resp)
            raise ValueError("post %r has no 'images' array: %r" % (fanbox_id, resp["body"]))
        raise ValueError("could not find image ID %r in fanbox post %r" % (image_id, fanbox_id))

    def rename_file_in_dir(self, dirpath, filename):
        old_path = os.path.join(dirpath, filename)
        job = RenameJob(old_path, self.dry_run)

        if re.search(r"_pixiv\d+", filename):
            Core.trace("skip %r: found '_pixiv' in name", filename)
            return

        member_id = None
        illust_id = None
        fanbox_id = None
        member_tag = []
        illust_tag = []
        fanbox_tag = []
        prefix = []
        suffix = []
        current = prefix

        name, ext = filename.rsplit(".", 1)
        # preserve possible second extension (like .conv)
        m = re.match(r"^(.+)\.([a-z]{1,5})$", name)
        if m:
            name = m.group(1)
            ext = m.group(2) + "." + ext

        for word in name.split():
            m = re.match(r"^(.*)_pixiv(\d+)$", word)
            if m:
                member_id = int(m.group(1))
                member_tag = [word]
                continue
            m = re.match(r"^(\d+)_(p\d+|delays|ugoira\d+x\d+(?:@\d+)?)$", word)
            if m:
                illust_id = int(m.group(1))
                illust_tag = [word]
                current = suffix
                continue
            m = re.match(r"^fanbox(\d+)(_p\d+)?$", word)
            if m:
                fanbox_id = int(m.group(1))
                fanbox_tag = [word]
                current = fanbox_tag
                continue
            m = re.match(r"^\(\d\)$", word)
            if m:
                continue
            m = re.match(r"^(\d{5,9})$", word)
            if m and ext == "webm":
                illust_id = int(m.group(1))
                illust_tag = [word]
                continue
            if current is fanbox_tag:
                m = re.match(r"^\w{24}$", word)
                if m:
                    fanbox_tag.append(word)
                current = suffix
                continue
            current.append(word)

        if len(prefix) >= 2:
            Core.trace("skip %r: prefix=%r, suffix=%r, already has other tags",
                       filename, prefix, suffix)
            return
        elif (illust_id or fanbox_id or member_id):
            Core.trace("process %r (before): prefix=%r, member=%r, illust=%r, fanbox=%r, suffix=%r",
                       filename, prefix, member_tag, illust_tag, fanbox_tag, suffix)
        else:
            Core.trace("skip %r: no identifier", filename)
            return

        if illust_id:
            job.begin()
            try:
                member_tag = [self.get_prefix_by_illust_id(illust_id)]
            except HTTPError as e:
                job.end_fail(e)
                return
        elif fanbox_id:
            job.begin()
            try:
                member_tag = [self.get_prefix_by_fanbox_id(fanbox_id)]
                if len(fanbox_tag) > 1:
                    assert(len(fanbox_tag) == 2)
                    fanbox_tag[0] = self.get_fanbox_post_number(fanbox_id, fanbox_tag[1])
            except HTTPError as e:
                job.end_fail(e)
                return
        elif member_id:
            job.begin()
            try:
                member_tag = [self.get_prefix_by_member_id(member_id)]
            except HTTPError as e:
                job.end_fail(e)
                return

        Core.trace("process %r (after): prefix=%r, member=%r, illust=%r, fanbox=%r, suffix=%r",
                   filename, prefix, member_tag, illust_tag, fanbox_tag, suffix)
        newname = " ".join(prefix + member_tag + illust_tag + fanbox_tag + suffix) + "." + ext
        job.end_rename(newname)

def prune_dotfiles(listref):
    for item in [*listref]:
        if item.startswith("."):
            listref.remove(item)

parser = argparse.ArgumentParser()
parser.add_argument("path", nargs=argparse.ZERO_OR_MORE)
parser.add_argument("-n", "--dry-run", action="store_true", help="Do nothing.")
args = parser.parse_args()

r = PixivRenamer()
r.dry_run = args.dry_run

allowed_exts = (
    ".webm",
    #".txt",
    #".zip",
    ".jpg",
    ".jpeg",
    ".png",
    ".gif",
)

for arg in args.path or ["."]:
    if not os.path.exists(arg):
        Core.err("path %r does not exist" % arg)
    if os.path.isdir(arg):
        for dirpath, dirnames, filenames in os.walk(arg):
            prune_dotfiles(dirnames)
            for filename in filenames:
                if not filename.endswith(allowed_exts):
                    continue
                r.rename_file_in_dir(dirpath, filename)
    else:
        dirpath, filename = os.path.split(arg)
        r.rename_file_in_dir(dirpath, filename)

Core.exit()
