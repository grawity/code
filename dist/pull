#!/usr/bin/env bash
if [ "$DEBUG" ]; then set -x; fi
set -e

lastmsg=
today=$(date +%d)

log() {
	lastmsg=$*
	if [ -t 1 ]; then echo "dist/pull: $*"; fi
}

silent() {
	local tmp=$(mktemp /tmp/pull.XXXXXX) rc=0
	if "$@" >"$tmp" 2>&1; then
		rc=0
	else
		rc=$?
		echo "error: command '$1' returned $rc"
		echo "# log: $lastmsg"
		echo "# cwd: $PWD"
		echo "# args: $*"
		cat "$tmp"
	fi >&2
	rm -f "$tmp"
	return $rc
}

on_main() {
	[ "$(git symbolic-ref HEAD 2>/dev/null)" = refs/heads/main ]
}

if [ ! "$xyzzy" ]; then
	# Parent - update ourselves before trying to update .dotfiles
	export PATH="$HOME/bin/bin:$HOME/bin:$PATH"

	# Guard against .dotfiles deploying bad git/config
	if ! git var GIT_AUTHOR_IDENT >/dev/null; then
		echo "Removed broken git configuration file"
		if [ -e ~/.config/git/config ]; then
			mv -f ~/.config/git/config ~/.config/git/config.bad
		fi
		if [ -e ~/.gitconfig ]; then
			rm -f ~/.gitconfig
		fi
	fi

	cd ~/bin
	if on_main; then
		log "Updating ~/bin"
		silent git pull --ff-only
	else
		log "Skipping ~/bin (not on main branch)"
	fi
	xyzzy=42 exec ~/bin/dist/pull
else
	# Child - update dotfiles
	if [ $today -eq 7 ]; then
		log "Compacting ~/bin"
		(cd ~/bin && silent nice git gc) &
	fi

	if [ -d ~/.gnupg ] && [ ! -e ~/.ssh/authorized_keys.optout ]; then
		log "Updating authorized_keys"
		security/update-authorized-keys
	fi

	if [ -d ~/.dotfiles ]; then
		(cd ~/.dotfiles
		if on_main; then
			log "Updating ~/.dotfiles"
			silent git fetch origin
			silent git merge --ff-only origin/main || {
				git stash save "dist/pull on $(date)"
				git checkout -f main
				git reset --hard origin/main
			}
		else
			log "Skipping ~/.dotfiles (not on main branch)"
		fi)

		if [ $today -eq 14 ]; then
			log "Compacting ~/.dotfiles"
			(cd ~/.dotfiles && silent nice git gc) &
		fi

		log "Running ~/.dotfiles/install"
		~/.dotfiles/install -u
	fi

	wait
fi
