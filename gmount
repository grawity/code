#!/usr/bin/env bash

. lib.bash || exit

# load configuration

declare -i mount
declare -A alias outer_uuid

. "$path_config/gmount.conf.sh" || die "could not load configuration"

# parse command line

mount=1
standby=0
poweroff=0
media="/run/media/$USER"

if [[ ${0##*/} == gumount ]]; then
	mount=0
fi

while getopts ":duyY" OPT; do
	case $OPT in
	d) mount=0;;
	u) mount=0;;
	y) mount=0; standby=1;;
	Y) mount=0; poweroff=1;;
	*) lib::die_getopts;;
	esac
done; shift $((OPTIND-1))

if (( ! $# )); then
	die "volume not given"
fi

# mount volumes

for arg; do
	arg=${alias[$arg]:-$arg}

	if (( mount || standby || poweroff )); then
		uuid=${outer_uuid[$arg]}
		if [[ $uuid ]]; then
			debug "searching for outer_UUID '$uuid'"
			if [[ -e "/dev/disk/by-partuuid/$uuid" ]]; then
				dev=$(readlink -f "/dev/disk/by-partuuid/$uuid")
			elif [[ -e "/dev/disk/by-uuid/$uuid" ]]; then
				dev=$(readlink -f "/dev/disk/by-uuid/$uuid")
			else
				die "disk with UUID '$uuid' not found"
			fi
		else
			debug "searching for outer_label '$arg'"
			if [[ -e "/dev/disk/by-partlabel/$arg" ]]; then
				dev=$(readlink -f "/dev/disk/by-partlabel/$arg")
			elif [[ -e "/dev/disk/by-label/$arg" ]]; then
				dev=$(readlink -f "/dev/disk/by-label/$arg")
			else
				die "disk with label '$arg' not found"
			fi
		fi
	fi

	if (( mount )); then
		#debug "resetting failed systemd mounts, just in case"
		#sudo systemctl reset-failed
		info "mounting $dev"
		gvfs-mount -d "$dev"
	else
		mtpt=$(findmnt -no TARGET -S LABEL="$arg")
		if [[ $mtpt ]]; then
			info "unmounting $mtpt"
			gvfs-mount -u "$mtpt"
		fi
		if (( standby )); then
			dev=${dev%[0-9]}
			info "putting $dev to standby"
			sudo hdparm -y "$dev"
		elif (( poweroff )); then
			dev=${dev%[0-9]}
			info "powering off $dev"
			sudo hdparm -Y "$dev"
		fi
	fi
done
