#!/usr/bin/env bash

attach_console() {
	# Use IP address in case DNS is broken (which it will be,
	# because gw-core is also the primary DNS resolver).
	local host='idrac-gw-core.utenos-kolegija.lt'
	local addr='10.129.2.11'
	local kg=$(getnetrc -df %p "rmcp/$host")

	local user='cons'
	local pass=$(getnetrc -df %p "ipmi/$host" "$user")
	local priv=$(getnetrc -df %a "ipmi/$host" "$user")

	ip -c route get $addr

	echo "[connecting to $addr]"
	ipmiconsole -h "$addr" -k "$kg" \
	            -u "$user" -p "$pass" -l "${priv:-ADMINISTRATOR}"
}

setup_vlan() {
	[[ $HOSTNAME == @(ember|wind) ]] || return
	echo "[adding temporary VLAN]"
	sudo ip link add vlan2 link eno1 type vlan id 2
	sudo ip link set vlan2 up
	sudo ip addr add 10.129.255.1/16 dev vlan2
}

teardown_vlan() {
	[[ $HOSTNAME == @(ember|wind) ]] || return
	echo "[removing temporary VLAN]"
	sudo ip link del vlan2
}

if [[ $HOSTNAME == @(ember|wind) ]]; then
	if [[ ${SSH_CONNECTION%% *} == @(193.219.181.195|2001:778:e27f::56) ]]; then
		echo "[40;92mDirect IPMI access.[m"
	else
		echo "[40;93mWarning: Dependent connection.[m Connect via gw-b56-bypass instead."
	fi
elif [[ $HOSTNAME == @(star|land) ]]; then
	echo "[40;93mNo direct access.[m Connect to ember/wind via gw-b56."
	exit 3
else
	echo "[40;91mNo access from this system.[m Connect to star/land first."
	exit 3
fi

trap teardown_vlan SIGINT
setup_vlan
attach_console
teardown_vlan
