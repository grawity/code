#!/usr/bin/env python3
# systemd-lock-handler -- proxy between systemd-logind's "Lock" signal and your
# favourite screen lock command

import dbus
import dbus.mainloop.glib
from gi.repository import GLib
import os
import sys

def setup_signal(signal_handler):
    global session_id
    bus = dbus.SystemBus()
    manager = bus.get_object("org.freedesktop.login1", "/org/freedesktop/login1")
    # yecch
    manager = dbus.Interface(manager, "org.freedesktop.login1.Manager")
    session_path = manager.GetSession(session_id)
    session = bus.get_object("org.freedesktop.login1", session_path)
    session.connect_to_signal("Lock", signal_handler)

def handler_dbus_fdo():
    print("locking session using DBus")
    bus = dbus.SessionBus()
    screensaver = bus.get_object("org.freedesktop.ScreenSaver", "/ScreenSaver")
    screensaver.Lock()

def handler_external():
    global lock_command
    print("locking session using %r" % lock_command[0])
    os.spawnvp(os.P_NOWAIT, lock_command[0], lock_command)

lock_command = sys.argv[1:] or ["--dbus"]

try:
    session_id = os.environ["XDG_SESSION_ID"]
except KeyError:
    # TODO: Figure out what to do when we're running out of systemd --user.
    # How does xss-lock handle that?
    exit("error: $XDG_SESSION_ID not set; are you using pam_systemd?")

dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)

if lock_command == ["--dbus"]:
    print("using freedesktop.org DBus API")
    setup_signal(handler_dbus_fdo)
else:
    print("using external command %r" % lock_command[0])
    setup_signal(handler_external)

print("waiting for lock signals on session %s" % session_id)

try:
    loop = GLib.MainLoop()
    loop.run()
except KeyboardInterrupt:
    exit()
