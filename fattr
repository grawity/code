#!/usr/bin/env python3
import argparse
import os
import re
import sys

attr_aliases = {
    "author":       "user.dublincore.creator",
    "comment":      "user.xdg.comment",
    "date":         "user.dublincore.date",
    "desc":         "user.dublincore.description",
    "description":  "user.dublincore.description",
    "lang":         "user.xdg.language",
    "origin":       "user.xdg.origin.url",
    "mime":         "user.mime_type",
    "mimetype":     "user.mime_type",
    "publisher":    "user.dublincore.publisher",
    "referer":      "user.xdg.referrer.url",
    "relation":     "user.dublincore.relation",
    "subject":      "user.dublincore.subject",
    "title":        "user.dublincore.title",
}

hidden_attrs = {
    "user.com.dropbox.attributes",
    "user.com.dropbox.attrs",
    "user.wine.sd",
}

def show_attrs(file, *,
               follow=False,
               all_ns=False):
    print(f"\033[1m{file}\033[m")
    keys = os.listxattr(file, follow_symlinks=follow)
    if not args.all:
        keys = {k for k in keys if k.startswith("user.")}
        keys -= hidden_attrs
    #if not keys and not (args.all or args.empty):
    #    continue
    attrs = {key: os.getxattr(file, key, follow_symlinks=follow)
             for key in keys}
    if not attrs:
        print(f"  (No attributes.)")
    for key, value in sorted(attrs.items()):
        if not args.all:
            key = key.removeprefix("user.")
        print(f"  {key} = {value}")

parser = argparse.ArgumentParser(add_help=False)
parser.add_argument("--help", action="help",
                    help="show this help message and exit")
parser.add_argument("-a", "--all", action="store_true",
                    help="do not hide any attributes")
parser.add_argument("-h", "--no-dereference", action="store_true",
                    help="do not dereference symbolic links")
parser.add_argument("-s", "--set", metavar="KEY=VALUE",
                    default=[], action="append",
                    help="set an attribute")
parser.add_argument("path", nargs="+")
args = parser.parse_args()

for path in args.path:
    show_attrs(path,
               follow=not args.no_dereference,
               all_ns=args.all)

'''
files = []
attrs = {}

for arg in sys.argv[1:]:
    if m := re.match(r"^([^/?=]+)=(.*)$", arg):
        key = m.group(1)
        val = m.group(2)
        if key in attr_aliases:
            key = attr_aliases[key]
        elif key[0] == ".":
            key = key[1:]
        elif not re.match(r"^(user|system|security|trusted)\.", key):
            key = "user." + key
        if key in attrs:
            Core.warn("attribute %r seen multiple times", key)
        attrs[key] = val
    else:
        files.append(arg)

print(files)
print(attrs)

if attrs:
    ...
else:
    ret = dump_attrs(files, args)
'''
