#!/usr/bin/env python3
# arpawalk -- nibble crawler for {e164,ip6,in-addr}.arpa
import argparse
import dns.name
import dns.resolver
import dns.reversename
import ipaddress
from nullroute.core import Core
import sys

stat = {
    "requests": 0,
    "answers": 0,
    "nonterminals": 0,
    "nxdomains": 0,
    "baddelegations": 0,
}

def get_rdns_domains(addr):
    net = ipaddress.ip_network(addr)
    rev = net.reverse_pointer.split(".")
    if net.version == 6:
        full, bits = divmod(net.prefixlen, 4)
        full += 2
        if bits:
            full += 1
            start = int(rev[-full], 16)
            count = 2 ** (4 - bits)
            for i in range(count):
                rev[-full] = "%x" % (start + i)
                yield ".".join(rev[-full:])
        else:
            yield ".".join(rev[-full:])
    else:
        full, bits = divmod(net.prefixlen, 8)
        full += 2
        if bits:
            full += 1
            start = int(rev[-full], 10)
            count = 2 ** (8 - bits)
            for i in range(count):
                rev[-full] = "%d" % (start + i)
                yield ".".join(rev[-full:])
        else:
            if net.prefixlen == 32:
                rev[0] = "0"
            yield ".".join(rev[-full:])

def fmt_domain(dom):
    dom = dom.lower()
    if len(dom) == 73 and dom.endswith(".ip6.arpa."):
        dom = dns.name.from_text(dom)
        dom = dns.reversename.to_address(dom)
    return dom

def crawl_zone_recursively(zone, card=16, fmt="%x", rtype="PTR",
                                 maxdepth=-1, depth=0):
    if not depth:
        depth = len(zone.strip(".").split("."))

    Core.debug("(%d) >> crawling %r", depth, zone)
    for i in range(card):
        domain = "%s.%s" % (fmt % i, zone)
        stat["requests"] += 1
        try:
            answers = dns.resolver.query(domain, rtype)
        except dns.resolver.NoAnswer:
            Core.trace("got NoAnswer for %r; descending", domain)
            stat["nonterminals"] += 1
            yield from crawl_zone_recursively(domain, card, fmt, rtype,
                                                      maxdepth, depth+1)
        except dns.resolver.NXDOMAIN:
            Core.trace("got NXDOMAIN for %r; continuing", domain)
            stat["nxdomains"] += 1
            continue
        except dns.resolver.NoNameservers:
            Core.warn("got SERVFAIL for %r; returning and continuing", domain)
            stat["baddelegations"] += 1
            yield (domain, None)
            continue
        else:
            if depth < maxdepth:
                Core.trace("got answer for %r; returning and descending", domain)
            else:
                Core.trace("got answer for %r; assuming terminal and returning", domain)
            stat["answers"] += 1
            yield from [(domain, j) for j in answers]
            if depth < maxdepth:
                yield from crawl_zone_recursively(domain, card, fmt, rtype,
                                                          maxdepth, depth+1)
    Core.debug("(%d) << leaving %r", depth, zone)

def crawl_zone_iteratively(zone, card=16, fmt="%x", rtype="PTR",
                                 maxdepth=-1, depth=0):
    if not depth:
        depth = len(zone.strip(".").split("."))

    queue = [zone]
    while queue:
        Core.debug("(%d) processing queue[%d]", depth, len(queue))
        next = []
        for suffix in queue:
            Core.debug("processing suffix %r", suffix)
            for i in range(card):
                domain = "%s.%s" % (fmt % i, suffix)
                stat["requests"] += 1
                try:
                    answers = dns.resolver.query(domain, rtype)
                except dns.resolver.NoAnswer:
                    Core.trace("got NoAnswer for %r; descending", domain)
                    stat["nonterminals"] += 1
                    next.append(domain)
                except dns.resolver.NXDOMAIN:
                    Core.trace("got NXDOMAIN for %r; continuing", domain)
                    stat["nxdomains"] += 1
                    continue
                except dns.resolver.NoNameservers:
                    Core.warn("got SERVFAIL for %r; returning and continuing", domain)
                    stat["baddelegations"] += 1
                    yield (domain, None)
                    continue
                else:
                    if depth < maxdepth:
                        next.append(domain)
                        Core.trace("got answer for %r; returning and descending", domain)
                    else:
                        Core.trace("got answer for %r; assuming terminal and returning", domain)
                    stat["answers"] += 1
                    yield from [(domain, j) for j in answers]
        queue = next
        depth += 1

ap = argparse.ArgumentParser()
ap.add_argument("-r", dest="recursive", action="store_true")
ap.add_argument("zone", nargs="+")
args = ap.parse_args()

if args.recursive:
    crawl_zone = crawl_zone_recursively
else:
    crawl_zone = crawl_zone_iteratively

for arg in args.zone:
    if "/" in arg:
        tmp = [*get_rdns_domains(arg)]
    else:
        tmp = [arg]
    Core.trace("initial zones: %r", tmp)
    for zone in tmp:
        zone = zone.lower()
        if not zone.endswith("."):
            zone = "%s." % zone

        if zone.endswith(".e164.arpa."):
            params = dict(card=10, fmt="%d", rtype="NAPTR", maxdepth=13)
        elif zone.endswith(".ip6.arpa."):
            params = dict(card=16, fmt="%x", rtype="PTR", maxdepth=33)
        elif zone.endswith(".in-addr.arpa."):
            params = dict(card=256, fmt="%d", rtype="PTR", maxdepth=5)
        else:
            Core.err("unrecognized zone %r", zone)
            continue

        for node in crawl_zone(zone, **params):
            name, rdata = node
            name = fmt_domain(name)
            print(name, "=>", rdata)

        Core.info("crawled %r in %d requests (%d pos, %d mid, %d neg)",
                  zone, stat["requests"], stat["answers"],
                  stat["nonterminals"], stat["nxdomains"])

Core.fini()
