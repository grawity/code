#!/usr/bin/env python3
from nullroute.io import SshBinaryReader
from pprint import pprint
import io
import socket
import sys

SSH_MSG_KEXINIT = 20

def dump_one(buf, name):
    print("\033[1m%s:\033[m" % name)
    words = buf.decode().split(",")
    pprint(words)

def dump_hdr(buf):
    packet = buf
    while packet:
        banner, packet = packet.split(b"\r\n", 1)
        if banner.startswith(b"SSH-"):
            break

    print("SSH version banner: %r" % banner)

    # Binary packet protocol

    br = SshBinaryReader(io.BytesIO(packet))
    packet_len = br.read_uint32()
    padding_len = br.read_byte()
    payload = br.read(packet_len - padding_len - 1)
    padding = br.read(padding_len)
    # no MAC for initial handshake packets

    # Key exchange packet

    br = SshBinaryReader(io.BytesIO(payload))
    packet_type = br.read_byte()
    if packet_type != SSH_MSG_KEXINIT:
        raise IOError("received message was not SSH_MSG_KEXINIT (got %d)" % packet_type)
    cookie = br.read(16)
    header = {
        "kexes": br.read_array(),
        "hostkeys": br.read_array(),
        "ciphers c2s": br.read_array(),
        "ciphers s2c": br.read_array(),
        "macs c2s": br.read_array(),
        "macs s2c": br.read_array(),
        "compression c2s": br.read_array(),
        "compression s2c": br.read_array(),
        "languages c2s": br.read_array(),
        "languages s2c": br.read_array(),
    }
    for x in ["ciphers", "macs", "compression", "languages"]:
        a = f"{x} s2c"
        b = f"{x} c2s"
        if header[a] == header[b]:
            header[x] = header[a]
            del header[a]
            del header[b]
    del header[None]
    for x in header:
        header[x] = [y.decode() for y in header[x]]
    pprint(header)

host = sys.argv[1]
port = 22

gais = socket.getaddrinfo(host, port, type=socket.SOCK_STREAM)

for (g_family, g_type, g_proto, g_cname, g_addr) in gais:
    sock = socket.socket(g_family, g_type, g_proto)
    sock.connect(g_addr)
    buf = sock.recv(1024)
    sock.send(b"SSH-2.0-Cipherscan\r\n")
    buf += sock.recv(16*1024)
    sock.close()
    dump_hdr(buf)
    break
