#!/usr/bin/env python3
# whatmac -- Look up a MAC address in the "IP addresses.txt" database
import argparse
import os
import re
import subprocess

def mactobytes(buf):
    # Handle potential NIS-style "no leading zeros" addresses
    tmp = buf.split(":")
    if len(tmp) >= 6:
        return bytes([int(i, 16) for i in tmp])

    # Otherwise assume fixed-length
    buf = re.sub(r"[.:-]", "", buf)
    assert len(buf) % 2 == 0
    return bytes.fromhex(buf)

class EtherAddress:
    def __init__(self, value):
        self.buf = mactobytes(value)

    def __str__(self):
        return ":".join("%02X" % x for x in self.buf)

    def __repr__(self):
        return "%s(%r)" % (self.__class__.__name__, str(self))

parser = argparse.ArgumentParser()
parser.add_argument("-e", "--edit", action="store_true",
                    help="open in text editor")
parser.add_argument("address", nargs="*", type=EtherAddress)
args = parser.parse_args()

if not (args.edit or args.address):
    exit("whatmac: no address specified")

path = os.path.expanduser("~/Dropbox/Notes/Nullroute/MAC addresses.txt")
if not os.path.exists(path):
    path = "/net/ember/" + path

lineno = 0
found = False

with open(path, "r") as fh:
    for i, line in enumerate(fh, start=1):
        mac = line.split()[0]
        desc = line.rstrip()
        if EtherAddress(mac) in args.address:
            print(desc)
            lineno = i
            found = True

if args.edit:
    cmd = ["nvim", path, "+:setl cursorline", f"+{lineno}"]
    subprocess.run(cmd)
else:
    if not found:
        addrs = ", ".join(map(str, args.address))
        exit(f"whatmac: no results for {addrs}")
