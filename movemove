#!/usr/bin/env perl
use warnings;
use strict;
use File::Basename qw(dirname);
use File::Path qw(make_path);
use Nullroute::Lib;

my %oldnames;
my %newnames;
my %changes;
my @queue;
my %queue;

sub load_old_names {
	my $fn = "inodes.old";
	open(my $fh, "<", $fn)
	or _die("could not open \"$fn\": $!");
	while (<$fh>) {
		chomp;
		my ($inode, $name) = split(/ /, $_, 2);
		$oldnames{$inode} = $name;
	}
	close($fh);
}

sub load_new_names {
	my $fn = "inodes.new";
	open(my $fh, "<", $fn)
	or _die("could not open \"$fn\": $!");
	while (<$fh>) {
		chomp;
		my ($inode, $name) = split(/ /, $_, 2);
		$newnames{$inode} = $name;
		if ($oldnames{$inode} && $name ne $oldnames{$inode}) {
			$changes{$oldnames{$inode}} = [$inode, $name];
		}
	}
	close($fh);
}

sub mkdir_parents {
	my ($path) = @_;
	my $parent = dirname($path);
	return 1 if -d $parent;
	_debug("creating parent \"$parent\"");
	make_path($parent);
}

sub add_queue {
	my ($oldname) = @_;
	my ($inode, $newname) = @{$changes{$oldname}};
	if ($queue{$inode}) {
		_debug("file [$inode] is already in queue, ignored");
		return;
	}
	if ($changes{$newname}) {
		_debug("nameswap, recursing for \"$newname\"");
		add_queue($newname);
	}
	_debug("adding [$inode] \"$oldname\" -> \"$newname\"");
	push @queue, $queue{$inode} = [$inode, $oldname, $newname];
}

sub fill_queue {
	for my $oldname (sort keys %changes) {
		add_queue($oldname);
	}
}

sub drain_queue {
	for (@queue) {
		my ($inode, $oldname, $newname) = @$_;
		_debug("processing [$inode] \"$oldname\" -> \"$newname\"");
		if (!-e $oldname) {
			_err("old name \"$oldname\" does not exist");
			next;
		}
		_log("renaming \"$oldname\" to \"$newname\"");
		mkdir_parents($newname) or do {
			_err("could not create parents for \"$newname\"");
			next;
		};
		link($oldname, $newname) or do {
			_err("could not hardlink \"$oldname\" to \"$newname\"");
			next;
		};
		unlink($oldname) or do {
			_err("could not unlink old file \"$oldname\"");
			next;
		}
	}
}

load_old_names();
load_new_names();
fill_queue();
drain_queue();

_exit();
