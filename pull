#!/usr/bin/env bash
# pull - update version control repositories to latest upstream versions

# fetch.output compact
# merge.stat off

. lib.bash || exit

set -u

_skip_glob=""
skip_glob=""
errors=0

log:() {
	"$@" || err "command '$1' failed (status $?)"
}

svnsync() {
	local lib=$(which libfunsync.so 2>/dev/null)

	if [[ -f $lib ]]; then
		env LD_PRELOAD="$lib" svnsync "$@"
	else
		env svnsync "$@"
	fi
}

do_git() {
	if [[ -d .git/svn ]]; then
		if remote=$(git config --get svn-remote.svn.url); then
			rroot=$(log: svn info "$remote" | sed -n 's/^Repository Root: //p')
			if [[ $rroot == file://* ]]; then
				log: svnsync sync "$rroot"
			fi
		fi
		ref=$(git config --get svn-remote.svn.fetch)
		ref=${ref#*:}
		ref=${ref:-refs/remotes/git-svn}
		old=$(git rev-parse --verify HEAD)
		log: git svn fetch &&
		log: git merge --ff-only "$ref" || return
		new=$(git rev-parse --verify HEAD)
	elif [[ -e .git ]]; then
		sparse=$(git config --type bool core.sparseCheckout || echo false)
		case $sparse in
			true) recurseopt='--recurse-submodules=no';;
			*) recurseopt='';
		esac
		old=$(git rev-parse --verify HEAD)
		log: git pull --ff-only --no-stat $recurseopt || return
		new=$(git rev-parse --verify HEAD)
		if [[ -e .gitmodules ]] && [[ $sparse != true ]]; then
			log: git submodule update
		fi
	elif [[ "$(git config core.bare)" == "true" ]]; then
		old=$(git rev-parse --verify HEAD)
		git fetch || return
		new=$(git rev-parse --verify HEAD)
	fi

	if [[ "$old" != "$new" ]]; then
		local diff_paths=(
			":(exclude)fuzz/*"
			":(exclude)testing/*"
			":(exclude)tests/*"
			":(exclude)vendor/*"
		)
		while IFS="" read -r line; do
			if [[ $line == @(":(exclude)"*|":!"*) ]]; then
				diff_paths+=("$line")
			fi
		done < <(git config --get-all nullroute.git-new.paths)
		local diff_args=("$old..$new" -- "${diff_paths[@]}")

		git --no-pager diff --stat "${diff_args[@]}"

		if (( opt_tig && $(git rev-list --count "${diff_args[@]}") > 0 )); then
			# Only run tig if there are commits to show, as
			# otherwise it still triggers the 'focus' \e[I and
			# there's no Bash prompt to consume that.
			local tig_opts=()
			while IFS="" read -r line; do
				tig_opts+=("$line")
			done < <(git config --get-all nullroute.git-new.options)
			tig "${tig_opts[@]}" "${diff_args[@]}" || true
		else
			echo "${0##*/}: No interesting commits to show."
		fi
	fi
}

do_pull() {
	local source=$1 arg=$2

	# This function is always called with the repo as current directory.
	local rdir=$(realpath --relative-to="$_PULL_STARTDIR" "$PWD")
	if [[ $rdir == . ]]; then
		rdir=$PWD
	fi

	# Check cwd for supported repositories
	if [[ -f Pullfile ]]; then
		# Collection containing more repos
		if [[ $source == file && $arg == . ]]; then
			err "Avoiding recursive descent into '$rdir' at '$PWD'"
			return 1
		elif [[ $source == file ]] && (( opt_dryrun > 1 )); then
			vmsg "Would descend into '$rdir'"
			return 0
		else
			do_main
		fi
	elif [[ -d .git ]]; then
		if (( opt_list )); then
			echo "$rdir"
			return
		elif (( opt_dryrun )); then
			vmsg "Would update '$rdir'"
			return
		else
			log2 "Updating '$rdir'"
			do_git
		fi
	else
		err "No repository at '$rdir'"
	fi
}

do_main() {
	local src=none
	local errors=0
	local -A did=()

	if (( ! $# )) && [[ -s Pullfile ]]; then
		debug "reading args from Pullfile"
		src=file
		set -- $(grep '^[^#]' Pullfile)
	fi

	if (( ! $# )) && [[ -f Pullfile ]] && [[ ! -s Pullfile ]]; then
		debug "empty Pullfile, assuming '*/'"
		src=empty
		set -- */
	fi

	if (( ! $# )); then
		debug "no args, assuming '.'"
		src=auto
		set -- .
	fi

	for arg; do
		debug "processing arg '$arg'"

		if [[ $arg == -* ]]; then
			arg=${arg#-}
			if [[ ! -d $arg ]]; then
				debug "- exclusion is not a directory, ignoring"
				if [[ $arg == *[*?]* ]]; then
					warn "use '!$arg', not '-$arg', to exclude globs"
				fi
				continue
			fi
			dir=$(readlink -f "$arg")
			debug "- excluding dir '$dir'"
			did[$dir]=y
			continue
		fi

		if [[ $arg == !* ]]; then
			arg=${arg#!}
			debug "- excluding glob '$arg'"
			_skip_glob+="|$arg"
			skip_glob="@(${_skip_glob#|})"
			debug "- skip_glob is now '$skip_glob'"
			continue
		fi

		lib:trace "matching ${arg@Q} against ${skip_glob}"
		if [[ $skip_glob && $arg == $skip_glob ]]; then
			debug "- arg '$arg' is excluded, skipping"
			continue
		fi

		if [[ ! -d $arg && -d $arg.git && ! ${did["$arg"]} ]]; then
			arg+=.git
		fi

		if [[ ! -d $arg ]]; then
			err "not a directory: '$arg'"
			continue
		fi

		dir=$(readlink -f "$arg")

		if [[ ${did[$dir]-} ]]; then
			debug "- dir '$dir' already seen, skipping"
			continue
		fi
		did[$dir]=y

		if [[ -u $dir ]]; then
			debug "- dir '$dir' is ignored (+u), skipping"
			continue
		fi

		debug "- updating '$dir'"
		(cd "$dir" && do_pull "$src" "$arg") || err "update of '$dir' failed"
	done

	(( !errors ))
}

usage() {
	echo "Usage: $progname [-lnt] [DIR...]"
	echo
	echo_opt "-l" "only list paths to be updated (implies '-n')"
	echo_opt "-n" "dry run (parse Pullfile but don't update anything)"
	echo_opt "-t" "immediately run 'tig' to browse commits"
}

# Remember original starting directory for displaying subdirs
# when doing a recursive pull
if [[ ! ${_PULL_STARTDIR-} ]]; then
	export _PULL_STARTDIR=$PWD
fi

opt_dryrun=0
opt_list=0
opt_tig=0

while getopts ":lnt" OPT; do
	case $OPT in
	l) let ++opt_list;;
	n) let ++opt_dryrun;;
	t) let ++opt_tig;;
	*) lib:die_getopts;;
	esac
done; shift $((OPTIND-1))

do_main "$@" && (( !errors ))
