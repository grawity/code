#!/usr/bin/env perl
# cap - screenshot a window or entire screen to a PNG file, output filename.
#
# Uses GNOME Shell's screenshot functionality, which means decorations
# and window shadows get captured correctly (as transparent PNG).

use feature qw(state);
use File::Basename qw(dirname);
use File::Path qw(make_path);
use File::Spec::Functions qw(rel2abs);
use Getopt::Long qw(:config bundling no_ignore_case);
use Net::DBus qw(:typing);
use Nullroute::Lib qw(_debug);
use Nullroute::Dir qw(xdg_userdir);
use POSIX qw(strftime :sys_wait_h);
use Sys::Hostname;
use Time::HiRes qw(usleep);

$::arg0 = (split m!/!, $0)[-1];

sub warnx {
	my ($msg) = @_;
	warn "$::arg0: $msg\n";
}

sub errx {
	my ($exit, $msg) = @_;
	warnx($msg);
	exit $exit;
}

sub has_Shell {
	Net::DBus->session
	->get_service_owner("org.gnome.Shell")
}

sub Notifications {
	Net::DBus->session
	->get_service("org.freedesktop.Notifications")
	->get_object("/org/freedesktop/Notifications")
}

sub notify {
	state $id = 0;
	my ($summary, %opts) = @_;
	$id = Notifications->Notify($opts{app} // "Screenshot",
	                            $id,
	                            $opts{icon} // "document-send",
	                            $summary,
	                            $opts{body},
	                            $opts{actions} // [],
	                            $opts{hints} // {},
	                            $opts{timeout} // 1*1000);
}

sub trash {
	my ($path) = @_;
	system ("trash", $path);
}

my ($hostname) = split(/\./, hostname());
my $suffix = ".$hostname";

my $opt_area = 0;
my $opt_window = 0;

my $sleep = 0;
my $sleep_area = 0;
my $frame = 1;
my $flash = 1;
my $cursor = 0;
my $template = "Screenshots/%Y-%m-%d.%H%M%S$suffix.png";
my $file_rel = undef;
my $file = undef;
my $upload = 0;
my $temporary = 0;
my $qrcode = 0;
my $use_shell = 1;
my $do_notify = 1;

GetOptions(
	'a|area'	=> \$opt_area,
	'w|window'	=> \$opt_window,
	'frame!'	=> \$frame,
	'cursor!'	=> \$cursor,
	'flash!'	=> \$flash,
	's|sleep=f'	=> \$sleep,
	'S|sleeparea=f'	=> \$sleep_area,
	'u|upload'	=> \$upload,
	't|temporary!'	=> \$temporary,
	'Q|qr-decode!'	=> \$qrcode,
	'shell!'	=> \$use_shell,
	'notify!'	=> \$do_notify,
) or exit 2;

if ($opt_area && $opt_window) {
	errx(2, "cap: -a and -w cannot be used together");
}

if ($qrcode) {
	$upload = 0;
	$temporary = 1;
}

if ($sleep) {
	warnx("waiting $sleep seconds...");
	usleep($sleep * 1_000_000);
}

if ($temporary) {
	$template =~ s/[^.]+?$/temp.$&/;
}

$file_rel = strftime($template, localtime);
$file = rel2abs($file_rel, xdg_userdir("Pictures"));

_debug("rel path: $file_rel");
_debug("abs path: $file");

for (dirname $file) {
	make_path($_) unless -d $_;
}

if ($use_shell && has_Shell) {
	_debug("using gnome-screenshot");
	my @args = ("gnome-screenshot", "--file=$file");
	if ($opt_area) {
		push @args, ("--area");
		push @args, ("--delay=$sleep_area") if $sleep_area;
	} elsif ($opt_window) {
		push @args, ("--window");
	}
	system(@args);
}
elsif (-x "/usr/bin/maim" && -x "/usr/bin/slop") {
	_debug("using main/slop");
	my @args = ("maim");
	if ($opt_area) {
		if ($sleep_area) {
			chomp(my $geom = `slop -f %g`);
			usleep($sleep_area * 1_000_000);
			push @args, ("-g", $geom);
		} else {
			push @args, ("-s");
		}
	} elsif ($opt_window) {
		if (-x "/usr/bin/xdotool") {
			my $xid = int(`xdotool getactivewindow`);
			push @args, ("-i", $xid);
		} else {
			push @args, ("-s");
		}
	}
	system(@args, $file);
}
else {
	_debug("using scrot");
	my @args = ("scrot");
	if ($opt_area || $opt_window) {
		push @args, ("-s");
	}
	system(@args, $file);
}

if (!-f $file) {
	notify("Screenshot failed",
		icon => "error",
		hints => { category => "transfer" });
	errx(1, "screenshot failed ('$file' is missing)");
}

if ($qrcode) {
	my $zbarimg_proc;
	my $zbarimg_pid;
	my $zbarimg_output;

	if (open(my $zbarimg_proc, "-|", "zbarimg", "--raw", "--quiet", $file)) {
		chomp($zbarimg_output = <$zbarimg_proc>);
		close($zbarimg_proc);
	} else {
		errx(1, "could not run zbarimg: $!");
	}

	if ($? == 0) {
		if (-t 1) {
			print "$zbarimg_output\n";
		} else {
			notify("Qr code found",
				body => $zbarimg_output);
		}
		unlink($file);
		exit 0;
	} else {
		notify("Decode failed", icon => "error");
		unlink($file);
		exit 1;
	}
}

print "$file\n";

my $uri = "file://$file";

if ($upload) {
	my $upload_pid;
	my $upload_output;
	my $upload_start = time;

	local $SIG{CHLD} = sub {
		my $pid = waitpid(-1, WNOHANG);
		if ($pid == $upload_pid) {
			$upload_pid = 0;
		}
	};

	$upload_pid = open(my $upload_proc, "-|") || do {
		open(STDERR, ">&", \*STDOUT);
		exec("cap-upload.sh", $file) || die "$!\n";
	};

	while ($upload_pid) {
		my $t = int(time - $upload_start);
		notify("Screenshot captured",
			body => "Uploadingâ€¦ (".$t."s)",
			hints => { category => "transfer",
			           transient => dbus_boolean(1) });
		sleep 1;
	}

	$upload_output = do { local $/; <$upload_proc> };

	print $upload_output;
	chomp $upload_output;

	if ($? == 0) {
		notify("Screenshot uploaded",
			body => $upload_output,
			icon => $uri,
			hints => { category => "transfer.complete",
			           transient => dbus_boolean(1) });
		if ($temporary) {
			_debug("screenshot is temporary, deleting");
			trash($file);
		}
	} else {
		notify("Screenshot upload failed",
			body => $upload_output,
			icon => $uri,
			hints => { category => "transfer.error",
			           transient => dbus_boolean(1) });
	}
} else {
	if ($do_notify) {
		notify("Screenshot captured", icon => $uri);
	}
}
