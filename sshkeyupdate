#!/usr/bin/env bash
# sshkeyupdate -- download ~/.ssh/authorized_keys from central URL

readonly unix_user="grawity"
readonly src_url="http://nullroute.lt/~grawity/files/authorized_keys.txt"
readonly signer_fpr="2357E10CEF4F7ED27E233AD5D24F6CB2C1B52632"
readonly signer_key="
-----BEGIN PGP PUBLIC KEY BLOCK-----

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
=xXwG
-----END PGP PUBLIC KEY BLOCK-----
"

PATH="$HOME/bin:$PATH"

# for libff/libhf
PATH="$HOME/bin/bin:$PATH"

. lib.bash || exit
. ~/bin/lib/libfilterfile.bash || exit
. ~/bin/lib/libhttpfetch.bash || exit

usage() {
	echo "Usage: $progname [-f] [-q] [-i]"
	echo ""
	echo_opt "-f"		"proceed on username mismatch"
	echo_opt "-q"		"quietly exit if update is not to be done"
	echo_opt "-i"		"import embedded signing key"
}

filter_keys() {
	filter_file 'match_hostname'
}

fetch() {
	local url=$1 out=$2
	local maxtries=3 delay=3 attempt=1
	while true; do
		debug "fetching $url (try #$attempt)"
		if http_fetch "$url" "$out"; then
			return 0
		elif (( $? == 99 )); then
			break
		fi
		rm -f "$out"
		if (( attempt++ >= maxtries )); then
			break
		fi
		sleep $delay
		(( delay *= 2 ))
	done
	return 1
}

verify() {
	local input=$1 output=$2 status= errors=0
	if ! status=$(gpg --batch --yes --status-fd 1 --output "$output" \
	                 --trust-model pgp --decrypt "$input" 2> /dev/null); then
		vmsg "unknown gpg error" >&2
		echo "$status" >&2
		return 1
	fi
	if ! grep -Eqs "^\\[GNUPG:\\] VALIDSIG $signer_fpr " <<< "$status"; then
		vmsg "file has invalid signature" >&2
		echo "$status" >&2
		return 1
	fi
	if ! grep -Eqs "^\\[GNUPG:\\] TRUST_ULTIMATE( 0 .+)?\$" <<< "$status"; then
		vmsg "signer key is not ultimately trusted" >&2
		echo "$status" >&2
		return 1
	fi
	return 0
}

umask 077

opt_testfilter=0
opt_force=0
opt_importkey=0
opt_quiet=0
dst_file=~/.ssh/authorized_keys

while getopts :Ffiq OPT; do
	case $OPT in
	F) opt_testfilter=1;;
	f) opt_force=1;;
	i) opt_importkey=1;;
	q) opt_quiet=1;;
	*) lib:die_getopts;;
	esac
done; shift $[OPTIND-1]

if (( $# )); then
	vdie "excess arguments"
fi

if (( opt_testfilter )); then
	if [[ -t 0 ]]; then
		vdie "filter test mode requires file input"
	fi
	if [[ -t 1 ]]; then
		export FILTERDEBUG=1
		exec >/dev/null
	fi
	filter_keys
	exit
fi

if [[ -e "$dst_file.noupdate" ]] || grep -qs "^# *NOUPDATE" "$dst_file"; then
	if (( opt_force )); then
		true
	elif (( !opt_quiet )); then
		vdie "\"no update\" marker found, exiting"
	else
		exit 0
	fi
fi

if [[ "$LOGNAME" != "$unix_user" ]]; then
	if [[ -e "$dst_file.optin" ]]; then
		true
	elif (( opt_force )); then
		vmsg "username mismatch, creating opt-in marker"
		echo "$LOGNAME on $(date)" > "$dst_file.optin"
	elif (( !opt_quiet )); then
		vdie "username mismatch, this program isn't for you"
	else
		exit 0
	fi
fi

if ! have gpg; then
	vdie "gpg is not installed"
fi

# ensure key exists in keyring

if (( opt_importkey )); then
	vmsg "importing embedded owner key into GnuPG keyring"
	echo "$signer_key" | gpg --import
	echo "$signer_fpr:6:" | gpg --import-ownertrust
elif ! [[ -d ~/.gnupg ]]; then
	if (( !opt_quiet )); then
		vdie "~/.gnupg is not initialized"
	else
		exit 0
	fi
elif ! gpg -k "$signer_fpr" > /dev/null; then
	if (( !opt_quiet )); then
		vdie "signer key $signer_fpr not found in keyring"
	else
		exit 0
	fi
fi

# download new pubkeys

mkdir -p "${dst_file%/*}"

tmp_signed=$(mktemp "$dst_file.XXXXXXXX")

if ! fetch "$src_url" "$tmp_signed"; then
	rm -f "$tmp_signed"
	vdie "fetch of $src_url failed"
elif ! test -s "$tmp_signed"; then
	rm -f "$tmp_signed"
	vdie "empty file fetched from $src_url"
fi

tmp_plain=$(mktemp "$dst_file.XXXXXXXX")

if ! verify "$tmp_signed" "$tmp_plain"; then
	rm -f "$tmp_plain"
	vdie "verification of $tmp_signed failed"
fi

local_file="$dst_file.local"

{
	echo "# updated: at $(date +"%Y-%m-%d %H:%M:%S %z")"
	echo "# updated: from $src_url"
	cat "$tmp_plain"
	if [[ -s $local_file ]]; then
		echo "# updated: from $local_file"
		cat "$local_file"
	fi
	echo "# updated: end"
} | filter_keys > "$dst_file"

rm -f "$tmp_plain" "$tmp_signed"

if [[ -t 1 ]]; then
	num=$(grep -c '^[^#]' "$dst_file")
	vmsg "imported $num keys"
fi
