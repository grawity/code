#!/usr/bin/env perl
use warnings;
use strict;
use Data::Dumper;
use File::Basename;

my %dir_locs;
my %file_locs;
my %remote_pos;
my @remote_name;
my %remote_use;

sub remote2color {
	my ($remote) = @_;
	for ($remote) {
		return -3 if /^here$/;
		return 82 if /^rain$/;
		return 109 if /^frost$/;
		return -13 if /^vol4$/;
		return 13 if /^vol\d+/;
		return 12 if /^fs\d+/;
		return 4 if /^ukvirt\d+/;
		return 15;
	}
}

sub fmt {
	my ($str, $fmt) = @_;
	return (length($str) && length($fmt))
		? "\e[".$fmt."m".$str."\e[m"
		: $str;
}

sub fg {
	my ($str, $color) = @_;
	if ($color < 0) {
		$str = "\e[1m".$str;
		$color *= -1;
	}
	return fmt($str, "38;5;".$color);
}

sub present {
	my ($loc, $idx) = @_;
	# can be 'X' for semitrusted or 'x' for untrusted
	return (substr($loc, $idx, 1) ne "_");
}

sub locdiff {
	my ($a, $b) = @_;
	my @a_only = grep {
		present($a, $_) && !present($b, $_)
	} 0..length($a);
	my @b_only = grep {
		present($b, $_) && !present($a, $_)
	} 0..length($b);
	return ((map {$_ => "-"} @a_only),
		(map {$_ => "+"} @b_only));
}

#sub loc2remotestr {
#	my ($loc) = @_;
#	my @remotes = map {
#		fg($_, remote2color($_))
#	} loc2remotes($loc);
#	return fg("{", 8).join(" ", @remotes).fg("}", 8);
#}

sub loc2remotestr {
	my ($loc) = @_;
	my @remotes = map {
		my $used = present($loc, $remote_pos{$_});
		fg($_, $used ? remote2color($_) : 8)
	} grep {
		$remote_use{$_}
	} sort @remote_name;
	return fg("{", 8).join(" ", @remotes).fg("}", 8);
}

sub loc2diffstr {
	my ($loc1, $loc2) = @_;
	my %diff = locdiff($loc1, $loc2);
	#print Dumper([$loc1, $loc2, \%diff]);
	my @remotes = map {
		my $used = $diff{$remote_pos{$_}};
		#fg($_, $used eq "+" ? 10 : 9);
		$used . fg($_, $used eq "+" ? remote2color($_) : 8)
	} grep {
		$diff{$remote_pos{$_}}
	} sort @remote_name;
	return fg("{", 8).join(" ", @remotes).fg("}", 8);
}

while (<STDIN>) {
	if (/^([_Xx]+) (.+)$/) {
		my $loc = $1;
		my $dir = dirname($2);
		my $base = basename($2);
		$dir_locs{$dir}{$loc} += 1;
		$file_locs{$dir}{$base} = $loc;
		for (my $i = 0; $i < length($loc); $i++) {
			if (present($loc, $i)) {
				$remote_use{$remote_name[$i]}++;
			}
		}
	}
	elsif (/^(\|*)([^|_Xx].*?)$/) {
		my $pos = length($1);
		my $name = $2;
		$name =~ s/ \(untrusted\)$//;
		$remote_pos{$name} = $pos;
		$remote_name[$pos] = $name;
	}
	else {
		print "!! unrecognized line:$.: $_";
	}
}

my @dirs = sort keys %dir_locs;

for my $dir (@dirs) {
	my %locs = %{$dir_locs{$dir}};
	my @locs = sort {$locs{$a} <=> $locs{$b}} keys %locs;
	my $main = pop @locs;
	print loc2remotestr($main)." $dir/\n";
	if (@locs) {
		my $full = ($locs{$main} - $locs{$locs[-1]} <= 2);
		my %files = %{$file_locs{$dir}};
		my @files = sort grep {$full || $files{$_} ne $main} keys %files;
		for (@files) {
			my $loc = $files{$_};
			my $loc_str = $full
				? loc2remotestr($loc)
				: loc2diffstr($main, $loc);
			my $name_fmt = $full ? "" : "1";
			print "  ".$loc_str." ".fmt("$_", $name_fmt)."\n";
		}
	}
}
