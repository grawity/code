#!/usr/bin/env perl
use warnings;
use strict;
use Data::Dumper;
use Getopt::Long qw(:config bundling no_ignore_case);
use File::Basename;
use Nullroute::Dir qw(find_first_file);

our %config;
my %dir_locs;
my %file_locs;
my @remote_name;
my @remote_use;

# remote_alias($remote) -> str
#
# Accepts a local remote name and mangles it for display (e.g. trimming
# prefixes).

sub remote_alias {
	my ($remote) = @_;

	if ($config{remote_alias}) {
		return $config{remote_alias}->($remote);
	}
}

# remote_color($remote) -> color_idx
#
# Accepts a local remote name, which might be empty if the remote is not
# configured locally (i.e. only exists in git-annex database but not
# .git/config).
#
# Returns index to 256-color palette, which can be negative to indicate 'bold';
# see fg() below.

sub remote_color {
	my ($remote) = @_;

	if ($config{remote_color}) {
		return $config{remote_color}->($remote);
	}

	for ($remote) {
		return   8 if /^$/;
		return  -3 if /^here$/;
		return  15;
	}
}

# remote_hidden($remote) -> bool
#
# Checks whether the remote is uninteresting and should be hidden. By default,
# returns true for bittorrent & web.

sub remote_hidden {
	my ($remote) = @_;

	if ($config{remote_hidden}) {
		return $config{remote_hidden}->($remote);
	}

	return ($remote =~ /^(bittorrent|web)$/);
}

# fmt(str, fmt) -> str
#
# Wraps string in given ANSI format string, adding escape codes as needed.

sub fmt {
	my ($str, $fmt) = @_;
	return (length($str) && length($fmt))
		? "\e[".$fmt."m".$str."\e[m"
		: $str;
}

# fg(str, color_idx) -> str
#
# Wraps string in the ANSI format string for the given 256-color idx (which may
# be negative to additionally enable bold text).

sub fg {
	my ($str, $color) = @_;
	if ($color < 0) {
		$str = fmt($str, "1");
	}
	return fmt($str, "38;5;".abs($color));
}

# fmt_remotes(@remotes) -> str
#
# Accepts a list of (already formatted) remote names, applies final display
# formatting (prefix, suffix, optional columns).

sub fmt_remotes {
	my (@remotes) = @_;
	return fg("{", 8).join(" ", @remotes).fg("}", 8);
}

# present(bitmap, idx) -> bool
#
# Accepts a location bitmap (_Xx_X) and checks if bit at given index is set.
# Hidden remotes are always unset.

sub present {
	my ($loc, $idx) = @_;
	return 0 if $idx >= length($loc);
	return 0 if remote_hidden($remote_name[$idx]);
	return (substr($loc, $idx, 1) ne "_");
}

# diff_locsets(bitmap, bitmap) -> hash
#
# Accepts two location bitmaps, and returns a hash keyed by index, with
# diff-like "-"/"+" values (corresponding to "removed" and "added").

sub diff_locsets {
	my ($a, $b) = @_;

	my @a_only = grep {
		present($a, $_) && !present($b, $_)
	} 0..length($a);

	my @b_only = grep {
		present($b, $_) && !present($a, $_)
	} 0..length($b);

	return ((map {$_ => "-"} @a_only),
		(map {$_ => "+"} @b_only));
}

# locset_str(bitmap) -> str
#
# Accepts a location bitmap, returns a formatted list of remote names. Absent
# remotes will be included if they were present for at least one other file in
# the current session.
#
# TODO: Split into a function that returns a list without calling fmt_remotes.

sub locset_str {
	my ($loc) = @_;

	my @remotes = map {
		my $name = $remote_name[$_];
		my $color = remote_color(present($loc, $_) ? $name : "");
		$name = remote_alias($name) // $name;
		fg($name, $color);
	} grep {
		$remote_use[$_];
	} sort {
		$remote_name[$a] cmp $remote_name[$b]
	} 0..$#remote_name;

	return fmt_remotes(@remotes);
}

# locset_diffstr(base_bitmap, new_bitmap) -> str
#
# Similar to locset_str, but returns a short diff-like list (with "+name" and
# "-name" indicating added/removed remotes, compared to base_bitmap).

sub locset_diffstr {
	my ($loc1, $loc2) = @_;

	my %diff = diff_locsets($loc1, $loc2);
	my @remotes = map {
		my $name = $remote_name[$_];
		my $color = remote_color($diff{$_} eq "+" ? $name : "");
		$name = remote_alias($name) // $name;
		$diff{$_}.fg($name, $color);
	} grep {
		$diff{$_}
	} sort {
		$remote_name[$a] cmp $remote_name[$b]
	} 0..$#remote_name;

	return if !@remotes;
	return fmt_remotes(@remotes);
}

# Process command line.

my %Opt;

GetOptions(
	"a|f|full!" => \$Opt{full},
) or exit(2);

my $conf = find_first_file("config:annex-where.conf.pl",
                           "config:synced/annex-where.conf.pl");

if ($conf) { do $conf; }

# Parse `git annex list` input.

while (<STDIN>) {
	if (/^([_Xx]+) (.+)$/) {
		my $loc = $1;
		my $dir = dirname($2);
		my $base = basename($2);
		$dir_locs{$dir}{$loc} += 1;
		$file_locs{$dir}{$base} = $loc;
		for (0..length($loc)) {
			$remote_use[$_]++ if present($loc, $_);
		}
	}
	elsif (/^(\|*)([^|_Xx].*?)$/) {
		my $pos = length($1);
		my $name = $2;
		$name =~ s/ \(untrusted\)$//;
		$remote_name[$pos] = $name;
	}
	else {
		warn "!! unrecognized line:$.: $_\n";
	}
}

my @dirs = sort keys %dir_locs;

for my $dir (@dirs) {
	my %locs = %{$dir_locs{$dir}};
	my @locs = sort {$locs{$a} <=> $locs{$b}} keys %locs;
	my $main = pop @locs;
	print locset_str($main)." $dir/\n";
	if (@locs) {
		my $full = $Opt{full} || ($locs{$main} - $locs{$locs[-1]} <= 2);
		my %files = %{$file_locs{$dir}};
		my @files = sort grep {$full || $files{$_} ne $main} keys %files;
		for (@files) {
			my $loc_str = $full
				? locset_str($files{$_})
				: locset_diffstr($main, $files{$_});
			next if !$loc_str;
			my $name_fmt = $full ? "" : "1";
			print "  ".$loc_str." ".fmt("$_", $name_fmt)."\n";
		}
	}
}
