#!/usr/bin/env python3
import argparse
from collections import namedtuple
import fdb
from hashlib import md5
import os
from nullroute.core import Core
import nullroute.sec
import sys

class MyQDatabase(object):
    User = namedtuple("User", ["id", "name", "fullname", "email", "card"])

    def __init__(self, host):
        self.host = host
        creds = nullroute.sec.get_netrc(self.host, service="fdb")
        Core.debug("connecting to %r as %r", self.host, creds["login"])
        self.conn = fdb.connect(host=self.host, database="myq",
                                user=creds["login"], password=creds["password"])

    def find_user(self, arg):
        Core.debug("searching for %r", arg)
        qry = """
        SELECT e.id, e.name, u.fullname, u.email, c.card_id
            FROM tblEntities e
            JOIN tblUsers u ON u.id=e.id
            JOIN tblCard c ON c.user_id=e.id
            WHERE LOWER(name) LIKE ?
        UNION DISTINCT
        SELECT e.id, e.name, u.fullname, u.email, c.card_id
            FROM tblEntities e
            JOIN tblUsers u ON u.id=e.id
            JOIN tblCard c ON c.user_id=e.id
            WHERE LOWER(email) LIKE ?
        UNION DISTINCT
        SELECT e.id, e.name, u.fullname, u.email, c.card_id
            FROM tblEntities e
            JOIN tblUsers u ON u.id=e.id
            JOIN tblCard c ON c.user_id=e.id
            WHERE u.id IN (SELECT user_id
                            FROM tblAliases a
                            WHERE LOWER(alias) LIKE ?)
        UNION DISTINCT
        SELECT e.id, e.name, u.fullname, u.email, c.card_id
            FROM tblEntities e
            JOIN tblUsers u ON u.id=e.id
            JOIN tblCard c ON c.user_id=e.id
            WHERE LOWER(fullname) LIKE ?
        """
        cur = self.conn.cursor()
        cur.execute(qry, (arg.lower(),)*4)
        for row in cur:
            yield self.User(*row)

def crack_md5(arg, digits=4):
    arg = arg.lower()
    for i in range(10 ** digits):
        pin = "%0*d" % (digits, i)
        hash = md5(pin.encode()).hexdigest()
        if hash == arg:
            return pin
    return None

def crack_pin(arg):
    Core.debug("cracking hash %r", arg)
    for digits in [4, 5, 6]:
        result = crack_md5(arg, digits)
        if result:
            break
    return result

host = "aqrate.utenos-kolegija.lt"
db = None

parser = argparse.ArgumentParser()
parser.add_argument("--on-behalf-of", help="Internal option for sudo logging")
parser.add_argument("--raw", action="store_true")
parser.add_argument("username", nargs="*")
args = parser.parse_args()

for arg in args.username[:]:
    if len(arg) == 32:
        pin = crack_pin(arg)
        print("%s = %s" % (arg, pin or "not found"))
    else:
        if not db:
            db = MyQDatabase(host)
        for row in db.find_user(arg):
            Core.debug("found row %r", row)
            pin = crack_pin(row.card)
            if args.raw:
                print("\t".join(map(str, [*row, pin])))
            else:
                print("%s (%s) = %s" % (row.fullname, row.email, pin or "not found"))
