#!/usr/bin/env bash

# Use IP address in case DNS is broken (which it will be,
# because gw-core is also the primary DNS resolver).
BMC_HOST="bmc-gw.utenos-kolegija.lt"
BMC_ADDR="10.254.28.9"

PHY_IF="eno1"
VLAN_ID="28"
VLAN_IP="10.254.28.219/24"
VLAN_IF="$PHY_IF.$VLAN_ID"

attach_console() {
	rconsole "${BMC_HOST}@${BMC_ADDR}"
}

can_have_vlan() {
	[[ $HOSTNAME == @(ember|wind) ]]
}

has_vlan() {
	ip -j -d link | jq -e -r "
		.[]
		| select(.linkinfo.info_kind == \"vlan\")
		| select(.linkinfo.info_data.id == $VLAN_ID)
		| .ifname
	"
}

setup_vlan() {
	if ! can_have_vlan; then
		return
	elif has_vlan >/dev/null; then
		vlan_added=0
	else
		echo "[Adding temporary VLAN]"
		sudo ip link add $VLAN_IF link $PHY_IF type vlan id $VLAN_ID
		sudo ip link set $VLAN_IF alias "Temporary VLAN for ${0##*/}"
		sudo ip link set $VLAN_IF up
		sudo ip addr add $VLAN_IP dev $VLAN_IF
		vlan_added=1
	fi
}

teardown_vlan() {
	if ! can_have_vlan; then
		return
	elif (( vlan_added )); then
		echo "[Removing temporary VLAN]"
		sudo ip link del $VLAN_IF
		vlan_added=0
	fi
}

if [[ $1 == -f ]]; then
	echo "[40;93mIndirect access through network.[m"
	attach_console
elif can_have_vlan; then
	echo "[40;92mDirect access through VLAN.[m"
	trap teardown_vlan SIGINT
	setup_vlan
	attach_console
	teardown_vlan
else
	echo "[40;91mNo access from this system.[m"
	exit 3
fi
