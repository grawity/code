#!/usr/bin/env bash

. lib.bash || exit

if (( $# )); then
	dirs=("$@")
else
	dirs=(.)
fi

for dir in "${dirs[@]}"; do
	if ! [[ -d $dir ]]; then
		err "path '$dir' does not exist"
		continue
	fi

	(
		set -e

		# returns absolute path
		base=$(git -C "$dir" rev-parse --show-toplevel)
		if ! [[ $base && -d $base ]]; then
			err "could not determine toplevel directory of '$dir'"
			continue
		fi
		debug "repository toplevel: '$base'"

		# returns absolute path
		src=$(git -C "$dir" rev-parse --absolute-git-dir)
		if ! [[ $src && -d $src ]]; then
			err "could not determine .git location of '$dir'"
			continue
		fi
		debug "repository gitdir: '$src'"

		if [[ "$(git -C "$dir" config core.bare)" == "true" ]]; then
			notice "'$dir' is already a bare repo"
			continue
		fi

		if [[ "$(git -C "$dir" remote | wc -l)" != @(0|1) ]]; then
			err "'$dir' has more than one remote"
			continue
		fi

		log "bare: moving the .git directory"
		dst="$base.git"
		mv -T -v "$src" "$dst"

		log "bare: setting core.bare=true"
		git -C "$dst" config core.bare true

		log "bare: deleting checkout-related files"
		rm -f "$dst"/index
		rm -f "$dst"/{COMMIT_EDITMSG,FETCH_HEAD,ORIG_HEAD}

		log "bare: deleting tracking-branch configurations"
		git -C "$dst" config --list --local |
			grep '^branch\.' | sed 's/.[^.]*$//' | sort -u |
			while read -r line; do
				git -C "$dst" config --remove-section "$line"
			done

		log "mirror: deleting all local branches"
		git -C "$dst" for-each-ref > "$dst/refs.backup"
		git -C "$dst" for-each-ref |
			awk '{print $3}' | egrep '^refs/heads/' |
			while read -r ref; do
				git -C "$dst" update-ref -d "$ref"
			done

		log "mirror: moving remote branches to local"
		debug "copying origin branches to local branches"
		git -C "$dst" update-ref -d --no-deref "refs/remotes/origin/HEAD"
		git -C "$dst" push -q . "+refs/remotes/origin/*:refs/heads/*"

		log "mirror: moving remote branch reflogs to local"
		mkdir -p "$dst/logs/refs/heads"
		rsync -a --delete "$dst/logs/refs/remotes/origin/" "$dst/logs/refs/heads/"

		log "mirror: converting remote configuration"
		git -C "$dst" config --unset-all remote.origin.fetch
		git -C "$dst" config --unset-all remote.origin.mirror
		git -C "$dst" config remote.origin.fetch "+refs/heads/*:refs/heads/*"

		log "deleting unwanted refs"
		git -C "$dst" for-each-ref |
			awk '{print $3}' | egrep -v '^refs/(heads|notes|tags)/' |
			while read -r ref; do
				git -C "$dst" update-ref -d "$ref"
			done

		log "repacking and cleaning up"
		git -C "$dst" pack-refs --all --prune
		git -C "$dst" gc
		git -C "$dst" prune
		rdempty --quiet "$dst"

		log "deleting old worktree"
		rm -rvf "$base" | progress

		info "moved to '$dst'"
	) \
	|| err "conversion of '$dir' failed"
done

lib::exit
