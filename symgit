#!/usr/bin/env bash
# symgit -- manage self-hosted Git repositories

. lib.bash || exit

set -u

host=star
fsroot='/srv/git'
urlprefix=':'

argtorepo() {
	local arg=$1
	if [[ $arg == . ]]; then
		arg=$(git config remote.origin.url) || exit
	fi
	arg=${arg#$urlprefix}
	arg=${arg%.git}
	echo "$arg"
}

repodir() {
	local repo=$1
	case $repo in [!a-z]*|*.git)
		lib:crash "repo should have been canonicalized: $repo"
	esac
	echo "$fsroot/$repo.git"
}

repourl() {
	local repo=$1
	case $repo in [!a-z]*|*.git)
		lib:crash "repo should have been canonicalized: $repo"
	esac
	echo "$urlprefix$repo"
}

klist -s || kinit || die "no Kerberos credentials"

cmd=$1; shift

case ${cmd:-help} in
	help)
		echo "Commands:"
		echo "  ls|list"
		echo "  new <repo>..."
		echo "  mv|rename <old_repo> <new_repo>"
		echo "  desc|describe <repo> [<description>]"
		echo "  exp|export <repo>..."
		echo "  unexp|unexport <repo>..."
		echo "  mirror <repo> <upstream>"
		echo "  unmirror <repo>"
		echo "  web <repo>..."
		echo "  cgit-flush"
		;;
	ls|list)
		if (( $# )); then
			die "Extraneous arguments: '$*'"
		fi
		ssh $host "find '$fsroot/' -type d -name '*.git' -printf '%P\n' -prune" \
			| sort \
			| sed "s|^|$urlprefix|; s|\\.git\$||"
		;;
	new)
		if (( $# < 1 )); then
			die "Usage: $progname $cmd <repo>..."
		fi
		for arg; do
			if [[ $arg == "." ]]; then
				err "Shortcut '$arg' not allowed here"
				continue
			fi
			repo=$(argtorepo "$arg")
			dir=$(repodir "$repo")
			url=$(repourl "$repo")
			if ssh $host "test -d ${dir@Q}"; then
				err "Repository '$url' already exists"
				continue
			fi
			info "Creating repository '$url'"
			ssh $host "git init --bare ${dir@Q}"
			ssh $host "chmod go-rx ${dir@Q}"
		done
		info "Flushing cgit configuration cache"
		ssh $host "sudo find /var/cache/cgit -name 'rc-*' -delete"
		;;
	mv|move|rename)
		if (( $# != 2 )); then
			die "Usage: $progname $cmd <old> <new>"
		fi
		old=$1
		new=$2
		oldrepo=$(argtorepo "$old")
		newrepo=$(argtorepo "$new")
		olddir=$(repodir "$oldrepo")
		newdir=$(repodir "$newrepo")
		oldurl=$urlprefix$oldrepo
		newurl=$urlprefix$newrepo
		if ! ssh $host "test -d ${olddir@Q}"; then
			err "Source repository '$oldurl' does not exist"
		elif ssh $host "test -d ${newdir@Q}"; then
			err "Target repository '$newurl' already exists"
		else
			info "Renaming repository '$oldurl' => '$newurl'"
			ssh $host "mv -Tvn ${olddir@Q} ${newdir@Q}"
		fi
		info "Flushing cgit configuration cache"
		ssh $host "sudo find /var/cache/cgit -name 'rc-*' -delete"
		;;
	head)
		if (( $# < 1 )); then
			die "Usage: $progname $cmd <repo> <head>"
		else
			arg=$1 newhead=$2
		fi
		repo=$(argtorepo "$arg")
		dir=$(repodir "$repo")
		if [[ $newhead ]]; then
			newhead=refs/heads/${newhead#refs/heads/}
			info "Setting default branch for '$repo' to '$newhead'"
			ssh $host "git -C ${dir@Q} symbolic-ref HEAD ${newhead@Q}"
		else
			ssh $host "git -C ${dir@Q} symbolic-ref HEAD"
		fi
		;;
	desc|describe)
		if (( $# < 1 )); then
			die "Usage: $progname $cmd <repo> [<description>]"
		elif (( $# == 1 )) && [[ $1 == *\ * ]]; then
			arg=. newdesc=$1
		else
			arg=$1 newdesc=${2-}
		fi
		repo=$(argtorepo "$arg")
		dir=$(repodir "$repo")
		if [[ $newdesc ]]; then
			info "Setting description for '$repo' to \"$newdesc\""
			ssh $host "echo ${newdesc@Q} > ${dir@Q}/description"
		else
			if ! ssh $host "test -s ${dir@Q}/description"; then
				info "Repository '$repo' has no description"
			else
				ssh $host "cat ${dir@Q}/description"
			fi
		fi
		;;
	mirror)
		if (( $# != 2 )); then
			die "Usage: $progname $cmd <repo> <upstream>"
		fi
		arg=$1 upstream=$2
		repo=$(argtorepo "$arg")
		dir=$(repodir "$repo")
		# Set up parameters for the hourly re-fetch cronjob, which looks for
		# repositories with a remote that have [Mirror] in their description.
		ssh $host "git -C ${dir@Q} remote remove origin &>/dev/null || true"
		ssh $host "git -C ${dir@Q} remote add --mirror=fetch origin ${upstream@Q}"
		ssh $host "git -C ${dir@Q} fetch origin"
		info "Added remote 'origin' from '$upstream'"
		if ssh $host "test -s ${dir@Q}/description"; then
			desc=$(ssh $host "cat ${dir@Q}/description")
			desc=$(echo "$desc" | sed 's/^Mirror of [^ ]*$//')
			desc=$(echo "$desc" | sed 's/^\[Mirror of [^ ]*\] //')
			desc="[Mirror of $upstream] $desc"
		else
			desc="Mirror of $upstream"
		fi
		ssh $host "echo ${desc@Q} > ${dir@Q}/description"
		;;
	unmirror)
		if (( $# != 1 )); then
			die "Usage: $progname $cmd <repo>"
		fi
		arg=$1
		repo=$(argtorepo "$arg")
		dir=$(repodir "$repo")
		ssh $host "git -C ${dir@Q} remote remove origin &>/dev/null || true"
		info "Removed remote 'origin'"
		if ssh $host "test -s ${dir@Q}/description"; then
			desc=$(ssh $host "cat ${dir@Q}/description")
			desc=$(echo "$desc" | sed 's/^Mirror of [^ ]*$//')
			desc=$(echo "$desc" | sed 's/^\[Mirror of [^ ]*\] //')
		else
			desc=""
		fi
		ssh $host "echo ${desc@Q} > ${dir@Q}/description"
		;;
	pub|publish|exp|export)
		if (( $# < 1 )); then
			die "Usage: $progname $cmd <repo>..."
		fi
		for arg; do
			repo=$(argtorepo "$arg")
			dir=$(repodir "$repo")
			url=$(repourl "$repo")
			# Make world-readable and create the 'export-ok' flag
			# that both Cgit and git-daemon look for.
			if ! ssh $host "test -d ${dir@Q}"; then
				err "Repository '$url' does not exist"
				continue
			elif ssh $host "test -f ${dir@Q}/git-daemon-export-ok"; then
				info "Repository '$url' already public"
				continue
			fi
			if ! ssh $host "test -s ${dir@Q}/description"; then
				warn "Repository '$url' has no description, use '$progname desc'"
			fi
			info "Publishing repository '$url'"
			ssh $host "touch ${dir@Q}/git-daemon-export-ok"
			ssh $host "chmod a+rx ${dir@Q}"
		done
		;;
	unpub|unpublish|unexp|unexport)
		if (( $# < 1 )); then
			die "Usage: $progname $cmd <repo>..."
		fi
		for arg; do
			repo=$(argtorepo "$arg")
			dir=$(repodir "$repo")
			url=$(repourl "$repo")
			if ! ssh $host "test -d ${dir@Q}"; then
				err "Repository '$url' does not exist"
				continue
			fi
			info "Unpublishing repository '$url'"
			ssh $host "rm -f ${dir@Q}/git-daemon-export-ok"
			ssh $host "chmod go-rx ${dir@Q}"
		done
		;;
	web)
		if (( $# < 1 )); then
			die "Usage: $progname $cmd <repo>..."
		fi
		for arg; do
			repo=$(argtorepo "$arg")
			url="https://git.nullroute.lt/cgit/$repo.git/"
			echo "$repo => $url"
		done
		;;
	cgit-flush|flush-cgit)
		if (( $# )); then
			die "Extraneous arguments: '$*'"
		fi
		ssh $host "sudo find /var/cache/cgit -type f -ls -delete"
		info "Cgit cache purged."
		;;
	*)
		die "Unknown subcommand '$cmd'"
		;;
esac

((!errors))
