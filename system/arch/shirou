#!/usr/bin/env python3
from collections import defaultdict
from nullroute.core import Core, Env
import os
from pprint import pprint
import re
import requests
import sys
import subprocess

def vercmp(a, b):
    res = subprocess.run(["vercmp", a, b],
                         stdout=subprocess.PIPE)
    return int(res.stdout.strip())

class AurApi():
    def __init__(self):
        self.ua = requests.Session()

    def _get(self, url, *args, **kwargs):
        Core.debug("fetching %r" % url, skip=1)
        resp = self.ua.get(url, *args, **kwargs)
        resp.raise_for_status()
        return resp

    def get_info(self, pkg_names):
        resp = self._get("https://aur.archlinux.org/rpc/",
                         params={"v": 5, "type": "info", "arg[]": pkg_names})
        return resp.json()

class AurHelper():
    def __init__(self):
        self.aur = AurApi()
        self.cache_dir = os.path.join(Env.xdg_cache_home(), "pacaur")

    def get_local_foreign_pkgs(self):
        with subprocess.Popen(["pacman", "-Qm"],
                              stdout=subprocess.PIPE) as proc:
            return {pkg: ver
                    for (pkg, ver)
                    in [line.decode().strip().split()
                        for line in proc.stdout]}

helper = AurHelper()
