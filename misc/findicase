#!/usr/bin/env python3
import argparse
from collections import defaultdict
from nullroute.ui import print_status
import os
import re
import sys

def bad_win32_name(item):
    if {*item} & {*"?*<>|:\"\n\x7F\\"}:
        return True
    elif re.match(r"^(con|prn|aux|nul|com[1-9]|lpt[1-9])$", item.lower()):
        return True
    elif any([ord(c) < 0x20 for c in item]):
        return True
    elif item[-1] in {".", " "}:
        return True
    else:
        return False

def bad_ucs2_name(item):
    if re.search(r"[^\u0000-\uFFFF]", item):
        return True
    else:
        return False

def non_utf8_name(item):
    # Python uses lone surrogates to represent such filenames
    if re.search(r"[\uDC80-\uDCFF]", item):
        return True
    else:
        return False

def hl(item):
    return "\033[41m%s\033[m" % item

def hl_win32_name(item):
    return re.sub(r"(^(con|prn|aux|nul|com[1-9]|lpt[1-9])$|[. ]$|[?*<>|:\"\\\n])", hl(r"\1"), item, re.I)

def hl_nonutf_name(item):
    return re.sub(r"([\uDC80-\uDCFF])", lambda s: hl("\\x%02X" % (ord(s[0]) & 0xFF)), item, re.I)

parser = argparse.ArgumentParser()
parser.add_argument("-C", "--ignore-case", action="store_true", help="ignore case collisions")
parser.add_argument("-B", "--ignore-bmp", action="store_true", help="ignore non-BMP names")
parser.add_argument("path", nargs="*")
args = parser.parse_args()

roots = args.path or ["."]
bad = 0

for root in roots:
    seen = defaultdict(set)
    badwin = set()
    baducs = set()
    nonutf = set()
    total = 0

    print_status(root)

    for dirpath, dirnames, filenames in os.walk(root):
        print_status(dirpath)
        for item in [*dirnames, *filenames]:
            path = os.path.join(dirpath, item)
            path = os.path.relpath(path, root)
            cfpath = path.casefold()
            seen[cfpath].add(path)
            if bad_win32_name(item):
                badwin.add(path)
            if bad_ucs2_name(item):
                baducs.add(path)
            if non_utf8_name(item):
                nonutf.add(path)
            total += 1

    print_status()

    if not args.ignore_case:
        for cfpath in sorted(seen):
            if len(seen[cfpath]) > 1:
                print("Colliding paths:")
                for ogpath in sorted(seen[cfpath]):
                    print("  %s" % ogpath)
                bad += 1

    if badwin:
        print("Names incompatible with Windows:")
        for path in sorted(badwin):
            print("  %s" % hl_win32_name(path))
            bad += 1

    if baducs and not args.ignore_bmp:
        print("Names incompatible with Dropbox:")
        for path in sorted(baducs):
            print("  %r" % path)
            bad += 1

    if nonutf:
        print("Names incompatible with UTF-8:")
        for path in sorted(nonutf):
            print("  %s" % hl_nonutf_name(path))
            bad += 1

    print("Scanned %s items with %s unique paths" % (total, len(seen)))

if bad > 0:
    print("Found %d issues" % bad)
    sys.exit(1)
