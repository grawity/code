#!/usr/bin/env python3
# vireverse -- interactively edit reverse-DNS records
import argparse
import dns.exception
import dns.name
import dns.resolver
import dns.reversename
import dns.zone
import gssapi
import ipaddress
import logging
import math
import os
import subprocess
import tempfile

import n.dns.gssapi

RPZ_ZONE = dns.name.from_text("rpz.nullroute.lt.")
RPZ_MASTER = dns.name.from_text("star.nullroute.lt.")
DEFAULT_NET = "10.147.0.0/16"

def confirm(text):
    return input(f"{text} ").startswith("y")

def zones_for_prefix(net):
    assert isinstance(net, (ipaddress.IPv4Network,
                            ipaddress.IPv6Network))

    rev = net.reverse_pointer.split(".")
    if net.version == 6:
        full, bits = divmod(net.prefixlen, 4)
        full += 2
        if bits:
            full += 1
            start = int(rev[-full], 16)
            count = 2 ** (4 - bits)
            for i in range(count):
                rev[-full] = "%x" % (start + i)
                yield ".".join(rev[-full:])
        else:
            yield ".".join(rev[-full:])
    else:
        full, bits = divmod(net.prefixlen, 8)
        full += 2
        if bits:
            raise NotImplementedError(f"{rev} has {bits=}")
        else:
            if net.prefixlen == 32:
                rev[0] = "0"
            yield ".".join(rev[-full:])

def prefix_for_zone(name):
    # Similar to dns.reversename.to_address() but handles prefixes.
    assert isinstance(name, dns.name.Name)
    if name.is_subdomain(dns.reversename.ipv4_reverse_domain):
        name = name.relativize(dns.reversename.ipv4_reverse_domain)
        octets = [x.decode() for x in reversed(name.labels)]
        bits = len(octets) * 8
        octets += ["0"] * (4 - len(octets))
        addr = ".".join(octets)
        prefix = ipaddress.ip_network((addr, bits))
        return prefix
    elif name.is_subdomain(dns.reversename.ipv6_reverse_domain):
        name = name.relativize(dns.reversename.ipv6_reverse_domain)
        nibbles = [x.decode() for x in reversed(name.labels)]
        bits = len(nibbles) * 4
        nibbles += ["0"] * (32 - len(nibbles))
        parts = []
        for i in range(0, len(nibbles), 4):
            parts.append("".join(nibbles[i : i+4]))
        addr = ":".join(parts)
        prefix = ipaddress.ip_network((addr, bits))
        return prefix
    else:
        # XXX: For unusual zones, it might be wise to return 'none' here so
        # that prefix checks would be skipped outright.
        raise ValueError(name)

def address_for_ptr(name, rpz_zone):
    assert isinstance(name, dns.name.Name)
    if rpz_zone:
        name = name.relativize(rpz_zone) + dns.name.root
    addr = dns.reversename.to_address(name)
    return ipaddress.ip_address(addr)

def ptr_for_address(addr, rpz_zone):
    assert isinstance(addr, (ipaddress.IPv4Address,
                             ipaddress.IPv6Address))
    name = dns.reversename.from_address(str(addr))
    if rpz_zone:
        name = name.relativize(dns.name.root) + rpz_zone
    return name

def master_for_zone(zone):
    ans = dns.resolver.resolve(zone, "SOA")
    return ans.rrset[0].mname

def axfr(zone, server):
    proc = subprocess.run(["dig", f"@{server}", f"{zone}", "AXFR"],
                          stdout=subprocess.PIPE,
                          check=True)

    if b"; Transfer failed" in proc.stdout:
        exit(f"error: Zone transfer from {server} failed.")

    return dns.zone.from_text(proc.stdout, zone,
                              relativize=False)

    # for addr in ...:
    # qry = dns.query.xfr(addr, zone)
    # dns.zone.from_xfr(qry)

def run_visual(filename, line=0):
    editor = os.environ.get("VISUAL") \
          or os.environ.get("EDITOR") \
          or "vi"
    if line and os.path.basename(editor) in {"vi", "vim", "nvim"}:
        subprocess.run([editor, filename, "+:setl cursorline", f"+{line}"])
    else:
        subprocess.run([editor, filename])

def case_eq(a, b):
    """
    Compare two sets or rdatasets, paying attention to case changes (as
    dns.name.Name normally compares case-insensitive).
    """
    assert isinstance(a, (set, dns.rdataset.Rdataset))
    if a == b:
        a = {*map(str, a)}
        b = {*map(str, b)}
    return a == b

def addr_diff(a, b):
    if not a or not b:
        return math.inf
    return abs(a._ip - b._ip)
    #a = int.from_bytes(a.packed)
    #b = int.from_bytes(b.packed)
    #return abs(a - b)

def group_for_addr(addr):
    """
    Round the address up to the nearest IPv4 /24 or IPv6 /64 that covers it.
    """
    if addr.version == 4 and addr in ipaddress.ip_network("10.147.240.0/22"):
        return ipaddress.ip_interface((addr, 30)).network
    bits = {4: 24, 6: 64}[addr.version]
    return ipaddress.ip_interface((addr, bits)).network

def send_nsupdate(zone, cmds, *, server=None, gssapi=True, debug=False):
    if not server:
        server = master_for_zone(zone)

    cmds = [f"server {server}\n",
            f"zone {zone}\n",
            *cmds,
            f"send\n"]

    nsupdate_args = ["nsupdate"]
    if debug:
        nsupdate_args += ["-d"]
    if gssapi:
        nsupdate_args += ["-g"]

    subprocess.run(nsupdate_args,
                   input="".join(cmds).encode(),
                   check=True)

parser = argparse.ArgumentParser()
parser.add_argument("-l", "--ttl", type=int, default=3600,
                        help="set the TTL for created records")
parser.add_argument("-R", "--rpz", action="store_true",
                        help="edit the Response Policy Zone")
parser.add_argument("-n", "--dry-run", action="store_true",
                        help="only show updates that would be done")
parser.add_argument("-x", "--no-gss", action="store_true",
                        help="disable Kerberos (GSS-TSIG) authentication")
parser.add_argument("-d", "--debug", action="count", default=0,
                        help="enable nsupdate debugging")
parser.add_argument("-v", "--verbose", action="store_true",
                        help="show detailed information")
parser.add_argument("network",
                        help="IP prefix to edit the zone for",
                        nargs="?")
args = parser.parse_args()

logging.basicConfig(level=[logging.INFO, logging.DEBUG][args.verbose],
                    format="%(message)s")

if args.rpz:
    # For RPZ, the prefix is only used to jump to the nearest line.
    try:
        prefix = ipaddress.ip_network(args.network)
    except ValueError:
        prefix = None
    zone = RPZ_ZONE
    zone_prefix = prefix
    logging.info(f"Editing RPZ zone <{zone}>")
else:
    try:
        prefix = ipaddress.ip_network(args.network or DEFAULT_NET)
    except ValueError:
        # XXX: This case is meant for editing non-CIDR (e.g. /26) zones,
        # so we can't just address_for_ptr() it to get the prefix back.
        prefix = None
        zone = dns.name.from_text(args.network)
    else:
        zones = zones_for_prefix(prefix)
        zones = [*zones]
        if len(zones) > 1:
            exit(f"error: multiple zones for {prefix}: {zones}")
        zone = dns.name.from_text(zones[0])
        logging.debug(f"Domain for {prefix} is <{zone}>")

    apex = dns.resolver.zone_for_name(zone)
    if apex == zone:
        zone_prefix = prefix
    else:
        zone = apex
        zone_prefix = prefix_for_zone(zone)
        logging.warning(f"Editing zone <{zone}> for prefix {prefix}")

if args.rpz:
    # XXX: hack (this should be a properly delegated .sym zone)
    master = RPZ_MASTER
else:
    master = master_for_zone(zone)
logging.debug(f"Master for zone <{zone}> is <{master}>")

if args.no_gss:
    logging.debug("Performing unauthenticated zone transfer")
    zone_data = axfr(zone, master)
else:
    logging.debug("Using GSS-TSIG authentication for zone transfer")
    try:
        zone_data = n.dns.gssapi.gss_tsig_axfr(zone, master)
    except gssapi.exceptions.GSSError as ex:
        exit(f"vireverse: GSS-TSIG zone transfer failed: {ex!r}")
logging.debug(f"Transferred records for {len(zone_data.keys())} names.")

rpz_zone = RPZ_ZONE if args.rpz else None

old_soa = zone_data[zone].get_rdataset(dns.rdataclass.IN,
                                       dns.rdatatype.SOA)
logging.debug(f"Old serial number {old_soa[0].serial}.")

old = {}
new = {}
non_ptr = 0

for name, node in zone_data.items():
    rdset = node.get_rdataset(dns.rdataclass.IN,
                              dns.rdatatype.PTR)
    if not rdset:
        non_ptr += 1
        continue
    addr = address_for_ptr(name, rpz_zone)
    old[addr] = rdset
    #old[addr] = set(rdset)

if not prefix and not old and non_ptr > 5:
    exit(f"error: This doesn't look like a reverse zone (too many non-PTR records).")

pref_line = 0
near_line = 0
near_addr = None

with tempfile.NamedTemporaryFile("w", delete=False) as temp:
    n_lines = 0
    last_net = None

    print(f"# Editing {zone} (serial {old_soa[0].serial})", file=temp.file)
    n_lines += 1

    # A mixed list of IPv4Address and IPv6Address (such as in a RPZ zone)
    # refuses to be sorted
    old4 = [a for a in old if a.version == 4]
    old6 = [a for a in old if a.version == 6]
    assert len(old) == len(old4 + old6)

    # Maximum width of the address column...
    addr_max_width = max(len(str(addr)) for addr in old) if old else 0
    # ...rounded up to the effective width (whole number of tabs), with an
    # increment to guarantee that if it is already an exact multiple of 8, then
    # a tab is inserted regardless.
    addr_max_width = math.ceil((addr_max_width + 1) / 8) * 8

    for addr in sorted(old4) + sorted(old6):
        # Output a blank line between each /24 or /64
        this_net = group_for_addr(addr)
        if last_net and this_net != last_net:
            print("", file=temp.file)
            n_lines += 1
        last_net = this_net

        # Let `vireverse <addr>` open editor with the cursor at this location
        # (or the nearest line if the address is not in the zone yet).
        if prefix:
            if addr in prefix and not pref_line:
                pref_line = n_lines + 1
            elif addr_diff(prefix[0], addr) < addr_diff(prefix[0], near_addr):
                near_addr = addr
                near_line = n_lines + 1

        for rdata in old[addr]:
            pad = addr_max_width - len(str(addr))
            tabs = "\t" * (math.ceil(pad / 8) + 0)
            target = rdata.target.relativize(dns.name.root)
            print(f"{addr}{tabs}{target}", file=temp.file)
            n_lines += 1

    print(f"# End of file", file=temp.file)
    edit_path = temp.name

run_visual(edit_path, pref_line or near_line)

parse_err = False
with open(edit_path, "r") as temp:
    for i, line in enumerate(temp, start=1):
        line = line.rstrip()
        if not line:
            continue
        if line[0] in {"#", ";"}:
            continue

        try:
            addr, target = line.split()
            addr = ipaddress.ip_address(addr)
            target = dns.name.from_text(target)
        except (ValueError, dns.exception.SyntaxError) as err:
            logging.error(f"error: Line {i}: {err}")
            logging.error(f"{edit_path}:{i}: {line}")
            parse_err = True
            continue

        if zone_prefix and addr not in zone_prefix:
            logging.error(f"error: Line {i}: {addr} is out of range for {zone_prefix}")
            logging.error(f"{edit_path}:{i}: {line}")
            parse_err = True
            continue

        rdata = dns.rdtypes.ANY.PTR.PTR(dns.rdataclass.IN,
                                        dns.rdatatype.PTR,
                                        target)
        if addr not in new:
            new[addr] = dns.rdataset.Rdataset(dns.rdataclass.IN,
                                              dns.rdatatype.PTR)
            #new[addr] = set()
        new[addr].add(rdata)

if parse_err:
    exit(f"error: Could not parse input (retained in {edit_path!r})")
else:
    os.unlink(edit_path)

addrs_missing = {*old} - {*new}
addrs_created = {*new} - {*old}
addrs_updated = {addr
                 for addr in {*old} & {*new}
                 if not case_eq(old[addr], new[addr])}

if not new:
    if not old:
        print("No changes were made (zone remains empty).")
        exit()
    else:
        exit(f"error: Zone became empty.")

if len(addrs_missing) + len(addrs_created) + len(addrs_updated) == 0:
    print("No changes were made.")
    exit()
else:
    fmt = lambda rs: ", ".join(sorted([str(r.target) for r in rs]))
    if addrs_missing:
        print("Deletions:")
        for addr in addrs_missing:
            print(f"\t{addr} -= (was {fmt(old[addr])})")
    if addrs_created:
        print("Additions:")
        for addr in addrs_created:
            print(f"\t{addr} += {fmt(new[addr])}")
    if addrs_updated:
        print("Changes:")
        for addr in addrs_updated:
            print(f"\t{addr} := {fmt(new[addr])} (was {fmt(old[addr])})")
    if not confirm("Continue?"):
        exit("Changes discarded.")

# Safety check
assert len(addrs_missing) < 20

cmds = []
cmds += [f"prereq yxrrset {zone} SOA {old_soa[0]}\n"]

for addr in addrs_missing | addrs_updated:
    rname = ptr_for_address(addr, rpz_zone)
    cmds += [f"update del {rname} {args.ttl} PTR\n"]
    for rdata in old[addr]:
        print(f"Deleting: {addr} -= (was {rdata.target})")

for addr in addrs_created | addrs_updated:
    rname = ptr_for_address(addr, rpz_zone)
    for rdata in new[addr]:
        cmds += [f"update add {rname} {args.ttl} PTR {rdata.target}\n"]
        print(f"Adding:   {addr} += {rdata.target}")

if args.debug >= 1:
    print("Commands:")
    print("\t" + "\t".join(cmds), end="")

if not args.dry_run:
    send_nsupdate(zone, cmds,
                  server=master,
                  gssapi=not args.no_gss,
                  debug=(args.debug >= 2))
