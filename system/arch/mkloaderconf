#!/usr/bin/bash -eu

arg0=${0##*/}

say() { echo "$arg0: $*"; }
err() { echo "$arg0: $*" >&2; return 1; }
die() { echo "$arg0: $*" >&2; exit 1; }

try_esp() {
	mountpoint -q "$1" && [[ ! -L "$1" ]] && [[ -d "$1/EFI" ]] && [[ -d "$1/loader" ]]
}

getkey() {
	local path=$1 key=$2
	local k v
	while read -r k v; do
		if [[ $k == "$key" ]]; then
			echo "$v"
			return
		fi
	done < "$path"
	return 1
}

install_kernel() {
	local kernel=$1
	local suffix=$2
	local config=$3
	local version=

	if version=$(pacman -Q "$kernel" 2>/dev/null); then
		version=${version#"$kernel "}${suffix}
	else
		err "package '$kernel' does not exist"
		return
	fi

	say "installing package '$kernel' ($version) as \"$PRETTY_NAME\""

	if [[ $ESP != /boot ]]; then
		say "copying kernel '$kernel' to EFI system partition"
		mkdir -p "$ESP/EFI/$ID"
		cp -uf "/boot/vmlinuz-$kernel"		"$ESP/EFI/$ID/vmlinuz-$kernel.efi"
		cp -uf "/boot/intel-ucode.img"		"$ESP/EFI/$ID/intel-ucode.img"
		cp -uf "/boot/initramfs-$kernel.img"	"$ESP/EFI/$ID/initramfs-$kernel.img"
		sync -f "$ESP"
	fi

	say "generating loader entry for '$kernel'"
	if [[ $ESP == /boot ]]; then
		parameters=(
			"title"		"$PRETTY_NAME"
			"version"	"$version"
			"machine-id"	"$MACHINE_ID"
			"linux"		"/vmlinuz-$kernel"
			"initrd"	"/intel-ucode.img"
			"initrd"	"/initramfs-$kernel.img"
			"options"	"$BOOT_OPTIONS"
		)
	else
		parameters=(
			"title"		"$PRETTY_NAME"
			"version"	"$version"
			"machine-id"	"$MACHINE_ID"
			"linux"		"/EFI/$ID/vmlinuz-$kernel.efi"
			"initrd"	"/EFI/$ID/intel-ucode.img"
			"initrd"	"/EFI/$ID/initramfs-$kernel.img"
			"options"	"$BOOT_OPTIONS"
		)
	fi
	mkdir -p "$ESP/loader/entries"
	printf '%-15s %s\n' "${parameters[@]}" > "$ESP/loader/entries/$config.conf"
	sync -f "$ESP"
}

remove_kernel() {
	local kernel=$1
	local suffix=$2
	local config=$3

	say "uninstalling package '$kernel'"
	rm -f "$ESP/EFI/$ID/vmlinuz-$kernel.efi"
	rm -f "$ESP/EFI/$ID/initramfs-$kernel.img"
	rm -f "$ESP/loader/entries/$config.conf"
}

declare ESP= os_release=
unset ID NAME PRETTY_NAME MACHINE_ID BOOT_OPTIONS

for f in /efi /boot/efi /boot; do
	[[ $ESP ]] || { try_esp "$f" && ESP=$f; }
done

[[ $ESP ]] ||
	die "EFI system partition not found; please \`mkdir <efisys>/loader\`"

say "found EFI system partition at $ESP"

for f in /etc/os-release /usr/lib/os-release; do
	[[ $os_release ]] || { [[ -e $f ]] && os_release=$f; }
done

[[ $os_release ]] ||
	die "/usr/lib/os-release not found or invalid; see os-release(5)"

. "$os_release" ||
	die "$os_release not found or invalid; see os-release(5)"

[[ ${PRETTY_NAME:=$NAME} ]] ||
	die "$os_release is missing both PRETTY_NAME and NAME; see os-release(5)"

[[ $ID ]] ||
	die "$os_release is missing ID; see os-release(5)"

read -r MACHINE_ID < /etc/machine-id ||
	die "/etc/machine-id not found or empty; see machine-id(5)"

[[ -s /etc/kernel/cmdline ]] ||
	die "/etc/kernel/cmdline not found or empty; please configure it"

BOOT_OPTIONS=(`grep -v "^#" /etc/kernel/cmdline`)
BOOT_OPTIONS=${BOOT_OPTIONS[*]}

exec {lock_fd}> "/run/kernel-post-upgrade.lock"
flock -x -w 60 $lock_fd ||
	die "failed to take lock; is another kernel-post-upgrade instance running?"

if [[ ${1-} ]]; then
	kernel=$1
	suffix=
	config=$ID

	if [[ $kernel != 'linux' ]]; then
		suffix="-${kernel#linux-}"
		config=$config$suffix
	fi

	if [[ -e "/boot/vmlinuz-$kernel" ]]; then
		install_kernel "$kernel" "$suffix" "$config"
	else
		remove_kernel "$kernel" "$suffix" "$config"
	fi
else
	declare -A seenconfigs=()

	for path in /boot/vmlinuz-*; do
		suffix=${path#/boot/vmlinuz-linux}
		kernel=linux$suffix
		config=$ID$suffix
		install_kernel "$kernel" "$suffix" "$config"
		seenconfigs[$config]=1
	done

	for path in "$ESP/loader/entries"/*.conf; do
		config=${path##**/}
		config=${config%.conf}
		if [[ ${seenconfigs[$config]-} ]]; then
			# We just installed this.
			continue
		fi
		machine=$(getkey "$path" machine-id)
		if [[ $machine != "$MACHINE_ID" ]]; then
			say "keeping entry '$config' (foreign machine-id)"
			continue
		fi
		kernel=$(getkey "$path" linux | tr '\\' '/')
		if [[ ! $kernel ]]; then
			say "keeping entry '$config' (not a kernel entry)"
			continue
		fi
		if [[ -s $ESP/$kernel ]]; then
			say "keeping entry '$config' (kernel exists)"
			continue
		fi
		kernel=${kernel##*/}
		if [[ $kernel != vmlinuz-linux* ]]; then
			say "keeping entry '$config' (unusual kernel path)"
			continue
		fi
		say "removing old entry '$config'"
		kernel=${kernel#vmlinuz-}
		remove_kernel "$kernel" "" "$config"
	done
fi
