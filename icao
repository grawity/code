#!/usr/bin/env python3
import argparse
import bs4
import re
import requests
import subprocess
import sys

from pprint import pprint

parser = argparse.ArgumentParser()
parser.add_argument("query", nargs="+", help="City name or ICAO code")
args = parser.parse_args()

ua = requests.Session()
ua.headers["User-Agent"] = "Mozilla/4.0 ~/bin/icao (gh://grawity)"
header = []
results = []
err = False

for query in args.query:
    # https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service
    # https://query.wikidata.org/sparql?query={SPARQL}
    # https://stackoverflow.com/questions/30501124/or-in-a-sparql-query
    # https://pypi.org/project/sparql-client/
    sparql = """
    SELECT DISTINCT ?item ?itemLabel ?iata ?icao
    WHERE
    {
        # instance of = airport
        ?item wdt:P31 wd:Q1248784.
        {
            ?item ?label "%(query)s"@en.
        }
        UNION
        {
            # IATA code or ICAO code = "VNO"
            ?item wdt:P238|wdt:P239 "%(query)s".
        }
        ?item wdt:P238 ?iata.
        ?item wdt:P239 ?icao.
        SERVICE wikibase:label { bd:serviceParam wikibase:language "[AUTO_LANGUAGE],mul,en". }
    }
    """ % {"query": query}
    resp = ua.get("https://query.wikidata.org/sparql",
                  params={"query": sparql},
                  headers={"Accept": "application/sparql-results+json"})
    resp.raise_for_status()
    #print(resp)
    #pprint(resp.json())
    data = resp.json()
    for result in data["results"]["bindings"]:
        pprint(result)
    break
    if len(query) == 3:
        form = {"iataapt": query}
    elif len(query) == 4:
        form = {"icaoapt": query}
    else:
        form = {"locname": query}
    resp = ua.post("https://www.avcodes.co.uk/aptcoderes.asp",
                   data=form)
    resp.raise_for_status()
    page = bs4.BeautifulSoup(resp.content, "lxml")
    for result in page.select("main.form-result table.table-sm"):
        r = {}
        for cell in result.select("td"):
            cell = cell.get_text(strip=True)
            if x := re.match("^(.+?): *(.+)$", cell):
                r[x[1]] = x[2]
            if not re.match(r"URL|.*:/?$", cell):
                print(cell)
        #pprint(r)
        print("-"*80)

cmd = ["column",
       "--table",
       "--separator=\t",
       "--table-columns=%s" % ",".join(header).upper()]
with subprocess.Popen(cmd, stdin=subprocess.PIPE) as proc:
    for row in results:
        proc.stdin.write("\t".join(row).encode() + b"\n")
    proc.stdin.close()

exit(err)

