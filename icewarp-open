#!/usr/bin/env python3
import argparse
import os
import subprocess
import sys
import time
from nullroute.core import *
import nullroute.sec

def run(*args):
    args = list(args)
    Core.debug("running %r" % args)
    try:
        os.execvp(args[0], args)
    except Exception as e:
        Core.die("could not run %r: %r" % (args[0], e))

def get_password(server, user):
    try:
        creds = nullroute.sec.get_netrc(server, user)
        return creds["password"]
    except KeyError:
        pass

    with subprocess.Popen(["icewarp-get-pass", user],
                          stdout=subprocess.PIPE) as proc:
        out = proc.stdout.read().decode("utf-8")
        out = out.split("\n")[0]
        user, passwd = out.split(" ", 1)
        if passwd == "*":
            Core.die("could not retrieve password for administrator")
        elif passwd == "(no account)":
            Core.die("could not retrieve password for nonexistent account")
        else:
            return passwd

def update_pine_passfile(data):
    import nullroute.sec.pine
    pf = nullroute.sec.pine.Passfile()
    if not pf.get(data["server"], data["user"], True):
        pf.add(data["server"], data["user"], data["pass"], True)
        pf.save()

parser = argparse.ArgumentParser()
parser.add_argument("mailbox", metavar="MAILBOX", type=str,
                    help="mailbox to open")
parser.add_argument("--archive", action="store_true",
                    help="open the archive mailbox for this account")
parser.add_argument("--pop", action="store_true",
                    help="use POP3 instead of IMAP4")
parser.add_argument("--list", action="store_true",
                    help="list mailboxes within an account")
parser.add_argument("--dedup", action="store_true")
parser.add_argument("--pine", action="store_true")
parser.add_argument("--rw", action="store_true",
                    help="allow write operations (incl. dedup)")
parser.add_argument("--verbose", action="store_true")
args = parser.parse_args()

if args.list:
    app = "list"
elif args.dedup:
    app = "IMAPdedup"
elif args.pine:
    app = "pine"
else:
    app = "mutt"

data = {
    "scheme": "pop" if args.pop else "imap",
    "server": "mail.utenos-kolegija.lt",
}

if args.archive:
    domain = "utenos-kolegija.lt"
    alias = args.mailbox
    path = time.strftime("%Y")
    if "/" in alias:
        alias, path = alias.split("/", 1)
    if "@" in alias:
        alias, domain = alias.split("@")
    data["user"] = "archivist"
    data["path"] = "%s/%s/%s" % (domain, alias, path)
elif "/" in args.mailbox:
    data["user"], data["path"] = args.mailbox.split("/", 1)
    if data["path"] == "INBOX":
        data["path"] = ""
else:
    data["user"] = args.mailbox
    data["path"] = ""

data["pass"] = get_password("%(scheme)s/%(server)s" % data, data["user"])

if app == "mutt":
    uri = "%(scheme)s://%(user)s:%(pass)s@%(server)s/%(path)s" % data
    cmd = ["mutt",
           "-f", uri]
    if not args.rw:
        cmd += ["-R"]
    run(*cmd)
elif app == "pine":
    uri = "{%(server)s/%(scheme)s/tls/user=%(user)s}%(path)s" % data
    cmd = ["alpine",
           "-f", uri,
           "-i"]
    if not args.rw:
        cmd += ["-o"]
    update_pine_passfile(data)
    run(*cmd)
elif app == "IMAPdedup":
    cmd = ["python2", "/home/grawity/src/net/IMAPdedup/imapdedup.py",
           "--server=%s" % data["server"],
           "--ssl",
           "--user=%s" % data["user"],
           "--password=%s" % data["pass"],
           "--checksum",
           "--checksum-with-id",
           "--no-close"]
    if args.verbose:
        cmd += ["--verbose"]
    if not args.rw:
        cmd += ["--dry-run"]
    cmd += [data["path"] or "INBOX"]
    run(*cmd)
elif app == "list":
    cmd = ["python2", "/home/grawity/src/net/IMAPdedup/imapdedup.py",
           "--server=%s" % data["server"],
           "--ssl",
           "--user=%s" % data["user"],
           "--password=%s" % data["pass"],
           "--list"]
    Core.debug("running %r" % cmd)
    with subprocess.Popen(cmd, stdout=subprocess.PIPE) as proc:
        with subprocess.Popen(["treeify", "-f"], stdin=subprocess.PIPE) as proc2:
            for line in proc.stdout:
                proc2.stdin.write(line.replace(b"+", b"+-").replace(b"&", b"+").decode("utf-7").encode("utf-8"))
