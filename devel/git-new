#!/usr/bin/env bash
# git-new - show new commits in a branch, based on the reflog

. lib.bash || exit

usage() {
	echo "Usage: $0 [options] [DIR [REF]]"
	echo ""
	echo_opt "-b REF" "show new commits in a different branch"
	echo_opt "-C DIR" "change to specified directory"
	echo_opt "-M" "add --no-merges to configuration"
	echo_opt "-P" "add *.po exclusion"
	echo_opt "-G" "add .github exclusion"
}

opt_no_merges=0
opt_no_po=0
opt_no_github=0
opt_chdir=
opt_ref=

while getopts ':b:C:GMP' OPT; do
	case $OPT in
	b) opt_ref=$OPTARG;;
	C) opt_chdir=$OPTARG;;
	M) opt_no_merges=1;;
	P) opt_no_po=1;;
	G) opt_no_github=1;;
	*) lib:die_getopts;;
	esac
done; shift $((OPTIND-1))

if [[ ! $opt_chdir && ! -d .git && -d $1 ]]; then
	opt_chdir=$1; shift
fi

if [[ ! $opt_ref ]]; then
	opt_ref=${1:-HEAD}; shift
fi

if (( $# )); then
	die "too many arguments: ${*@Q}"
fi

if [[ $opt_chdir ]]; then
	cd "$opt_chdir" || exit
fi

if [[ $PWD == $HOME/src/* ]]; then
	dir=$(git rev-parse --git-dir) || exit
	fetch=$(git config --get-all remote.origin.fetch)
	if [[ "$fetch" == "+refs/*:refs/*" ]]; then
		warn "refspec '$fetch' may allow tag deletion"
		fetch="+refs/heads/*:refs/heads/*"
		if confirm "change to '$fetch'?"; then
			git config --unset-all remote.origin.fetch
			git config --unset-all remote.origin.mirror
			git config remote.origin.fetch "$fetch"
			git for-each-ref --format="%(refname)" |
			grep -E -v '^refs/(heads|notes|tags)/' | {
				declare refs=()
				while read -r ref; do
					echo "found junk ref '$ref'"
					refs+=("$ref")
				done
				if (( ${#refs[@]} )) && confirm "purge refs?"; then
					for ref in "${refs[@]}"; do
						git update-ref -d "$ref"
					done
				fi
			}
		fi
	elif [[ ! "$fetch" ]] && [[ "$(git config --get remote.origin.url)" ]]; then
		fetch="+refs/heads/*:refs/heads/*"
		warn "refspec not set; changing to '$fetch'"
		git config remote.origin.fetch "$fetch"
	fi
	for remote in $(git remote); do
		url_raw=$(git config --get remote.$remote.url)
		url_new=$(git remote get-url $remote)
		if [[ "$url_new" == @(git|http)://* ]]; then
			warn "remote '$remote' uses insecure protocol: $url_new"
		elif [[ "$url_raw" == @(git|http)://* ]]; then
			notice "remote '$remote' relies on URL rewriting: $url_raw"
			if confirm "change permanently to '$url_new'?"; then
				git remote set-url $remote "$url_new"
			fi
		fi
	done
	#rdempty --quiet "$dir" &

	if [[ "$(git symbolic-ref HEAD)" == refs/heads/master ]] &&
	   git rev-parse --verify refs/remotes/origin/main >&/dev/null &&
	   notice "querying remote branches" &&
	   ! [[ "$(git ls-remote origin refs/heads/master)" ]] &&
	   confirm "switch 'master' branch to 'main'?"; then
		#git branch -m main
		#git branch -u origin/main
		#git remote set-head origin --auto
		git fix-main
		git pull --ff-only
		exec "$0" "$@"
	fi
fi

if (( opt_no_merges )); then
	git config --add nullroute.git-new.options "--no-merges" || exit
fi
if (( opt_no_po )); then
	git config --add nullroute.git-new.paths ":!**.po" || exit
fi
if (( opt_no_github )); then
	git config --add nullroute.git-new.paths ":!.github/" || exit
fi

opts=$(git config --get-all nullroute.git-new.options || true)
paths=$(git config --get-all nullroute.git-new.paths || true)

if [[ -t 1 ]] && which tig >/dev/null 2>&1; then
	cmd='tig'
else
	cmd='git lg'
fi

ref=$opt_ref

if [[ $ref != HEAD ]]; then
	# explicit check is faster than letting tig do it
	if ! git rev-parse --verify "$ref" >/dev/null 2>&1; then
		echo "error: bad ref '$ref'" >&2
		exit 1
	fi
fi

settitle "git new [${PWD/#"$HOME/"/"~/"}]"

exec $cmd $opts "^$ref@{1}" "$ref" "${@:2}" -- $paths
