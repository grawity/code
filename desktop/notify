#!/usr/bin/env perl
# notify - libnotify command-line interface not entirely unlike 'notify-send'
use warnings;
no if $] >= 5.017011, warnings => qw(experimental::smartmatch);
use strict;
use feature qw(say switch);
use File::Path qw(make_path);
use Getopt::Long qw(:config no_ignore_case bundling);
use Net::DBus;
use Net::DBus::Reactor;
use Nullroute::Dir;
use Nullroute::Lib qw(_warn _err _die);

my $bus = Net::DBus->session;

sub Notifications {
	$bus
	->get_service("org.freedesktop.Notifications")
	->get_object("/org/freedesktop/Notifications")
}

sub usage {
	say for
	"Usage: $::arg0 [options] <title> [body]",
	"",                       #
	"Metadata:",
	"",
	"  -a, --app-name=NAME    Specify application name",
	"  -c, --category=TYPE…   Add the notification category hint",
	"  -h, --hint=HINT[=VAL]  Add a custom hint (see below)",
	"  -i, --icon=NAME        Specify notification icon",
	"  -n, --action=KEY:NAME  Add an action (implies --wait)",
	"  -t, --timeout=TIME     Specify timeout ('XXs' or 'XXms')",
	"  -u, --urgency=LEVEL    Add an urgency hint (low, normal, high)",
	"",
	"Hints:",
	"",
	"  resident               Keep notification when dismissed [GNOME Shell]",
	"  transient              Automatically dismiss notification [GNOME Shell]",
	"  synchronous            Immediately show on separate stack [notify-osd]",
	"  urgency=LEVEL          Set notification urgency (low, normal, high)",
	"  value=[0-100]          Show level gauge with given value [notify-osd]",
	"                         (normally used together with 'synchronous')",
	"",
	"  icon-only              Show large icon with no text [notify-osd]",
	"  image-path=PATH        ???",
	"  desktop-entry=NAME     ???",
	"  category=TYPE[,TYPE…]  Specify notification category",
	"",
	"  bool:HINT={0|1}        Custom hint (D-Bus boolean)",
	"  byte:HINT=[0-255]      Custom hint (D-Bus byte)",
	"  int32:HINT=[int]       Custom hint (D-Bus int32)",
	"  str:HINT=VALUE         Custom hint (D-Bus string)",
	"",
	"Other behavior:",
	"",
	"  -A, --append           Append body text",
	"  -r, --replace=ID       Replace old notification with given ID",
	"  -s, --state=NAME       Keep persistent state under given name",
	"  -w, --wait             Listen for 'closed' & 'action' signals for 30s",
}

my $statedir	= xdg_cache("nullroute.eu.org/notify");

my $icon	= "";
my $id		= 0;
my $summary	= "";
my $body	= "";
my @actions	= ();
my @hints	= ();
my %hints	= ();
my $application	= "notify";
my $timeout	= -1;
my $statefile	= undef;
my $oldbody	= "";
my $appendbody	= 0;
my $wait	= 0;

my $reactor	= undef;

sub add_bool_hint { push @hints, $_[0]; }
sub add_str_hint  { push @hints, $_[0]."=".$_[1]; }

GetOptions(
	'help'		=> sub { usage(); exit; },
	'a|app-name=s'	=> \$application,
	'A|append'	=> \$appendbody,
	'c|category=s'	=> sub { push @hints, "category=".$_[1] },
	'h|hint=s'	=> \@hints,
	'i|icon=s'	=> \$icon,
	'n|action=s'	=> \@actions,
	'r|replace=i'	=> \$id,
	's|state=s'	=> \$statefile,
	't|timeout=s'	=> \$timeout,
	'u|urgency=s'	=> sub { push @hints, "urgency=".$_[1] },
	'W|wait'	=> \$wait,
	# well-known hints
	'desktop-entry=s'	=> \&add_str_hint,
	'icon-only'		=> \&add_bool_hint,
	'image-path=s'		=> \&add_str_hint,
	'resident'		=> \&add_bool_hint,
	'synchronous'		=> sub { push @hints, $_[0]."=" },
	'transient'		=> \&add_bool_hint,
) or exit 2;

if (!@ARGV) {
	_die("missing notification summary", 2);
}

$summary = shift(@ARGV);
$body = join(" ", @ARGV);

if (defined $statefile) {
	if ($statefile =~ s!^\+!! || $statefile !~ m!/!) {
		$statefile = $statedir."/".$statefile;
		make_path($statedir) if !-d $statedir;
	}
	if (!$id) {
		if (open(my $fh, "<", $statefile)) {
			$id = int <$fh>;
			chomp($oldbody = join("", <$fh>));
			close($fh);
		}
	}
}

if ($appendbody) {
	if (!defined $statefile) {
		_warn("--append is useless without state file");
	}
	$body = join("\n", grep {length} ($oldbody, $body));
}

@actions = map {
	my ($k, $v) = split(/:/, $_, 2);
	if (!length($k)) {
		_die("missing action ID for '$_'");
	}
	if (!length($v)) {
		_warn("no descriptive text for action '$k'");
		$v = $k;
	}
	($k, $v);
} @actions;

for (@hints) {
	when (/^(urgency)=(.*)$/) {
		my ($key, $val) = ($1, $2);
		for ($val) {
			$val = 0 when ["0", "low"];
			$val = 1 when ["1", "normal"];
			$val = 2 when ["2", "high", "critical"];
			default {
				_die("invalid urgency level '$_'", 2);
			}
		}
		$hints{$key} = Net::DBus::dbus_byte($val);
	}
	when (/^(desktop-entry)=(.*)$/) {
		my ($key, $val) = ($1, $2);
		# TODO: did I get this right?
		if ($val =~ m!/!) {
			_die("'$key' cannot have paths");
		}
		elsif ($val =~ /\.desktop$/) {
			_warn("'$key' should not have a file extension");
		}
		$hints{$key} = $val;
	}
	when (/^(category|image-path)=(.*)$/) {
		$hints{$1} = Net::DBus::dbus_string($2);
	}
	when (/^(resident|transient)$/) {
		$hints{$1} = Net::DBus::dbus_boolean(1);
	}
	when (/^(icon-only|synchronous)$/) {
		$hints{"x-canonical-private-$1"} =
		$hints{$1} = Net::DBus::dbus_string("");
	}
	when (/^(privacy-scope)=(system|user)$/) {
		$hints{"x-gnome-$1"} = Net::DBus::dbus_string($2);
	}
	when (/^(value)=(.*)$/) {
		$hints{$1} = Net::DBus::dbus_int32($2);
	}
	when (/^bool:([^=]+)=(.*)$/) {
		$hints{$1} = Net::DBus::dbus_boolean($2);
	}
	when (/^byte:([^=]+)=(.*)$/) {
		$hints{$1} = Net::DBus::dbus_byte($2);
	}
	when (/^int32:([^=]+)=(.*)$/) {
		$hints{$1} = Net::DBus::dbus_int32($2);
	}
	when (/^str:([^=]+)=(.*)$/) {
		$hints{$1} = Net::DBus::dbus_string($2);
	}
	default {
		_die("invalid hint parameter '$_'", 2);
	}
}

for ($timeout) {
	when (-1) {
		;
	}
	when (/^(\d+)s?$/) {
		$timeout = $1 * 1_000;
	}
	when (/^(\d+)ms$/) {
		$timeout = $1;
	}
	default {
		_die("invalid timeout value '$_'", 2);
	}
}

if (@actions || $wait) {
	$reactor = Net::DBus::Reactor->main;

	Notifications->connect_to_signal("NotificationClosed" => sub {
		my ($to_id, $reason) = @_;
		say "closed $to_id $reason";
		$reactor->shutdown();
	});
	Notifications->connect_to_signal("ActionInvoked" => sub {
		my ($to_id, $action_key) = @_;
		say "action $to_id $action_key";
		$reactor->shutdown();
	});
}

$id = Notifications->Notify($application,
                            $id,
                            $icon,
                            $summary,
                            $body,
                            \@actions,
                            \%hints,
                            $timeout);

if (defined $statefile) {
	if (open(my $fh, ">", $statefile)) {
		say $fh $id;
		say $fh $body;
		close($fh);
	} else {
		_die("cannot update state: $!");
	}
} else {
	say $id;
}

if (@actions || $wait) {
	$reactor->add_timeout(30*1_000, sub {
		say "timeout";
		$reactor->shutdown();
	}, 1);
	$reactor->run();
}
