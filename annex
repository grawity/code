#!/usr/bin/env bash

. lib.bash || exit

is_annex() { git rev-parse refs/heads/git-annex >&/dev/null; }
is_annex!() { is_annex || die "not a git-annex repository"; }

case $1 in
    lswanted|lsget|missing)
        exec git annex find --want-get --not --in .
        ;;
    lsunwanted|lsdrop)
        exec git annex find --want-drop --in .
        ;;
    diff)
        is_annex!
        git annex find --want-get --not --in . | sed $'s/.*/\e[;32mwant\e[m &/'
        git annex find --want-drop --in . | sed $'s/.*/\e[;31mdrop\e[m &/'
        ;;
    examine)
        is_annex!
        shift
        if (( ! $# )); then
            exec 2>/dev/null
            set -- uuid.log group.log trust.log preferred-content.log
        fi
        for arg; do
            if [[ $arg != */* && $arg != *.* ]]; then
                arg+=".log"
            fi
            if (( $# > 1 )); then
                echo -e "\e[1m--- $arg ---\e[m"
            fi
            git show "git-annex:$arg"
        done
        ;;
    log-format)
        perl -E '
            use List::MoreUtils qw(uniq);
            while (<>) {
                chomp;
                my ($key, $value, $time) = /^(\S+) (.*) timestamp=([0-9.]+)s$/;
                if (!$items{$key}) {
                    push @items, $key;
                    $items{$key} //= [];
                }
                push @{$items{$key}}, [$time, $value, $_];
            }
            for my $key (@items) {
                say "$key";
                say " - $_" for uniq
                                grep {/./}
                                map {$_->[1]}
                                sort {$a->[0] <=> $b->[0]}
                                @{$items{$key}};
            }
        '
        ;;
    *)
        exec git annex "$@"
        ;;
esac

# vim: ts=4:sw=4:et
