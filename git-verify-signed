#!/usr/bin/env python
import sys
import subprocess

class GitMetaObject():
    def __init__(self, oid, otype, data):
        self.oid = oid
        self.type = otype
        self.data = data
        self.headers = []
        self.body = b""
        self.signature = None

        if data:
            self._parse()

    def _parse(self):
        cur_head = True
        cur_key = None
        cur_value = None
        # XXX: this should use keepends=True, to preserve the occassional lack
        # of trailing \n
        for line in self.data.splitlines():
            if cur_head:
                if len(line) == 0:
                    if cur_key and cur_value:
                        self.headers.append((cur_key, cur_value))
                        if cur_key == b"gpgsig":
                            self.signature = cur_value
                    cur_head = False
                elif line.startswith(b" "):
                    cur_value += b"\n" + line[1:]
                else:
                    if cur_key and cur_value:
                        self.headers.append((cur_key, cur_value))
                        if cur_key == b"gpgsig":
                            self.signature = cur_value
                    cur_key, cur_value = line.split(b" ", 1)
            else:
                self.body += line + b"\n"

    def unparse(self, skip_sig=False):
        buf = b""
        for k, v in self.headers:
            if skip_sig and k == b"gpgsig":
                continue
            buf += k
            for l in v.splitlines():
                buf += b" " + l + b"\n"
        buf += b"\n"
        buf += self.body
        return buf

    def get_signature(self):
        for k, v in self.headers:
            if k == b"gpgsig":
                return v

def get_deref_object(oid):
    r = subprocess.run(["git", "rev-parse", "--verify", oid],
                       stdout=subprocess.PIPE)
    return r.stdout.strip().decode()

def get_object_type(oid):
    r = subprocess.run(["git", "cat-file", "-t", oid],
                       stdout=subprocess.PIPE)
    return r.stdout.strip().decode()

def get_object_data(oid, otype=None):
    r = subprocess.run(["git", "cat-file", otype or "-p", oid],
                       stdout=subprocess.PIPE)
    return r.stdout

for oid in sys.argv[1:]:
    oid = get_deref_object(oid)
    otype = get_object_type(oid)
    print(oid, otype)
    if otype == "commit":
        buf = get_object_data(oid, otype)
        obj = GitMetaObject(oid, otype, buf)
        sig_data = obj.get_signature()
        raw_data = obj.unparse(skip_sig=True)
        if sig_data is None:
            print("not signed!")
        else:
            print("-- sig --")
            print(sig_data.decode())
            print("-- raw --")
            print(raw_data.decode())
            f_signature = "%s.sig" % oid
            f_unsigned = "%s.unsigned" % oid
            with open(f_signature, "wb") as fh:
                fh.write(sig_data)
                fh.write(b"\n")
            with open(f_unsigned, "wb") as fh:
                fh.write(raw_data)
            subprocess.call(["pgpdump", f_signature])
            subprocess.call(["gpg", "--list-packets", f_signature])
            subprocess.call(["gpg", "--verify", f_signature, f_unsigned])
