#!/usr/bin/env bash
# on, @ -- Run commands on another host
#
# This is like 'ssh -t <host>', but preserves the current directory.
#
#   - If called as '@' or '@foo', it will just preserve cwd exactly, i.e.
#     remote commands will act on remote files.
#     (For example, 'cd ~/Dropbox; @ ember wget ...')
#
#   - If called as 'on' or '@@', it will try to access the *local* cwd via NFS,
#     i.e. remote commands will still act on local files.
#     (For example, 'cd ~src/systemd; on buildbox ninja')
#
# Accepts '@foo' symlinks (hostname in argv[0]) like ssh/rsh.
#
# Kind of inspired by the SunOS /tmp story from:
# https://www-uxsup.csx.cam.ac.uk/misc/horror.txt
#
# Apparently the 'on' command did indeed exist:
# http://www.bitsavers.org/pdf/sun/sunos/3.4/800-1295-04A_Commands_Reference_Manual_198609.pdf#page=290

. lib.bash || exit

usage() {
	echo "Usage: @ <host> [-KNSnv] [-d <path>] [<command>]"
	echo "       on <host> [-KNSnv] [-d <path>] [<command>]"
	echo
	echo "Run an interactive shell or command on the specified host, preserving"
	echo "the current working directory. When invoked as '@' will use the remote"
	echo "equivalent of the local path; when invoked as 'on' or '@@' will access"
	echo "the local directory via NFS."
	echo
	echo_opt "-N"		"access remote current directory (default for '@')"
	echo_opt "-n"		"access local current directory via NFS (default for 'on')"
	echo_opt "-d <path>"	"access specified remote directory ('-d.' is home directory)"
	echo_opt "-K"		"allow Kerberos ticket delegation, disable SSH multiplexing"
	echo_opt "-S"		"connect as superuser (root)"
	echo_opt "-v"		"verbose (display remote host and path)"
	echo
	echo "The program may also be invoked through symlinks for specific hosts:"
	echo
	echo_opt "<host>"	"do not preserve cwd"
	echo_opt "@<host>"	"like '@ <host>' (the -N option)"
	echo_opt "@@<host>"	"like 'on <host>' (the -n option)"
}

arg0=${0##*/}
wd=$PWD
nfs=0
user=""
Kflag=""
qflag="-q"
verbose=0

if [[ $1 == --help ]]; then
	usage; exit
elif [[ $arg0 == '@@'?* ]]; then
	host=${arg0#@@}
	nfs=1
elif [[ $arg0 == @('@@'|'on') && $1 == [!-]* ]]; then
	host=$1; shift
	nfs=1
elif [[ $arg0 == '@'?* ]]; then
	host=${arg0#@}
elif [[ $arg0 == '@' && $1 == [!-]* ]]; then
	host=$1; shift
elif [[ $arg0 != @('@'|'@@'|'on') ]]; then
	host=$arg0
	wd=""
else
	host=""
fi

while getopts ":d:KNnSv" OPT; do
	case $OPT in
	d) nfs=0; wd=$OPTARG;;
	K) Kflag="-K -Snone";;
	N) nfs=0;;
	n) nfs=1;;
	S) user="root@";;
	v) verbose=1;;
	*) lib::die_getopts;;
	esac
done; shift $((OPTIND-1))

if [[ ! $host ]]; then
	host=$1; shift
	if [[ ! $host ]]; then
		die "host not specified"
	fi
fi

if ! klist -s; then
	warn "Kerberos tickets not available"
	qflag=""
fi

if (( nfs )); then
	if [[ $wd == /net/* ]]; then
		# Already on NFS mount -- don't stack another one; assume the
		# mount is directly accessible from target. But trim loopback
		# paths in case we're already on an NFS mount from the target
		# system.
		wd=${wd/#"/net/$host/"/"/"}
	else
		# We're on a local filesystem. Convert it to an NFS path.
		wd="/net/$HOSTNAME$wd"
		if [[ ! -e /proc/fs/nfsd/versions ]]; then
			die "NFS service not running on $HOSTNAME"
		fi
	fi
else
	# If already on NFS mount from the target system, trim loopback paths
	# (e.g. "cd /net/ember/home; @ ember foo" will use just /home). The
	# target ought to have a loopback symlink, but it's cleaner to trim it.
	wd=${wd/#"/net/$host/"/"/"}
fi

if (( verbose )); then
	info "Running in $host:${wd:-~}"
fi

if [[ $wd ]]; then
	q_wd=${wd@Q}
else
	q_wd=""
fi

# 0 args - run a shell
# 1 arg - use as raw command line
# 2+ args - quote individual args

if (( $# == 0 )); then
	q_cmd=bash
elif (( $# == 1 )) && [[ $1 == *\ * ]]; then
	q_cmd=$1
else
	q_cmd=${@@Q}
fi

if [[ -t 0 && -t 1 && -t 2 ]]; then
	tflag="-t"
else
	tflag=""
fi

exec ssh $Kflag $qflag $tflag "$user$host" \
	"export SILENT=1;
	if [ -e /etc/profile ]; then . /etc/profile; fi;
	if [ -e ~/.profile ]; then . ~/.profile; fi;
	cd $q_wd && ($q_cmd)"
