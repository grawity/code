#!/usr/bin/env python3
# setptr -- change rDNS PTR records using DNS UPDATE
#
# setptr is address-oriented (the user must manually specify an IP address and
# its desired name pointer), while setreverse is host-oriented (automatically
# looks up and updates PTR for all IP addresses of a given hostname).
import argparse
import dns.name
import dns.resolver
import ipaddress
import subprocess

def nsupdate(zone, rname, target, ttl):
    print(f"Updating zone \"{zone}\"")

    nsupdate_args = ["nsupdate"]
    if args.debug:
        nsupdate_args += ["-d"]
    if args.gss:
        nsupdate_args += ["-g"]

    if str(target) == ".":
        print(f"Removing PTR for [{address}]")
        cmds = [f"zone {zone}\n",
                f"del {rname} {ttl} PTR\n",
                f"send\n"]
    else:
        print(f"Changing PTR for [{address}] to \"{target}\"")
        cmds = [f"zone {zone}\n",
                f"del {rname} {ttl} PTR\n",
                f"add {rname} {ttl} PTR {target}\n",
                f"send\n"]

    subprocess.run(nsupdate_args,
                   input="".join(cmds).encode(),
                   check=True)

parser = argparse.ArgumentParser()
parser.add_argument("-z", "--zone",
                    help="override automatically determined rDNS zone")
parser.add_argument("-t", "--ttl", type=int, default=3600,
                    help="set the TTL for created records")
parser.add_argument("-g", "--gss", action="store_true",
                    help="use Kerberos authentication via GSS-TSIG")
parser.add_argument("-d", "--debug", action="store_true",
                    help="enable nsupdate debugging")
parser.add_argument("address",
                    help="IP address to update the PTR for")
parser.add_argument("target",
                    help="PTR target domain name, or \".\" to remove")
args = parser.parse_args()

address = ipaddress.ip_address(args.address)
target = dns.name.from_text(args.target)

rname = dns.name.from_text(address.reverse_pointer)
if args.zone:
    zone = dns.name.from_text(args.zone)
else:
    # Detect IPv4 classless delegations
    try:
        ans = dns.resolver.resolve(rname, "CNAME")
    except dns.resolver.NoAnswer:
        pass
    else:
        rname = ans.rrset[0].target

    zone = dns.resolver.zone_for_name(rname)

nsupdate(zone, rname, target, args.ttl)
