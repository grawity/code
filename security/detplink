#!/usr/bin/env python3
# decrypt TP-Link config.bin files
#
# based on <http://teknoraver.net/software/hacks/tplink/>
# also <https://github.com/Hell0wor1d/tp-link-decryptor>
# also <https://gist.github.com/NikitaKarnauhov/5d9129f13e7b0e257cfbe93215751c7a>
# also `openssl enc -d -des-ecb -nopad -K 478DA50BF9E3D2CF -in config.bin`

import argparse
import sys
from Crypto.Cipher import DES
from Crypto.Hash import MD5

key = b"\x47\x8D\xA5\x0B\xF9\xE3\xD2\xCF"

def tplink_decrypt(buf):
    buf = DES.new(key, DES.MODE_ECB).decrypt(buf).rstrip(b"\0")
    if MD5.new(buf[16:]).digest() != buf[:16]:
        raise ValueError("decryption failed (data/checksum mismatch)")
    return buf[16:]

def tplink_encrypt(buf):
    buf = MD5.new(buf).digest() + buf
    buf += b"\0" * (8 - (len(buf) % 8))
    buf = DES.new(key, DES.MODE_ECB).encrypt(buf)
    return buf

parser = argparse.ArgumentParser()
parser.add_argument("-e", "--encrypt", action="store_true")
parser.add_argument("config_file", nargs="*", default=["config.bin"])
args = parser.parse_args()

for file in args.config_file:
    with open(file, "rb") as fh:
        buf = fh.read()

    if args.encrypt:
        buf = tplink_encrypt(buf)
        with open("%s.bin" % file, "wb") as fh:
            fh.write(buf)
    else:
        buf = tplink_decrypt(buf)
        print(buf.decode())
