#!/usr/bin/env bash

. lib.bash     || exit
. libcred.bash || exit

_die() {
	if [[ $DISPLAY && ! -t 2 ]]; then
		zenity --error \
			--title="$progname" \
			--text="fatal: $*" &
	fi
	die "$@"
}

declare -a canonical_domains=()

if [[ -e "$path_config/rdp.conf.sh" ]]; then
	debug "loading config: '$path_config/rdp.conf.sh'"
	. "$path_config/rdp.conf.sh"
fi

arg_af=
arg_fork=0
use_rdesktop=0
arg_console=0
arg_allow_rdpsec=0
arg_cert_ignore=0
arg_cred_delegate=1
arg_ui_workarea=1
arg_grab_keyboard=1
arg_share_audio=1
arg_share_clip=1
arg_share_home=0
arg_share_media=0
arg_share_smartcard=1
arg_vm_id=

if [[ $WAYLAND_DISPLAY ]]; then
	arg_ui_workarea=0
fi

if [[ $1 != -* ]]; then
	host=$1; shift
fi

while getopts ":46aDFfRu:V:" OPT; do
	case $OPT in
	4|6) arg_af=-$OPT;;
	a) arg_console=1;;
	D) arg_ui_workarea=1;;
	F) use_rdesktop=0;;
	f) arg_fork=1;;
	R) use_rdesktop=1;;
	u) user=$OPTARG;;
	V) arg_vm_id=$OPTARG;;
	*) lib::die_getopts;;
	esac
done; shift $((OPTIND-1))

if [[ ! $host ]]; then
	host=${1#"/v:"}; shift
fi
if [[ ! $host ]]; then
	_die "missing host name"
fi
if [[ $host != *.* ]]; then
	debug "trying to canonicalize bare name '$host'"
	debug "setting LOCALDOMAIN to: '${canonical_domains[*]}'"
	host=$(LOCALDOMAIN="${canonical_domains[*]}" fqdn "$host")
fi
debug "trying to resolve '$host'"
if have name2addr; then
	addr=$(name2addr $arg_af "$host" 2>/dev/null)
else
	addr=$(getent ahosts${arg_af#-} "$host" 2>/dev/null | awk '{print $1; quit}')
fi
if [[ ! $addr ]]; then
	_die "could not resolve host '$host'"
elif [[ $addr == *:* ]]; then
	haddr="[$addr]"
else
	haddr="$addr"
fi
port=3389
for arg; do
	if [[ $arg == /port:* ]]; then
		port=${arg#/port:}
	fi
	if [[ $arg == /sec:rdp ]]; then
		arg_allow_rdpsec=1
		arg_cert_ignore=0
		arg_cred_delegate=0
	fi
done
paddr="$host ($haddr:$port)"
if have nc; then
	debug "probing TCP server $haddr:$port"
	if ! err=$(nc -v -z $arg_af "$addr" "$port" 2>&1); then
		_die "host '$host' does not accept Remote Desktop connections"
	fi
else
	warn "'nc' not available, skipping probe"
fi
info "connecting to ${host@Q}"

if (( use_rdesktop )); then
	export KRB5CCNAME=MEMORY:
	if [[ $DISPLAY ]]; then
		args=(rdesktop)
	else
		die "no graphical display available"
	fi
	args+=(
		-T "Remote Desktop: $host"
		-N	# numlock sync
		-P	# persistent bitmap cache
		-z	# RDP compression
		#-x m	# experience: modem
		#-a 8	# color depth
		#-x l	# experience: LAN
		-a 24
		-x 0x80
	     )
	if (( arg_ui_workarea )); then
		args+=(-D -g workarea)
	fi
	if (( arg_share_audio )); then
		args+=(-r sound:local:libao)
	fi
	if (( arg_share_clip )); then
		args+=(-r clipboard:CLIPBOARD)
	fi
	if (( arg_share_home )); then
		args+=(-r disk:home="$HOME")
	fi
	if (( arg_share_media )); then
		args+=(-r disk:media="/run/media/$USER")
	fi
	if (( arg_share_smartcard )); then
		args+=(-r scard)
	fi
	if (( arg_console )); then
		args+=(-0)
	fi
	if [[ $arg_vm_id ]]; then
		die "rdesktop does not support Hyper-V console"
	fi
	args+=("$host" "$@")
else
	dir=~/.local/pkg/freerdp/bin
	[[ -d $dir ]] || dir=/usr/bin
	if [[ $WAYLAND_DISPLAY ]]; then
		args=($dir/wlfreerdp)
	elif [[ $DISPLAY ]]; then
		args=($dir/xfreerdp)
	else
		die "no graphical display available"
	fi
	info "running '${args[0]}'"
	if (( DEBUG )); then
		args+=(/log-level:DEBUG)
	fi
	args+=(
		/t:"Remote Desktop: $host"
		/bpp:32
		+fonts
		+aero
		+window-drag
		+wallpaper

		#/gfx:RFX
		#/gfx:AVC420
		#/gfx-h264:AVC420
		#+gfx-progressive
		#/jpeg
		#/rfx

		+auto-reconnect
		+heartbeat
	     )
	if (( !arg_grab_keyboard )); then
		args+=(-grab-keyboard)
	fi
	if (( arg_allow_rdpsec )); then
		args+=(+sec-rdp)
	else
		args+=(-sec-rdp)
	fi
	if (( arg_cert_ignore )); then
		args+=(/cert-ignore)
	else
		args+=(/cert-name:"$host")
	fi
	if (( arg_cred_delegate )); then
		args+=(+credentials-delegation)
	fi
	if (( arg_ui_workarea )); then
		args+=(-decorations /workarea)
	else
		args+=(/f +floatbar)
	fi
	if (( arg_share_audio )); then
		args+=(/sound:sys:pulse)
	fi
	if (( arg_share_clip )); then
		args+=(+clipboard)
	fi
	if (( arg_share_home )); then
		args+=(+home-drive)
	fi
	if (( arg_share_media )); then
		args+=(/drive:"media,/run/media/$USER")
	fi
	if (( arg_share_smartcard )); then
		args+=(/smartcard)
	fi
	if (( arg_console )); then
		args+=(/admin)
	fi
	if [[ $arg_vm_id ]]; then
		args+=(/vmconnect:"$arg_vm_id")
	fi
	args+=(/v:"$haddr" "$@")
fi

getcred_var "$host" "tsclient" "Remote Desktop" user pass || exit

debug "got creds: '$user' '$pass'"

if (( use_rdesktop )); then
	[[ $user ]] && args+=(-u "$user")
	[[ $pass ]] && args+=(-p "$pass")
else
	[[ $user ]] && args+=(/u:"$user")
	[[ $pass ]] && args+=(/p:"$pass")
fi

debug "running command: ${args[*]@Q}"

if "${args[@]}"; then
	exit
else
	r=$?
	n=$'\n'
	m=''
	if (( use_rdesktop )); then
		case $r in
		0|1|2|3|4|5|11|62)
			exit 0;;
		6)	m='Server is out of memory';;
		7)	m='Server denied the connection';;
		8)	m='Server denied the connection for security reasons';;
		16)	m='Internal licensing error';;
		17)	m='No license server available';;
		18)	m='No valid license available';;
		esac
	else
		case $r in
		1)	m='Disconnected by administrative tool'; r=0;;
		5)	m='Attached from elsewhere'; r=0;;
		11)	m='Disconnected by...'; r=0;;
		12)	m='Logoff?'; r=0;;
		esac
	fi
	if [[ $m && $s ]]; then
		m+="${n}stderr: ${s}"
	fi
	if [[ $m ]] && (( r > 0 )); then
		zenity --error \
			--text "Remote Desktop connection failed (${r}):${n}${n}${m}"
	fi
	exit $r
fi &

if (( ! arg_fork )); then
	wait $!
fi
