#!/usr/bin/env bash
# ssh-authz-update - authorized_keys updater tool

SRCURL="http://nullroute.eu.org/~grawity/files/authorized_keys.txt"
KEYFP="2357E10CEF4F7ED27E233AD5D24F6CB2C1B52632"
[[ $KEYSERVER ]] || KEYSERVER="hkps://keyserver.ubuntu.com"

PATH="$HOME/code/bin:$PATH"

. lib.bash || exit
. libhttpfetch.bash || exit

progname_prefix=0

usage() {
	echo "Usage: $progname [-k URI] [-rv]"
	echo ""
	echo "  -k URI    use another keyserver"
	echo "  -r        receive signing key"
	echo "  -v        verbose"
	echo ""
	echo -e "\e[1mWARNING: This script will replace your keys with grawity's!\e[m"
}

recv_key() {
	local key=$1 status=
	debug "retrieving key '$key'"
	if status=$($GPG --keyserver "$KEYSERVER" --recv-key "$key" 2>&1); then
		trace "$status"
	else
		echo "$status" >&2
		warn "failed to receive key $key from $KEYSERVER"
		return 1
	fi
}

fetch() {
	local url=$1 out=$2
	local max_tries=3 retry_wait=3 attempt=1
	while true; do
		debug "fetching $url (#$attempt)"
		if http_fetch "$url" "$out"; then
			return 0
		elif (( $? == 99 )); then
			break
		fi
		rm -f "$out"
		if (( attempt++ >= max_tries )); then
			break
		fi
		sleep $retry_wait
		(( retry_wait *= 2 ))
	done
	return 1
}

verify() {
	local input=$1 output=$2 status= errors=0
	debug "verifying '$input' to '$output'"
	if status=$($GPG --batch --yes --status-fd 1 --output "$output" \
	                 --trust-model pgp --decrypt "$input" 2> /dev/null); then
		if ! egrep -qs "^\\[GNUPG:\\] VALIDSIG $KEYFP " <<< "$status"; then
			err "file has invalid signature"
		fi
		if ! egrep -qs "^\\[GNUPG:\\] TRUST_ULTIMATE( 0 .+)?\$" <<< "$status"; then
			err "signer's key is not ultimately trusted"
		fi
		if (( errors )); then
			echo "$status" >&2
			return 1
		else
			trace "$status"
			return 0
		fi
	else
		err "unknown GnuPG error occured"
		echo "$status" >&2
		return 1
	fi
}

import=false
file="$HOME/.ssh/authorized_keys"

while getopts ":krv" OPT; do
	case $OPT in
	k) KEYSERVER=$OPTARG;;
	r) import=true;;
	v) VERBOSE=true;;
	*) die_getopts;;
	esac
done

umask 077

if [ -e ~/.ssh/authorized_keys.optout ]; then
	die "found opt-out marker"
fi

# find the tool

if have gpg2; then
	GPG=gpg2
elif have gpg; then
	GPG=gpg
else
	die "'gpg' not found in \$PATH"
fi

# ensure key exists in keyring

if $import; then
	VERBOSE=true recv_key "$KEYFP" && {
		log "imported owner's key into keyring"
		if confirm "mark this key as ultimately trusted?"; then
			(echo "$KEYFP:6:" | $GPG --import-ownertrust) &&
			log "key's ownertrust updated"
		else
			err "only ultimately trusted keys are accepted"
		fi
	} || exit
elif ! $GPG --list-keys "$KEYFP" > /dev/null; then
	die "key $KEYFP not found in keyring"
fi

# download new pubkeys

mkdir -p "${file%/*}"

tmp_signed=$(mktemp "$file.XXXXXXXX")

if ! fetch "$SRCURL" "$tmp_signed"; then
	rm -f "$tmp_signed"
	die "fetch of $SRCURL failed"
elif ! test -s "$tmp_signed"; then
	rm -f "$tmp_signed"
	die "empty file fetched from $SRCURL"
fi

tmp_plain=$(mktemp "$file.XXXXXXXX")

if ! verify "$tmp_signed" "$tmp_plain"; then
	rm -f "$tmp_plain"
	die "verification of $tmp_signed failed"
fi

{ echo "# updated: at $(date +"%Y-%m-%d %H:%M:%S %z")"
  echo "# updated: from $SRCURL"
  cat "$tmp_plain"
  if [ -s "$file.local" ]; then
	echo "# updated: from $file.local"
	cat "$file.local"
  fi
  echo "# updated: end"
} > "$file"

rm -f "$tmp_plain" "$tmp_signed"

if [[ -t 1 ]]; then
	num=$(grep -c '^[^#]' "$file")
	log "imported $num authorized keys"
fi
