#!/usr/bin/env python3
import enum
from glob import glob
import os
import time

class Color(enum.IntEnum):
    Red = 1
    Green = 2
    Yellow = 3
    Blue = 4

def read(path):
    return open(path, "r").read().strip()

def get_loadavg():
    with open("/proc/loadavg", "r") as fh:
        a, b, c, *_ = fh.read().split()
    return float(a), float(b), float(c)

def put_bar(color, width, char):
    bar = ""
    if width <= 0:
        return
    if color:
        bar += "\033[38;5;%dm" % color
    if len(char) == 2:
        bar += char[0] * (width-1) + char[1]
    else:
        bar += char[0] * width
    if color:
        bar += "\033[m"
    print(bar, end="")

def draw_bar(ts, color, width, temp, load):
    global count, depth, roll
    avg = roll/depth if count>depth else temp
    if avg > 79:
        color += Color.Red
    elif avg >= 63:
        color += Color.Yellow
    elif avg > 43:
        color += Color.Green
    else:
        color += Color.Blue

    width = int(temp) - 20
    print(time.strftime("%T ", time.localtime(ts)), end="")
    char = "█"
    if color < 8:
	    # color += 8
	    # char = "▓"
	    char = "-║"
    put_bar(color, width, char)
    print(" %3d°C" % temp, end="")
    #if color >= 8:
    #    print(" [%3d°C]" % avg)
    if load:
        print("  \033[2m%s\033[m" % load, end="")
    print(flush=True)

def rsuffix(string, old, new):
    if string.endswith(old):
        return string[:-len(old)] + str(new)
    return string

def find_hwmon_by_name(name):
    for dev in glob("/sys/class/hwmon/hwmon*"):
        if os.path.exists("%s/name" % dev):
            dev_name = read("%s/name" % dev)
            if dev_name == "coretemp":
                return dev
    raise Exception("no %r hwmon device found" % name)

def find_sensor():
    dev = find_hwmon_by_name("coretemp")

    subdev = None
    subdev_pkg = None
    subdev_cr0 = None
    for path_label in glob("%s/temp*_label" % dev):
        path_input = rsuffix(path_label, "_label", "_input")
        label = read(path_label)
        if label == "Package id 0":
            subdev_pkg = path_input
        elif label == "Core 0":
            subdev_cr0 = path_input
    if subdev_pkg:
        subdev = subdev_pkg
    elif subdev_cr0:
        subdev = subdev_cr0
    else:
        raise Exception("no 'coretemp/Core 0' hwmon sensor found")

    dev_name = read("%s/name" % dev)
    subdev_name = read(rsuffix(subdev, "_input", "_label"))
    print("Using sensor %r (%s:%s)" % (subdev, dev_name, subdev_name))

    return subdev

subdev = find_sensor()
interval = 1
last_temp = 0
last_load = ""
count = 0
roll = 0
depth = 3
hist = [0] * depth

try:
    while True:
        if last_temp:
            time.sleep(interval)
        ts = time.time() - 1
        if last_temp:
            print("\033[A", end="")
            draw_bar(ts-1, 0, last_temp-20, last_temp, last_load)
        temp = read(subdev)
        temp = int(temp) / 1000
        if roll and hist[count % depth]:
            roll = roll - hist[count % depth] + temp
        else:
            roll = temp * depth
        load = open("/proc/loadavg", "r").read().strip()
        load = load.split()[0]
        draw_bar(ts, 8, temp-20, temp, load)
        last_temp = temp
        last_load = load
        hist[count % depth] = temp
        count += 1
except KeyboardInterrupt:
    exit(0)
