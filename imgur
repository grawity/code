#!/bin/bash

# imgur script by Bart Nagel <bart@tremby.net>
# version 3+grawity2
# I release this into the public domain. Do with it what you will.

# Required: curl
#
# Optional: xsel or xclip for automatically putting the URLs on the X selection
# for easy pasting
#
# Instructions:
# Put it somewhere in your path and maybe rename it:
# 	mv ~/Downloads/imgurbash.sh ~/bin/imgur
# Make it executable:
# 	chmod +x ~/bin/imgur
# Optional, since Alan kindly provided an API key for this script: stick your
# API key in the top:
# 	vim ~/bin/imgur
# Upload an image:
# 	imgur images/hilarious/manfallingover.jpg
# Upload multiple images:
# 	imgur images/delicious/cake.png images/exciting/bungeejump.jpg
# The URLs will be displayed (and the delete page's URLs will be displayed on
# stderr). If you have xsel or xclip the URLs will also be put on the X
# selection, which you can usually paste with a middle click.

API_CLIENT_ID="1d4fa0f8eeeec73" # grawity@gmail.com

. lib.bash || exit

images=0
clip=""

lib::find_file log_file= \
	~/Pictures/.uploads-$HOSTNAME \
	~/Pictures/.uploads \
	data:imgur-uploads.log ;

for file; do
	if [[ ! -f $file ]]; then
		err "'$file' is not a file, skipping"
		continue
	fi

	curlopt=(
		-s
		-H "Authorization: Client-ID $API_CLIENT_ID"
		-F "image=@$file"
	)

	if [[ $DEBUG ]]; then
		curlopt+=( "-v" )
	fi

	if (( `stat -c %s "$file"` > 1024*100 )); then
		curlopt+=( "-#" )
	fi

	response=$(curl "${curlopt[@]}" https://api.imgur.com/3/upload)
	# the "Expect: " header is to get around a problem when using this through
	# the Squid proxy. Not sure if it's a Squid bug or what.

	if (( $? )); then
		err "upload failed (curl returned $?)"
		continue
	elif [[ $response != {*} ]]; then
		err "upload failed (non-JSON response)"
		echo "Response from imgur:" >&2
		echo "$response" >&2
		continue
	elif [[ $(echo "$response" | jq -r .success) != true ]]; then
		echo "upload failed (API returned error)"
		echo "Response from imgur:" >&2
		echo "$response" >&2
		continue
	fi

	url=$(echo "$response" | jq -r .data.link)
	deletehash=$(echo "$response" | jq -r .data.deletehash)
	deleteurl="https://imgur.com/delete/$deletehash"

	setfattr -n "user.imgur.image-url" -v "$url" "$file"
	setfattr -n "user.imgur.delete-url" -v "$deleteurl" "$file"

	printf "%s\n" "$url $deleteurl" >> "$log_file"

	printf "%s\n" "$url"
	printf "Delete page:\n%s\n" "$deleteurl" >&2

	if (( images++ )); then
		clip+=$'\n'
	fi
	clip+=$url
done

# put the URLs on the clipboard if we have xsel or xclip
if [[ $DISPLAY && $clip ]]; then
	echo -n "$clip" | xsel -i -b
fi

lib::exit
