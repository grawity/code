#!/usr/bin/env python3
# countdown -- like 'sleep', but display a running countdown
import argparse
import re
import sys
import time

sys.path.append(sys.path[0] + "/../lib/python")

from nullroute.string import fmt_duration, parse_duration

def out(msg):
    print("\r\033[K%s" % msg, end="", flush=True)

def _fmt_duration(t):
    return fmt_duration(round(t))

parser = argparse.ArgumentParser()
parser.add_argument("duration", nargs="*")
args, rest = parser.parse_known_args()

secs = sum(map(parse_duration, args.duration + rest))

if secs > 0:
    # Positive argument = count down from the specified time to zero
    start = time.time()
    finish = start + secs
    try:
        while time.time() < finish:
            out("waiting (%s left) " % _fmt_duration(finish - time.time()))
            next = min(secs, 1)
            secs -= next
            time.sleep(next)
        out("done after %s\n" % _fmt_duration(time.time() - start))
    except KeyboardInterrupt:
        out("break after %s (%s left)\n" % (_fmt_duration(time.time() - start),
                                            _fmt_duration(finish - time.time())))
        exit(1)
else:
    # Zero or negative argument = count up to infinity
    start = time.time() - abs(secs)
    try:
        while True:
            out("waiting (%s elapsed) " % _fmt_duration(time.time() - start))
            time.sleep(1)
    except KeyboardInterrupt:
        out("break after %s\n" % _fmt_duration(time.time() - start))
        exit(1)
