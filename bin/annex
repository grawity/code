#!/usr/bin/env bash

. lib.bash || exit
. libks.bash || exit

annexes=(~/Attic/{Anime,Annex,Software,Videos})

is_remote() {
    [[ $1 == web ]] || git config --get "remote.$1.annex-uuid" >&/dev/null
}

is_remote!() {
    if ! [[ $1 ]]; then
        die "missing remote name"
    elif ! is_remote "$1"; then
        die "'$1' is not a git-annex remote"
    fi
}

if [[ "$2" == "--help" ]]; then
    exec git-annex help "$1" || exit
fi

cmd=$1; shift

if [[ $ANNEX_SKIP_NOCACHE ]]; then
    debug "nocache: disabled by environment"
elif [[ $cmd == @(add|copy|fsck|get|import|move|push|reinject) ]]; then
    lib=/usr/lib/nocache.so
    if [[ ! -f $lib ]]; then
        lib=/usr/lib/nocache/nocache.so
    fi
    if [[ -f $lib ]]; then
        if [[ ":$LD_PRELOAD:" != *:"$lib":* ]]; then
            debug "nocache: appending '$lib' to \$LD_PRELOAD"
            export LD_PRELOAD="$LD_PRELOAD${LD_PRELOAD:+:}$lib"
            export ANNEX_SKIP_NOCACHE=1
        else
            debug "nocache: found '$lib' in \$LD_PRELOAD"
        fi
    else
        notice "nocache: '$lib' not found; may hurt performance"
    fi
else
    debug "nocache: disabled for command '$cmd'"
fi

newargs=()
changes=0
for arg; do
    if [[ $arg == --*!=* ]]; then
        newargs+=("--not" "${arg%%!=*}=${arg#*!=}")
        changes=1
    elif [[ $arg == --!* ]]; then
        newargs+=("--not" "--${arg#--!}")
        changes=1
    else
        newargs+=("$arg")
    fi
done
if (( changes )); then
    debug "rewrote args:"
    debug "  from ${*@Q}"
    debug "  to ${newargs[*]@Q}"
    set -- "${newargs[@]}"
fi

case $cmd in
    each | help | init)
        ;;
    *)
        if ! git rev-parse --verify 'refs/heads/git-annex' >&/dev/null; then
            die "not in a git-annex repository"
        fi ;;
esac

case $cmd in
    @*)
        name=${cmd#@}
        # assume annex subcommand by default
        if [[ $1 == !* || $1 == git ]]; then
            set -- "${1#!}" "${@:2}"
        elif [[ $1 ]]; then
            set -- annex "$@"
        else
            set -- bash
        fi
        # determine remote path
        if ! path=$(git remote get-url "$name"); then
            err "remote '$name' not found"
        elif [[ $path == [!/]*:* ]]; then
            host=${path%%:*}
            path=${path#*:}
        elif [[ $path != /* ]]; then
            err "remote '$name' has a non-local URL '$path'"
        elif [[ ! -d $path ]]; then
            err "remote path '$path' does not exist"
        fi
        # determine local relative subdirectory
        # * `git rev-parse --show-prefix` does not work in bare (direct)
        #   repos even with `-c core.bare=false`, so use indirect methods
        gitdir=$(git rev-parse --git-dir)
        subdir=$(realpath --relative-to="$gitdir/.." "$PWD")
        # run command
        if [[ $host ]]; then
            path=${path%/}
            path=${path%.git}
            altpath=${path}.git
            path=$path/$subdir
            altpath=$altpath/$subdir
            log "$cmd: running '$*' at $host:$path" >&2
            ssh -t "$host" ". ~/.profile &&
                        if [ -e ${altpath@Q} ]; then
                            cd ${altpath@Q}
                        else
                            cd ${path@Q}
                        fi && ${*@Q}"
        else
            path=$(realpath "$path/$subdir") \
                || die "subpath '$subdir' does not exist in remote '$name'"
            log "$cmd: running '$*' in $path" >&2
            (cd "$path" && "$@")
        fi
        ;;
    each)
        if [[ $1 == !* || $1 == git ]]; then
            set -- "${1#!}" "${@:2}"
        else
            set -- annex "$@"
            lib::is_nested -= 1
        fi
        for dir in "${annexes[@]}"; do
            log2 "$cmd: running '$*' in $dir"
            (cd "$dir" && "${@//"{}"/"${dir##*/}"}")
            if (( r=$? )); then
                err "command '$*' returned $r (while in $dir)"
            fi
        done
        if (( errors )); then
            warn "command '$*' failed in at least one repository"
        fi
        ;;
    upgrade-index)
        dir=$(git rev-parse --git-dir)
        files=("$dir/index" "$dir/annex/index")
        echo "Before:"; du -hsc "${files[@]}"
        for f in "${files[@]}"; do
            GIT_INDEX_FILE=$f git update-index --index-version 4
        done
        echo "After:"; du -hsc "${files[@]}"
        ;;
    want-get)
        git annex find --want-get --not --in .
        ;;
    want-drop)
        git annex find --want-drop --in .
        ;;
    want-auto)
        git annex find --want-get --not --in . | sed $'s/.*/\e[;32mwant\e[m &/'
        git annex find --want-drop --in . | sed $'s/.*/\e[;31mdrop\e[m &/'
        ;;
    want-push)
        is_remote! "$1"
        git annex find --in . --not --in "$@"
        ;;
    push)
        is_remote! "$1"
        annex copy --to "$1" --not --in "$1" "${@:2}"
        ;;
    only-in)
        (( $# == 1 )) || warn "too many arguments (expected 1)"
        git annex find --in "$1" --not --copies 2
        ;;
    unsafe)
        annex where --not --copies semitrusted+:1 "$@"
        ;;
    where)
        declare -a annex_args=("--allrepos")
        declare -a fmt_args=()
        declare -i consume_args=0
        for arg; do
            if (( consume_args )); then
                fmt_args+=("$arg")
                consume_args+=-1
            elif [[ $arg == -[afp]* || $arg == --@(all|full|present|ignore=*) ]]; then
                fmt_args+=("$arg")
            elif [[ $arg == --ignore ]]; then
                fmt_args+=("$arg")
                consume_args=1
            else
                annex_args+=("$arg")
            fi
        done
        git annex list "${annex_args[@]}" | annex-list-format "${fmt_args[@]}"
        ;;
    addurls|registerurls)
        git annex add "$@"

        if (( $# )); then
            find "$@" -xtype f
        else
            git annex find --in here --not --in web
        fi | while read -r file; do
            if [[ -d $file ]]; then
                :
            elif [[ -L $file && ! -e $file ]]; then
                :
            elif [[ ! -f $file ]]; then
                warn "item '$file' is not a file"
            else
                url=$(attr -L -q -g xdg.origin.url "$file" 2>/dev/null)
                if [[ $url == https://dynasty-scans.com/* ]]; then
                    notice "ignoring blacklisted origin '$url' for file '$file'" >&2
                elif [[ $url == @(http|https|ftp)://* ]]; then
                    info "adding origin '$url' to file '$file'" >&2
                    echo "$url $file"
                elif [[ $url ]]; then
                    notice "ignoring non-web origin '$url' for file '$file'" >&2
                else
                    warn "no origin URL for file '$file'" >&2
                fi
            fi | git annex addurl --batch --with-files
        done
        ;;
    geturls)
        (( $# )) || set -- "--include=*"
        git annex find "$@" \
            | git annex whereis --batch --fast --json \
            | jq -r '. as {file: $file} | (.whereis, .untrusted) | .[].urls[] | "\($file) \(.)"'
        ;;
    geturls-json)
        (( $# )) || set -- "--include=*"
        git annex find "$@" \
            | git annex whereis --batch --fast --json \
            | jq '{file: .file,
                    key: .key,
                    urls: [(.whereis, .untrusted) | .[].urls[]]}'
        ;;
    geturls-sh)
        (( $# )) || set -- "--include=*"
        git annex find "$@" \
            | git annex whereis --batch --fast --json \
            | jq -r '@sh "git annex addurl --relaxed --file=\(.file) \((.whereis, .untrusted) | .[].urls[])"'
        ;;
    pruneurls)
        # pruneurls <regex> [<findargs>]
        regex=$1; shift
        [[ $regex && $regex != -* ]] || die "prune regex not specified"
        git annex find --in web "$@" \
            | git annex whereis --batch --fast --json \
            | jq -r --arg cond "$regex" '. as {file: $file, key: $key} | (.whereis, .untrusted) | .[].urls[] | select(test($cond)) | "\($file) \(.)"' \
            | git annex rmurl --batch
        ;;
    ci | commit)
        git config receive.denyCurrentBranch updateInstead
        git annex sync --no-pull --no-push
        ;;
    # overrides
    addurl)
        if (( $# == 2 )) && [[ -f $1 || -L $1 ]]; then
            set -- --file="$1" "$2"
        elif (( $# == 1 )); then
            set -- --file="$(urlencode.pl -dS "${1##*/}")" "$1"
        fi
        ;;&
    get)
        set -- "${@%@}"
        ;;&
    info)
        if (( ! $# )); then
            set -- --fast
        elif [[ $* == @(-v|--slow) ]]; then
            set --
        fi
        ;;&
    ls)
        cmd=find ;;&
    st)
        cmd=status ;;&
    *)
        if [[ ! $cmd ]]; then
            die "Usage: annex <command> ..."
        elif have annex-$cmd; then
            annex-$cmd "$@"
        else
            git annex "$cmd" "$@"
        fi
        ;;
esac

exit $(( $? ? $? : errors ))

# vim: ts=4:sw=4:et
