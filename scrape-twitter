#!/usr/bin/env python3
import bs4
import json
import re
from nullroute.core import *
from nullroute.misc import filter_filename, set_file_attrs
from nullroute.scrape import Scraper, file_ext
from pprint import pprint

'''
youtube-dl:
    def _extract_mobile_formats(self, username, video_id):
        webpage = self._download_webpage(
            'https://mobile.twitter.com/%s/status/%s' % (username, video_id),
            video_id, 'Downloading mobile webpage',
            headers={
                # A recent mobile UA is necessary for `gt` cookie
                'User-Agent': 'Mozilla/5.0 (Android 6.0.1; Mobile; rv:54.0) Gecko/54.0 Firefox/54.0',
            })
        main_script_url = self._html_search_regex(
            r'<script[^>]+src="([^"]+main\.[^"]+)"', webpage, 'main script URL')
        main_script = self._download_webpage(
            main_script_url, video_id, 'Downloading main script')
        bearer_token = self._search_regex(
            r'BEARER_TOKEN\s*:\s*"([^"]+)"',
            main_script, 'bearer token')
        guest_token = self._search_regex(
            r'document\.cookie\s*=\s*decodeURIComponent\("gt=(\d+)',
            webpage, 'guest token')
        api_data = self._download_json(
            'https://api.twitter.com/2/timeline/conversation/%s.json' % video_id,
            video_id, 'Downloading mobile API data',
            headers={
                'Authorization': 'Bearer ' + bearer_token,
                'x-guest-token': guest_token,
            })
        media_info = try_get(api_data, lambda o: o['globalObjects']['tweets'][video_id]
                                                  ['extended_entities']['media'][0]['video_info']) or {}
        return self._parse_media_info(media_info, video_id)
'''

class TwitterImageScraper(Scraper):
    def scrape(self, post_url):
        post_url = post_url.replace("//mobile.", "//")
        Core.info("scraping %r" % post_url)
        page = self.get_page(post_url)
        #print(page)

        profile_tag = page.select_one(".ProfileHeaderCard")
        user_name = profile_tag.select_one(".ProfileHeaderCard-screennameLink").get_text(strip=True).lstrip("@")
        full_name = profile_tag.select_one(".ProfileHeaderCard-nameLink").get_text(strip=True)

        tweet_tag = page.select_one(".permalink").select_one(".tweet")
        tweet_text = tweet_tag.select_one(".tweet-text").get_text(strip=True)

        photo_tags = page.select(".AdaptiveMedia-photoContainer")
        photo_urls = [t["data-image-url"] for t in photo_tags]

        if not photo_urls:
            Core.err("no images found!")

        for img_url in photo_urls:
            filename = "%s %s" % (filter_filename(user_name), os.path.basename(img_url))
            if img_url.endswith(":large"):
                filename = filename[:-len(":large")]
            else:
                img_url = "%s:large" % img_url
            if os.path.exists(filename):
                Core.info("  skipping %r (exists)", filename)
            else:
                Core.info("  saving %r", filename)
                self.save_file(img_url, filename,
                               referer=post_url)

s = TwitterImageScraper()
args = sys.argv[1:]

for url in args:
    try:
        s.scrape(url)
    except ValueError as e:
        Core.err(str(e))

Core.exit()
