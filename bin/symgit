#!/usr/bin/env bash

. lib.bash || exit

host=star
fsroot='/srv/git'
urlprefix=':'

klist -s || kinit || die "no Kerberos credentials"

cmd=$1; shift

case ${cmd:-help} in
	help)
		echo "Commands:"
		echo "  ls|list"
		echo "  new <repo>..."
		echo "  mv|rename <old_repo> <new_repo>"
		echo "  exp|export <repo>..."
		echo "  unexp|unexport <repo>..."
		;;
	ls|list)
		if (( $# )); then
			die "Extraneous arguments: '$*'"
		fi
		ssh $host "find '$fsroot/' -type d -name '*.git' -printf '%P\n' -prune" \
			| sort \
			| sed "s|^|$urlprefix|; s|\\.git\$||"
		;;
	new)
		if (( $# < 1 )); then
			die "Usage: $progname $cmd <repo>..."
		fi
		for arg; do
			arg=${arg%.git}.git
			dir=$fsroot/$arg
			url=$urlprefix${arg%.git}
			if ssh $host "test -d ${dir@Q}"; then
				err "Repository '$url' already exists"
				continue
			fi
			info "Creating repository '$url'"
			ssh $host "git init --bare ${dir@Q}"
			ssh $host "chmod go-rx ${dir@Q}"
		done
		;;
	mv|move|rename)
		if (( $# != 2 )); then
			die "Usage: $progname $cmd <old> <new>"
		fi
		old=${1%.git}.git; olddir=$fsroot/$old; oldu=$urlprefix${old%.git}
		new=${2%.git}.git; newdir=$fsroot/$new; newu=$urlprefix${new%.git}
		if ! ssh $host "test -d ${olddir@Q}"; then
			err "Source repository '$oldu' does not exist"
		elif ssh $host "test -d ${newdir@Q}"; then
			err "Target repository '$newu' already exists"
		else
			info "Renaming repository '$oldu' => '$newu'"
			ssh $host "mv -Tvn ${olddir@Q} ${newdir@Q}"
		fi
		;;
	desc|describe)
		if (( $# < 1 )); then
			die "Usage: $progname $cmd <repo> [<description>]"
		fi
		arg=$1 newdesc=$2
		arg=${arg%.git}.git
		dir=$fsroot/$arg
		if [[ $newdesc ]]; then
			info "Setting description for '$arg' to \"$newdesc\""
			ssh $host "echo ${newdesc@Q} > ${dir@Q}/description"
		else
			if ! ssh $host "test -s ${dir@Q}/description"; then
				info "Repository '$arg' has no description"
			else
				ssh $host "cat ${dir@Q}/description"
			fi
		fi
		;;
	pub|publish|exp|export)
		if (( $# < 1 )); then
			die "Usage: $progname $cmd <repo>..."
		fi
		for arg; do
			arg=${arg%.git}.git
			dir=$fsroot/$arg
			url=$urlprefix${arg%.git}
			if ! ssh $host "test -d ${dir@Q}"; then
				err "Repository '$url' does not exist"
				continue
			elif ssh $host "test -f ${dir@Q}/git-daemon-export-ok"; then
				info "Repository '$url' already public"
				continue
			fi
			if ! ssh $host "test -s ${dir@Q}/description"; then
				warn "Repository '$url' has no description, use '$progname desc'"
			fi
			info "Publishing repository '$url'"
			ssh $host "touch ${dir@Q}/git-daemon-export-ok"
			ssh $host "chmod a+rx ${dir@Q}"
		done
		;;
	unpub|unpublish|unexp|unexport)
		if (( $# < 1 )); then
			die "Usage: $progname $cmd <repo>..."
		fi
		for arg; do
			arg=${arg%.git}.git
			dir=$fsroot/$arg
			url=$urlprefix${arg%.git}
			if ! ssh $host "test -d ${dir@Q}"; then
				err "Repository '$url' does not exist"
				continue
			fi
			info "Unpublishing repository '$url'"
			ssh $host "rm -f ${dir@Q}/git-daemon-export-ok"
			ssh $host "chmod go-rx ${dir@Q}"
		done
		;;
	web)
		if (( $# < 1 )); then
			die "Usage: $progname $cmd <repo>..."
		fi
		for arg; do
			if [[ $arg == "." ]]; then
				url=$(git config remote.origin.url) || exit
				arg=${url#"$urlprefix"}
			fi
			arg=${arg%.git}.git
			url="https://git.nullroute.lt/cgit/$arg/"
			echo "$arg => $url"
		done
		;;
	*)
		die "Unknown subcommand '$cmd'"
		;;
esac

lib::exit
