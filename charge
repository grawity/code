#!/usr/bin/env bash
# charge -- control ThinkPad laptop charge threshold

. lib.bash || exit

sysfs_ctl() {
	local acpidev=$1 start=$2 stop=$3
	local devpath=/sys/class/power_supply/$acpidev
	sudo ctl \
		$devpath/charge_start_threshold=$start \
		$devpath/charge_stop_threshold=$stop
}
upower_get() {
	local acpidev=$1
	busctl get-property \
		org.freedesktop.UPower \
		/org/freedesktop/UPower/devices/battery_$acpidev \
		org.freedesktop.UPower.Device ChargeThresholdEnabled
}
upower_ctl() {
	local acpidev=$1 bool=$2
	busctl call \
		org.freedesktop.UPower \
		/org/freedesktop/UPower/devices/battery_$acpidev \
		org.freedesktop.UPower.Device EnableChargeThreshold \
		b $bool
}

acpidev=BAT0
dev=/sys/class/power_supply/$acpidev

upowerfile="/var/lib/upower/charging-threshold-status"
if [[ -e $upowerfile ]]; then
	upower=1
fi

case $1 in
	on|save|limit|80)
		if (( upower )); then
			vmsg "setting threshold via upower"
			upower_ctl $acpidev true
		else
			vmsg "setting threshold via sysfs"
			sysfs_ctl $acpidev 75 80
		fi;;
	off|normal|full|100)
		if (( upower )); then
			vmsg "setting threshold via upower"
			upower_ctl $acpidev false
		else
			vmsg "setting threshold via sysfs"
			sysfs_ctl $acpidev 0 100
		fi;;
	?*)
		vdie "unrecognized argument: $1";;
esac

echo "Current values:"
echo "  Status: $(<$dev/status), $(<$dev/capacity)%"
echo "  Start charging at: $(<$dev/charge_start_threshold)%"
echo "  Stop charging at: $(<$dev/charge_stop_threshold)%"

if (( upower )); then
	echo "Warning: Threshold is managed by UPower."
	value=$(< "$upowerfile")
	case $value in
		0) mode="Maximize Charge";;
		1) mode="Preserve Battery Health";;
		*) mode="Unknown mode ${value@Q}";;
	esac
	echo "  Current UPower mode: $mode"
fi
