#!/usr/bin/env perl
# ctl - write one-line strings to files
#   To be used like `sysctl`, just for things outside /proc/sys.
#   For example, ctl /sys/modules/snd_hda_intel/parameters/power_save=1
use warnings;
use strict;

my $err;
my $value;

my %c = (
	esc => (-t 1) ? "\e[38;5;9m" : "",
	name => (-t 1) ? "\e[m\e[38;5;11m" : "",
	punct => (-t 1) ? "\e[2m" : "",
	reset => (-t 1) ? "\e[m" : "",
);

sub err($) { warn @_; ++$err; }

sub print_file_data {
	my ($file, $data) = @_;
	$data =~ s/\e/$c{esc}\\e$c{reset}/g;
	$data =~ s/\0/$c{esc}\\0$c{reset}/g;
	$data =~ s/\n/$c{esc}\\n$c{reset}/g;
	$data =~ s/\t/$c{esc}\\t$c{reset}/g;
	$data =~ s/[\x00-\x1A\x1C-\x1F\x80-\xFF]/sprintf("$c{esc}\\%03o$c{reset}", ord $&)/ge;
	print "$c{name}$file$c{reset} $c{punct}=$c{reset} $data\n";
}

sub write_ctl {
	my ($file, $data) = @_;

	if (my $fh = IO::File->new($file, "w")) {
		$fh->print($data."\n");
		if ($fh->flush()) {
			print_file_data($file, $data);
		} else {
			err "ctl: file '$file': $!\n";
		}
		$fh->close();
	} else {
		err "ctl: file '$file': $!\n";
	}
}

sub read_ctl {
	my ($file, $depth) = @_;

	if (-d $file && -l $file) {
		warn "ctl: skipping symlink '$file'\n";
	} elsif (-d $file) {
		$file =~ s|/+$||;
		if ($depth > 10) {
			warn "ctl: stopping descent into '$file/*'\n";
			return;
		}
		read_ctl($_, $depth+1) for glob("$file/*");
	} elsif (-f $file) {
		if (my $fh = IO::File->new($file, "r")) {
			my $data;
			if ($fh->read($data, 512)) {
				chomp $data;
				print_file_data($file, $data);
			} elsif ($!) {
				print "$file: read error ($!)\n";
			} else {
				print "$file: empty\n";
			}
			$fh->close();
		} else {
			err "ctl: file '$file': open error: $!\n";
		}
	} elsif (-e $file || -l $file) {
		warn "ctl: skipping non-regular file '$file'\n";
	} else {
		err "ctl: no such file '$file'\n";
	}
}

push @ARGV, "." if !@ARGV;

for (@ARGV) {
	if (/^([^=]+)=(.*)$/) {
		write_ctl($1, $2);
	} elsif (/^=(.*)$/) {
		$value = $1;
	} elsif (defined $value) {
		write_ctl($_, $value);
	} else {
		read_ctl($_, 0);
	}
}

exit !!$err;
