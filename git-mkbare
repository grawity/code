#!/usr/bin/env bash

. lib.bash || exit

if (( $# )); then
	dirs=("$@")
else
	dirs=(.)
fi

for dir in "${dirs[@]}"; do
	if ! [[ -d $dir ]]; then
		err "path '$dir' does not exist"
		continue
	fi

	(
		set -e

		# returns absolute path
		base=$(git -C "$dir" rev-parse --show-toplevel)
		if ! [[ $base && -d $base ]]; then
			err "could not determine toplevel directory of '$dir'"
			continue
		fi
		debug "repository toplevel: '$base'"

		# returns absolute path
		src=$(git -C "$dir" rev-parse --absolute-git-dir)
		if ! [[ $src && -d $src ]]; then
			err "could not determine .git location of '$dir'"
			continue
		fi
		debug "repository gitdir: '$src'"

		if [[ "$(git -C "$dir" config core.bare)" == "true" ]]; then
			notice "'$dir' is already a bare repo"
			continue
		fi

		if [[ "$(git -C "$dir" remote | wc -l)" != "1" ]]; then
			err "'$dir' has more than one remote"
			continue
		fi

		info "moving the .git directory"
		dst="$base.git"
		mv -v "$src" "$dst"

		info "bare: enabling 'core.bare'"
		git -C "$dst" config core.bare true
		git -C "$dst" for-each-ref > "$dst/refs.backup"

		info "bare: delete tracking branch configurations"
		git -C "$dst" config --list --local |
			grep '^branch\.' | sed 's/.[^.]*$//' | sort -u |
			while read -r line; do
				echo "$line"
				git -C "$dst" config --remove-section "$line"
			done

		info "bare: delete working-tree crud"
		rm -f "$dst"/index
		rm -f "$dst"/{COMMIT_EDITMSG,FETCH_HEAD,ORIG_HEAD}

		info "mirror: copy branches to local"
		git -C "$dst" update-ref -d --no-deref "refs/remotes/origin/HEAD"
		git -C "$dst" push . "+refs/remotes/origin/*:refs/heads/*"

		info "mirror: copy reflogs to local"
		rm -f "$dst/logs/refs/remotes/origin/HEAD"
		mkdir -p "$dst/logs/refs/heads"
		rsync -a --delete "$dst/logs/refs/remotes/origin/" "$dst/logs/refs/heads/"

		info "mirror: convert remote configuration"
		git -C "$dst" config --unset-all remote.origin.fetch
		git -C "$dst" config --unset-all remote.origin.mirror
		git -C "$dst" config remote.origin.fetch "+refs/heads/*:refs/heads/*"

		info "mirror: fetch updates"
		git -C "$dst" fetch --prune origin

		info "mirror: delete unwanted refs"
		git -C "$dst" for-each-ref |
			awk '{print $3}' |
			egrep -v '^refs/(heads|notes|tags)/' |
			while read -r ref; do
				git -C "$dst" update-ref -d "$ref"
			done

		info "clean up"
		git -C "$dst" pack-refs --all --prune
		git -C "$dst" gc
		git -C "$dst" prune
		rdempty --quiet "$dst"

		info "deleting old worktree"
		find "$base" -print -delete | progress

		log "moved to '$dst'"
	) \
	|| err "conversion of '$dir' failed"
done

lib::exit
