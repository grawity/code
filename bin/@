#!/usr/bin/env bash
#
# This is like 'ssh -t <host>', but preserves the current directory.
#
#   - If called as '@' or '@foo', it will just preserve cwd exactly, i.e.
#     remote commands will act on remote files.
#     (For example, 'cd ~/Dropbox; @ ember wget ...')
#
#   - If called as 'on' or '@@', it will try to access the *local* cwd via NFS,
#     i.e. remote commands will still act on local files.
#     (For example, 'cd ~src/systemd; on buildbox ninja')
#
# Accepts '@foo' symlinks (hostname in argv[0]) like ssh/rsh.
#
# Kind of inspired by the SunOS /tmp story from:
# https://www-uxsup.csx.cam.ac.uk/misc/horror.txt

. lib.bash || exit

arg0=${0##*/}
pwd=$PWD
nfs=0

if [[ $arg0 == @@?* ]]; then
	host=${arg0#@@}
	nfs=1
elif [[ $arg0 == @(@@|on) && $1 ]]; then
	host=$1; shift
	nfs=1
elif [[ $arg0 == @?* ]]; then
	host=${arg0#@}
elif [[ $arg0 == @ && $1 ]]; then
	host=$1; shift
else
	die "missing hostname"
fi

if [[ $1 == -n ]]; then
	nfs=1; shift
fi

if (( nfs )); then
	pwd="/net/$HOSTNAME$PWD"
	info "Running in $pwd"
fi

# 0 args - run a shell
# 1 arg - use as raw command line
# 2+ args - quote individual args

if (( $# == 0 )); then
	qcmd="bash"
elif (( $# == 1 )) && [[ $1 == *\ * ]]; then
	qcmd="$1"
else
	qcmd="${@@Q}"
fi

exec ssh -q -t "$host" "export SILENT=1; . ~/.profile && cd ${pwd@Q} && ($qcmd)"
