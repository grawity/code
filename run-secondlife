#!/usr/bin/env perl
# run-secondlife -- Second Life viewer wrapper with single-instance support
use warnings;
use strict;
use Net::DBus;
use Net::Netrc;
use Nullroute::Dir qw(find_first_file);
use Nullroute::Lib qw(_debug _info _warn _die);
use constant {
	SL_DOMAIN => "secondlife.com",
	SL_BUS_NAME => "com.secondlife.ViewerAppAPIService",
	SL_BUS_PATH => "/com/secondlife/ViewerAppAPI",
};

sub find_alias {
	my ($name) = @_;

	my %aliases;
	my $path = find_first_file("config:secondlife.aliases");
	if (open(my $fh, "<", $path)) {
		%aliases = map {/^(\w+)\s*=\s*(.+)\s*$/} <$fh>;
		close($fh);
	}
	return $aliases{$name} // $name;
}

sub find_login {
	my ($name, $domain) = @_;

	_debug("looking up login '$name' for '$domain' in .netrc");
	my $entry = Net::Netrc->lookup($domain, $name);
	if (!$entry || !defined $entry->{machine}) {
		_die("login '$name' not found in .netrc");
	} elsif (!defined $entry->{password}) {
		_die("password for '$name' missing from .netrc");
	} else {
		my @acct = defined($entry->{account})
		         ? split(/\s+/, $entry->{account})
		         : split(/\s+/, $name);
		_debug("using account '@acct' from .netrc");
		return (@acct, $entry->{password});
	}
}

$::bus = Net::DBus->session;

my @default_args = ("--novoice");

my $exe;
my $url;
my @args;
my $new;

$exe = shift @ARGV;
if (!defined $exe) {
	_die("missing executable path");
} elsif (!-f $exe || !-x $exe) {
	_die("not an executable: $exe");
}

for my $arg (@ARGV) {
	if ($arg =~ /^@(.+)$/) {
		my $name = $1;
		my $domain = SL_DOMAIN;
		my @creds = find_login($name, $domain);
		if (@creds) {
			push @args, ("--login", @creds);
		}
	}
	elsif ($arg =~ m!^secondlife://!) {
		push @args, $url = $arg;
	}
	elsif ($arg eq "--new") {
		$new = 1;
	}
	elsif ($arg eq "--voice") {
		@default_args = grep {$_ ne "--novoice"} @default_args;
	}
	else {
		push @args, $arg;
	}
}

if (defined $url) {
	if ($new) {
		_debug("--new given, starting new instance");
	}
	elsif (@args > 1) {
		_debug("command line given, starting new instance");
	}
	elsif ($::bus->get_service_owner(SL_BUS_NAME)) {
		_info("activating existing viewer instance");
		eval {
			$::bus
			->get_service(SL_BUS_NAME)
			->get_object(SL_BUS_PATH)
			->GoSLURL($url);
		};
		if ($@) {
			_warn("could not contact the viewer: $@");
		} else {
			exit 0;
		}
	}
	else {
		_debug("viewer not found in DBus, starting new instance");
	}
}

if ($::debug) {
	_debug("starting '$exe'");
	_debug(" - with arg '$_'") for @default_args, @args;
}
exec {$exe} ($exe, @default_args, @args)
or _die("could not run '$exe': $!");
