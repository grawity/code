#!/usr/bin/env python3
from nullroute.core import *
import nullroute.sec
import pixivpy3
import requests
import sys

def is_nonempty(file):
    if os.path.exists(file):
        if os.stat(file).st_size > 0:
            return True
    return False

class Client(object):
    def __init__(self):
        self.ua = requests.Session()
        self.api = pixivpy3.PixivAPI()
        self._auth()

    def _auth(self):
        if not self.api.user_id:
            creds = nullroute.sec.get_netrc_service("pixiv.net", "api")
            Core.info("logging in to Pixiv")
            self.api.login(creds["login"], creds["password"])

    def _check(self, r):
        if r.status != "success":
            Core.die("error %r" % r)
        return r

    def save_file(self, url, illust_id):
        headers = {}
        if illust_id:
            headers["referer"] = "http://www.pixiv.net/member_illust.php?mode=manga_big&illust_id=%s&page=0" % illust_id

        name = os.path.basename(url)
        if os.path.exists(name) and os.stat(name).st_size > 0:
            Core.debug("file %r already exists, skipping" % name)
        else:
            Core.debug("saving %s to %r" % (url, name))
            with open(name, "wb") as fh:
                resp = self.ua.get(url, headers=headers)
                resp.raise_for_status()
                fh.write(resp.content)

    def get_work_info(self, illust_id):
        r = self.api.works(illust_id)
        self._check(r)
        return r.response[0]

    def get_all_member_works(self, member_id, start_page=1):
        log = open("pixiv%s.txt" % member_id, "a")
        Core.info("getting works of user %s" % member_id)
        while start_page:
            works_r = self._check(self.api.users_works(member_id, page=start_page))
            Core.info("got page %d/%d (%d works out of %d)" % (
                        works_r.pagination.current,
                        works_r.pagination.pages,
                        works_r.count,
                        works_r.pagination.total,
                      ))
            for i, work in enumerate(works_r.response):
                i_offset = (works_r.pagination.current - 1) * works_r.pagination.per_page
                i_global = (i + 1) + i_offset
                if is_nonempty("%s_p0.png" % work.id):
                    continue
                Core.info("downloading work %s of %s: %s ｢%s｣" % (
                            i_global,
                            works_r.pagination.total,
                            work.id,
                            work.title,
                          ))
                log.write("-- %s --\n" % work.id)
                log.write("%s\n" % work.title)
                log.write("http://www.pixiv.net/member_illust.php?mode=medium&illust_id=%s\n" % work.id)
                log.write("\n")
                log.write("%s\n" % work.caption)
                log.write("\n")
                log.flush()
                if work.is_manga:
                    work_info = self.get_work_info(work.id)
                    for j, page in enumerate(work_info.metadata.pages):
                        Core.info(" - page %s of %s" % (j+1, work_info.page_count))
                        self.save_file(page.image_urls["large"], work.id)
                else:
                    self.save_file(work.image_urls["large"], work.id)
            start_page = works_r.pagination.next

c = Client()

for arg in sys.argv[1:]:
    arg = int(arg)
    c.get_all_member_works(arg)
