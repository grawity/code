#!/usr/bin/env python3
from collections import namedtuple
from fnmatch import fnmatch
import os
import sys
from nullroute.core import *
from nullroute.misc import fmt_size, unquote
from subprocess import Popen, PIPE
import subprocess

Item = namedtuple("Item", ["num", "size", "key", "name"])

def confirm(msg):
    print(msg, end=" ", flush=True)
    try:
        return sys.stdin.readline().lower().startswith("y")
    except KeyboardInterrupt:
        sys.exit(1)

def prompt(msg):
    print(msg, end=" ", flush=True)
    try:
        return sys.stdin.readline().strip()
    except KeyboardInterrupt:
        sys.exit(1)

def annex(*cmd):
    return subprocess.Popen(["git", "annex", *cmd],
                            stdout=subprocess.PIPE)

def annex_run(*cmd):
    return subprocess.call(["git", "annex", *cmd])

def getkeysize(key):
    kk = key.split("--")
    kk = kk[0].split("-")
    for item in kk:
        if item.startswith("s"):
            return int(item[1:])
    raise ValueError("no 'size' field in key %r" % key)

def annex_unused(remote=None):
    if remote and remote != "here":
        args = ["--from=%s" % remote]
    else:
        args = []

    with annex("unused", *args) as proc:
        for line in proc.stdout:
            line = line.decode("utf-8")
            if line.startswith("    "):
                num, key = line.strip().split()
                if num == "NUMBER":
                    continue
                yield int(num), key

def get_last_path(key):
    with subprocess.Popen(["git", "log", "--format=",
                                         "--name-only",
                                         "--no-renames",
                                         "-S%s" % key,
                                         "-n1"],
                          stdout=subprocess.PIPE) as proc:
        for line in proc.stdout:
            line = line.decode("utf-8")
            try:
                line = unquote(line.strip())
            except ValueError:
                print(repr(line))
                raise
            return line

def print_items(items):
    total = 0
    for num, size, key, name in items:
        print("  %-4d  %8s  %s" % (num, fmt_size(size), name))
        total += size
    print("  ----  --------  -----")
    print("  %-4d  %8s  %s" % (len(items), fmt_size(total), "TOTAL"))

remote = sys.argv[1] if len(sys.argv) > 1 else None

remote_str = (remote or "local repository")
remote_arg = ["--from=%s" % remote] if remote else []

Core.info("searching for unused data in %s" % remote_str)
unused = list(annex_unused(remote))
Core.info("listing %d unused files" % len(unused))
n_found = len(unused)
sz_found = 0
items = []
for num, key in unused:
    size = getkeysize(key)
    sz_found += size
    name = get_last_path(key)
    name = os.path.basename(name) if name else key
    items.append(Item(num, size, key, name))
items.sort(key=lambda x: x[3].casefold())
k_dropped = set()
print_items(items)

while n_found:
    items = [i for i in items if i.key not in k_dropped]
    cmd = prompt("Drop %d files (%s) from %s?" % (n_found, fmt_size(sz_found),
                                                  remote_str)).split(None, 1)
    if not cmd or cmd[0] in {"n", "no", "q", "quit"}:
        Core.info("exiting")
        break
    elif cmd[0] in {"y", "yes"}:
        Core.info("dropping all unused files from %s" % remote_str)
        annex_run("dropunused", *remote_arg, "--force", "all")
        Core.info("dropped %d files (%s)" % (n_found, fmt_size(sz_found)))
        break
    elif cmd[0] in {"d", "drop"}:
        todo = [i for i in items if fnmatch(i.name, cmd[1])]
        Core.info("dropping %d files matching %r" % (len(todo), cmd[1]))
        n_dropped = sz_dropped = 0
        n_err = sz_err = 0
        for i in todo:
            r = annex_run("dropunused", *remote_arg, "--force", str(i.num))
            if r == 0:
                n_dropped += 1
                sz_dropped += i.size
                k_dropped.add(i.key)
            else:
                n_err += 1
                sz_err += i.size
        if n_err:
            Core.err("failed to drop %d files (%s)" % (n_err, fmt_size(sz_err)))
        if n_dropped:
            Core.info("dropped %d files (%s)" % (n_dropped, fmt_size(sz_dropped)))
            n_found -= n_dropped
            sz_found -= sz_dropped
        else:
            Core.err("no files matched %r" % cmd[1])
    elif cmd[0] in {"r", "recover"}:
        todo = [i for i in items if fnmatch(i.name, cmd[1])]
        Core.info("recovering %d files matching %r" % (len(todo), cmd[1]))
        n_recover = sz_recover = 0
        n_err = sz_err = 0
        names = []
        for i in todo:
            Core.debug("creating placeholder for %r" % i.name)
            r = subprocess.call(["ln", "-nsf", ".git/annex/objects/%s" % i.key, i.name])
            if r == 0:
                names.append(i.name)
                n_recover += 1
                sz_recover += i.size
                k_dropped.add(i.key)
            else:
                n_err += 1
                sz_err += i.size
        if n_err:
            Core.err("failed to recover %d files (%s)" % (n_err, fmt_size(sz_err)))
        if n_recover:
            r = annex_run("add", *names)
            if r == 0:
                Core.info("recovered %d files (%s)" % (n_recover, fmt_size(sz_recover)))
                n_found -= n_recover
                sz_found -= sz_recover
            else:
                Core.err("annex add of symlinks failed")
        else:
            Core.err("no files matched %r" % cmd[1])
    elif cmd[0] in {"/", "print"}:
        todo = items
        if len(cmd) > 1:
            todo = [i for i in todo if fnmatch(i.name, cmd[1])]
        print_items(todo)
    else:
        Core.err("unknown command %r" % cmd[0])
