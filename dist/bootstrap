#!/usr/bin/env bash

export PATH=$HOME/bin:$PATH

. lib.bash || exit

opt_force=0

while getopts :f OPT; do
	case $OPT in
	f) opt_force=1;;
	*) lib:die_getopts;;
	esac
done; shift $[OPTIND-1]

if [ "$USER" != grawity ] && (( !opt_force )); then
	vdie "username mismatch"
fi

for cmd in git gpg; do
	if ! have $cmd; then
		vdie "$cmd not installed"
	fi
done

mkdir -p -m 0755 ~/bin
mkdir -p -m 0755 ~/lib
mkdir -p -m 0700 ~/.cache

if [ ! -d ~/.dotfiles ]; then
	vmsg "downloading ~/.dotfiles"
	git clone "https://github.com/grawity/dotfiles" ~/.dotfiles
	~/.dotfiles/install
	# Get $EMAIL
	. ~/.dotfiles/environ
fi

# initial authorized_keys fetch

if [ ! -s ~/.ssh/authorized_keys ]; then
	sshkeyupdate -r
fi

# nightly dist/pull cronjob

if [ -e ~/.config/.nocron ]; then
	vmsg "skipping cronjob (found ~/.config/.nocron)"
elif ! have crontab; then
	warn "skipping cronjob (cron not installed)"
else
	err=$(crontab -l 2>&1 >/dev/null)
	if [[ "$err" == "no crontab for $USER" ]]; then
		err=""
	fi

	if [[ "$err" ]]; then
		vmsg "skipping cronjob: $err" >&2
	elif ! crontab -l 2>/dev/null | grep -qs "/dist/pull"; then
		vmsg "adding cronjob"
		(crontab -l; echo "@daily	~/bin/dist/pull") | crontab -
	else
		vmsg "cronjob already configured"
	fi
fi

# mail forwarding

if [ -e ~/.config/.noforward ]; then
	vmsg "not creating ~/.forward (found optout)"
elif [ -s ~/.forward ]; then
	vmsg "not updating existing ~/.forward"
elif [ -s ~/.mailfilter ]; then
	vmsg "found ~/.mailfilter"
elif ! mta=$(PATH=/usr/lib:/usr/sbin:/usr/bin:/bin command -v sendmail); then
	vmsg "mail forwarding cannot be configured (sendmail not found)"
else
	vmsg "updating ~/.forward"
	echo "\"|$mta -i $opt_addr\"" > ~/.forward
	vmsg "sending test message"
	$mta -i "$USER" <<-EOF
	Subject: Test from $(hostname)
	Date: $(date "+%a, %d %b %Y %H:%M:%S %z")
	To: <$opt_addr>

	Test mail from $USER ($UID) at $(fqdn || hostname)
	EOF
fi
