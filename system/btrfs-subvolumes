#!/usr/bin/env python3
import argparse
import glob
import re
import subprocess
import sys
import pprint

def enum_subvolumes(root):
    cmd = ["sudo", "btrfs", "subvolume", "list", "-a", root]
    yield (5, 0, "")
    with subprocess.Popen(cmd, stdout=subprocess.PIPE) as proc:
        for line in proc.stdout:
            line = line.decode().strip()
            m = re.match(r"^ID (\d+) gen \d+ top level (\d+) path (.+)$", line)
            subvol_id = int(m.group(1))
            parent_id = int(m.group(2))
            path = m.group(3)
            if path.startswith("<FS_TREE>/"):
                path = path[len("<FS_TREE>/"):]
            yield subvol_id, parent_id, path

parser = argparse.ArgumentParser()
parser.add_argument("-o", "--output", metavar="FIELDS",
                                      help="output columns")
parser.add_argument("path", nargs="*")
args = parser.parse_args()

mtpts = args.path
if not mtpts:
    mtpts = glob.glob("/run/btrfs/*/")
if not mtpts:
    mtpts = ["/"]
mtpts = [arg.rstrip("/") or "/" for arg in mtpts]

known_columns = ["NAME", "ID", "PARENT", "ABS_ID", "ABS_PARENT"]
visible_columns = ["NAME"]
hidden_columns = ["ID", "PARENT", "ABS_ID", "ABS_PARENT"]
if arg := args.output:
    if arg.startswith("+"):
        arg = arg[1:]
    else:
        visible_columns = []
    arg = arg.upper().split(",")
    for c in arg:
        if c in known_columns:
            if c in visible_columns:
                # `column` does not like duplicate items in --table-order
                exit("duplicate column: %s" % c)
            if c in hidden_columns:
                hidden_columns.remove(c)
            visible_columns.append(c)
        else:
            exit("unknown column: %s" % c)

for i, mtpt in enumerate(mtpts):
    names = {}
    parents = {}

    for subvol_id, parent_id, subvol_name in enum_subvolumes(mtpt):
        names[mtpt, subvol_id] = subvol_name
        parents[mtpt, subvol_id] = parent_id

    if i > 0:
        print()

    cmd = [
        "column",
        "--separator=\t",
        "--table",
        "--table-name=subvolumes",
        "--table-columns=NAME,ID,PARENT,ABS_ID,ABS_PARENT",
        "--table-order=%s" % ",".join(visible_columns),
        "--table-hide=%s" % ",".join(hidden_columns),
        "--tree=NAME",
        "--tree-id=ID",
        "--tree-parent=PARENT",
    ]

    with subprocess.Popen(cmd, stdin=subprocess.PIPE) as proc:
        for mtpt, subvol_id in names:
            line = [
                names[mtpt, subvol_id] or mtpt,
                subvol_id,
                parents[mtpt, subvol_id],
                "%s@%s" % (mtpt, subvol_id),
                "%s@%s" % (mtpt, parents[mtpt, subvol_id]),
            ]
            line = "\t".join(map(str, line)) + "\n"
            line = line.encode()
            proc.stdin.write(line)
        proc.stdin.close()
