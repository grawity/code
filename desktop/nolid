#!/usr/bin/env bash
# nolid - disable suspend and lid-close handling while a command runs

. lib.bash || exit

lock="${XDG_RUNTIME_DIR?}/nolid.lock"
hold="${XDG_RUNTIME_DIR?}/nolid.hold"

if [[ $_NOLID ]]; then
	warn "ignoring nested lock"
	exec env LVL="$_lvl" "$@" || exit
fi

name="nolid"
pushover=0

if [[ -t 0 ]]; then
	tty=$(tty)
	name="$name on ${tty#/dev/}"
fi

case $1 in
	-h|--hold)
		debug "creating lockfile \"$hold\""
		touch "$hold"
		spawn -dc nolid inotifywait -qqe delete_self "$hold" &
		echo "Held."
		exit;;
	-r|--unhold|--release)
		debug "deleting lockfile \"$hold\""
		rm -f "$hold"
		echo "Released."
		exit;;
	-p)
		pushover=1
		shift;;
esac

if (( ! $# )); then
	set -- ac-wait
fi

if [[ -t 0 ]]; then
	settitle "nolid${1:+: $1}"
fi

t_start=$(date +%s)

touch "$lock"

trap 'flock -xn "$lock" rm -f "$lock"' EXIT

flock -s "$lock" \
	systemd-inhibit --who="$name" \
		--what="sleep:handle-lid-switch" \
		--why="Manually inhibited" \
	gnome-inhibit --always \
		--who="$name" \
		--what="suspend" \
		--why="Manually inhibited" \
	env \
		LVL="$_lvl" \
		_NOLID="1" \
	"$@"

r=$?

t_end=$(date +%s)

if (( pushover )); then
	pushover "$HOSTNAME: Lid lock released" "Command \"$1\" exit with status $r. Lid lock \"$name\" released."
fi

exit $r
