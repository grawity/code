#!/usr/bin/env perl
use feature 'say';
use Data::Dumper;
use Net::DNS;
use Net::LDAP;
use List::MoreUtils qw(uniq);

my $res = Net::DNS::Resolver->new;
my $ans;

my %do;
$do{kerberos} = 1;
$do{mail} = 1;
$do{verbose} = 1;
$do{ldap} = 1;
$do{xmpp} = 1;
$do{sip} = 1;

sub status {
	print STDERR "\r\033[K", shift; $|++;
}

sub done {
	print STDERR "\r\033[K"; $|++;
}

sub find_dom {
	my ($lhs, $rhs, $type) = @_;
	my @rhs = split(/\./, $rhs);
	while (@rhs) {
		my $dom = join(".", @rhs);
		my $qry = join(".", grep {defined} ($lhs, @rhs));
		my $ans = $res->query($qry, $type);
		return ($ans, $dom) if $ans;
		shift @rhs;
	}
}

$res->dnssec(1);

sub get_spf {
	my ($dom) = @_;
	my ($ans, @spf);
	$ans = $res->query($dom, "SPF");
	if ($ans) {
		push @spf,
			grep {s/^v=spf1\s//}
			map {$_->txtdata}
			grep {$_->type eq "SPF"}
			$ans->answer;
	}
	$ans = $res->query($dom, "TXT");
	if ($ans) {
		push @spf,
			grep {s/^v=spf1\s//}
			map {$_->txtdata}
			grep {$_->type eq "TXT"}
			$ans->answer;
	}
	return uniq @spf;
}

sub sort_srv {
	sort {$a->priority <=> $b->priority}
	sort {$a->weight <=> $b->weight}
	sort {$a->target cmp $b->target}
	grep {$_->type eq 'SRV'}
	@_;
}

sub format_srv {
	uniq
	map {"[".$_->priority."] ".$_->target.":".$_->port}
	sort_srv(@_);
}

for my $host (@ARGV) {
	my $domain;
	my @dom;
	my @ns;
	my $secure = 0;

	status "Looking up SOA...";
	$ans = $res->send($host, "SOA");
	for my $rr ($ans->answer, $ans->authority) {
		if ($rr->type eq "SOA") {
			$domain = $rr->name;
			push @dom, $domain . ($ans->header->ad
						? " (\e[38;5;10msecure\e[m)"
						: " (\e[38;5;3minsecure\e[m)");
		}
	}

	status "Looking up nameservers...";
	$ans = $res->query($domain, "NS");
	$secure = $ans->header->ad;
	for my $rr ($ans->answer, $ans->authority) {
		if ($rr->type eq "NS") {
			push @ns, $rr->nsdname;
		}
	}

	status "Looking up Active Directory...";
	($ans, $domain) = find_dom("_ldap._tcp._msdcs", $host, "SRV");
	push @dom, "$domain (Active Directory)" if $ans;
	done;

	if (@dom) {
		say "Domain:";
		say "\tdomain: $_" for @dom;
		say "\tnameserver: $_" for @ns;
	}

	if ($do{mail}) {
		status "Looking up mail servers...";
		$ans = $res->query($host, "MX");
		done;
		if ($ans) {
			say "Mail:";
			say "\tdomain: $host";
			say "\tmailserver: $_"
				for uniq map {"[".$_->preference."] ".$_->exchange}
				sort {$a->preference <=> $b->preference}
				sort {$a->exchange cmp $b->exchange}
				grep {$_->type eq 'MX'} $ans->answer;
		}

		status "Looking up mail server configuration...";
		my @spf = get_spf($host);
		my $dmarcans = $res->query("_dmarc.$host", "TXT");
		done;
		if ($dmarcans) {
			my $policy;
			for my $ans ($dmarcans->answer) {
				if ($ans->type eq "TXT") {
					$policy = $ans->txtdata;
				}
			}
			my %policy = map {split /=/, $_, 2} split /;\s*/, $policy;
			my @mode;
			push @mode, {
				none => "only send reports",
				quarantine => "mark as spam",
				reject => "SMTP-reject"}->{$policy{p}};
			push @mode, "report to $policy{rua}"
				if exists $policy{rua};
			push @mode, "strict SPF"
				if ($policy{aspf} // "r") eq "s";
			say "\tDMARC: ".join("; ", @mode);
		}
		say "\tSPF: $_" for @spf; 
	}

	if ($do{kerberos}) {
		status "Looking up Kerberos realm...";
		$txt_ans = $res->query("_kerberos.$host", "TXT");
		if ($txt_ans) {
			($realm) =
				grep {!/v=/}
				map {$_->txtdata}
				grep {$_->type eq "TXT"}
				$txt_ans->answer;
		} else {
			$realm = uc($host);
		}
		status "Looking up Kerberos servers in $realm...";
		$udp_ans = $res->query("_kerberos._udp.$realm", "SRV");
		done;
		if ($udp_ans || $txt_ans) {
			say "Kerberos:";
			say "\trealm: $realm";
			if ($udp_ans) {
				say "\tkdc: $_" for format_srv($udp_ans->answer);
			}
		}
	}

	if ($do{ldap}) {
		status "Looking up LDAP servers...";
		$tcp_ans = $res->query("_ldap._tcp.$host", "SRV");
		$tls_ans = $res->query("_ldaps._tcp.$host", "SRV");
		done;
		if ($tcp_ans || $tls_ans) {
			my (@servers, @bases);
			say "LDAP:";
			if ($tcp_ans) {
				say "\tserver: $_ (TCP)" for format_srv($tcp_ans->answer);
				push @servers, sort_srv($tcp_ans->answer);
			}
			if ($tls_ans) {
				say "\tserver: $_ (TLS)" for format_srv($tls_ans->answer);
				push @servers, sort_srv($tls_ans->answer);
			}
			for my $item (@servers) {
				my $uri = $item->target;
				status "Looking up LDAP contexts on $uri...";
				my $ldap = Net::LDAP->new($uri);
				if ($ldap) {
					$ldap->bind;
					my $res = $ldap->search(
						base => "",
						scope => "base",
						filter => q(objectClass=*),
						attrs => ["+"],
					);
					$ldap->unbind;
					push @bases,
						grep {$_ ne ""}
						map {$_->get_value("namingContexts")}
						$res->entries;
					last;
				}
			}
			done;
			say "\tbase: $_" for @bases;
		}
	}

	if ($do{xmpp}) {
		status "Looking up XMPP servers...";
		$client_ans = $res->query("_xmpp-client._tcp.$host", "SRV");
		$server_ans = $res->query("_xmpp-server._tcp.$host", "SRV");
		done;
		if ($client_ans) {
			say "XMPP:";
			say "\tserver: $_" for format_srv($client_ans->answer);
			say "\t(not federated)" if !$server_ans;
		}
	}

	if ($do{sip}) {
		status "Looking up SIP servers...";
		# TODO: NAPTR
		$udp_ans = $res->query("_sip._udp.$host", "SRV");
		$tcp_ans = $res->query("_sip._tcp.$host", "SRV");
		$tls_ans = $res->query("_sips._tcp.$host", "SRV");
		done;
		if ($udp_ans || $tcp_ans || $tls_ans) {
			say "SIP:";
			if ($udp_ans) {
				say "\tproxy: $_ (UDP)" for format_srv($udp_ans->answer);
			}
			if ($tcp_ans) {
				say "\tproxy: $_ (TCP)" for format_srv($tcp_ans->answer);
			}
			if ($tls_ans) {
				say "\tproxy: $_ (TLS)" for format_srv($tls_ans->answer);
			}
		}
	}

	say "";
}
