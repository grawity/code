#!/usr/bin/env bash

dir=${0%/dist/*}
PATH=$dir/bin:$PATH

. lib.bash || exit

pick() { until have "$1"; do shift; (( $# )) || return; done; echo "$1"; }

check-gpg-version() {
	$gpg --version | sed 's/gpg (GnuPG) //; q' | {
		IFS="." read -r major minor rest
		(( major >= 2 )) || (( major == 1 && minor >= 4 ))
	}
}

# set up own environment

OWNER=grawity
EMAIL=grawity@gmail.com

if [[ "$USER" != @($OWNER|mantas) ]]; then
	warn "This script should not be used by anyone else than $OWNER."
	warn "  It installs $OWNER's SSH authorized_keys, their Kerberos"
	warn "  ~/.k5login, and forwards all mail to their inbox."
	warn "  I'm fairly sure you do not want any of that, do you?"
	confirm "continue anyway?" || exit
fi

errors=0 warnings=0

# check for necessary programs

wants="crontab curl! gcc git! mailx perl!"

for bin in $wants; do
	case $bin in
	*!)	bin=${bin%!}
		have "$bin" || err  "'$bin' not installed";;
	*)	have "$bin" || warn "'$bin' not installed";;
	esac
done

gpg=$(pick gpg2 gpg) || err "'gpg' not installed"

(( errors ))   && die "required tools missing"
(( warnings )) && { confirm "continue bootstrap?" || exit 1; }

warnings=0

# base layout and dotfiles

cd "$dir" || exit

mkdir -p -m 0755 ~/bin
mkdir -p -m 0755 ~/lib
mkdir -p -m 0700 ~/.cache

if [[ ! -d ~/.dotfiles ]]; then
	vmsg "Cloning dotfiles.git"
	git clone "https://github.com/grawity/dotfiles.git" ~/.dotfiles
fi

if [[ ! "$PREFIX" ]]; then
	vmsg "Installing dotfiles"
	~/.dotfiles/install
	. ~/.dotfiles/environ
fi

# initial authorized_keys fetch

if [[ -s ~/.ssh/authorized_keys ]]; then
	vmsg "authorized_keys already configured"
elif [[ ! "$gpg" ]]; then
	warn "skipping authorized_keys (GnuPG missing)"
elif ! check-gpg-version; then
	warn "skipping authorized_keys ('$gpg' older than v1.4)"
else
	vmsg "Configuring authorized_keys"
	sshkeyupdate -r
fi

# nightly dist/pull cronjob

if [ -e ~/.config/.nocron ]; then
	vmsg "skipping cronjob (found ~/.config/.nocron)"
elif ! have crontab; then
	warn "skipping cronjob (cron not installed)"
else
	err=$(crontab -l 2>&1 >/dev/null)
	if [[ "$err" == "no crontab for $USER" ]]; then
		err=""
	fi

	if [[ "$err" ]]; then
		vmsg "skipping cronjob: $err" >&2
	elif ! crontab -l 2>/dev/null | grep -qs "/dist/pull"; then
		vmsg "adding cronjob"
		(crontab -l; echo "@daily	~/bin/dist/pull") | crontab -
	else
		vmsg "cronjob already configured"
	fi
fi

# mail forwarding

if [[ -e ~/.noforward ]]; then
	vmsg "skipping mail forwarding (found ~/.noforward)"
elif [[ -s ~/.forward ]]; then
	vmsg "mail forwarding already configured (to $(sed 1q ~/.forward))"
elif [[ -s ~/.mailfilter ]]; then
	vmsg "mail forwarding already configured (via ~/.mailfilter)"
elif ! mta=$(PATH=/usr/lib:/usr/sbin:/usr/bin:/bin command -v sendmail); then
	vmsg "mail forwarding cannot be configured (sendmail not found)"
else
	vmsg "updating ~/.forward"
	echo "\"|$mta -i $opt_addr\"" > ~/.forward
	vmsg "sending test message"
	$mta -i "$USER" <<-EOF
	Subject: Test from $(hostname)
	Date: $(date "+%a, %d %b %Y %H:%M:%S %z")
	To: <$opt_addr>

	Test mail from $USER ($UID) at $(fqdn || hostname)
	EOF
fi
