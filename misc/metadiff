#!/usr/bin/env python3
import os
import pprint
import sys
import subprocess

def getfacl(path):
    res = subprocess.run(["getfacl", "-EPnc", path], stdout=subprocess.PIPE)
    return res.stdout.decode().strip().replace("\n", ",")

def dictdiff(a, b):
    keys = {*a, *b}
    keys = [*sorted(keys)]
    for key in keys:
        if key not in b:
            yield (key, "missing (%r)" % a[key])
        elif key not in a:
            yield (key, "unwanted (%r)" % b[key])
        elif a[key] != b[key]:
            yield (key, "mismatch (%r != %r)" % (a[key], b[key]))

def full_stat(head, tail):
    path = os.path.join(head, tail)
    res = {}

    st = os.stat(path, follow_symlinks=False)
    res["name"] = tail
    res["size"] = st.st_size
    res["time.access"] = st.st_atime
    res["time.modify"] = st.st_mtime
    res["time.inode"] = st.st_ctime
    res["owner.uid"] = st.st_uid
    res["owner.gid"] = st.st_gid
    res["posix.mode"] = oct(st.st_mode)

    res.update({"xattr.%s" % n: os.getxattr(path, n, follow_symlinks=False)
                for n in os.listxattr(path, follow_symlinks=False)})

    if "xattr.system.posix_acl_access" in res:
        res["xattr.system.posix_acl_access"] = getfacl(path)

    return res

# compare content
# compare xattrs
# compare bsdflags

# temporary; will later accept two dirs, walk both
roots = sys.argv[1:]
if len(roots) == 1:
    root = roots[0]
    for dirpath, subdirs, subfiles in os.walk(root):
        for item in [*subdirs, *subfiles]:
            path = os.path.join(dirpath, item)
            tail = os.path.relpath(path, root)
            print("\033[1;33m%s\033[m" % tail)
            res = full_stat(root, tail)
            pprint.pprint(res)
else:
    tails = set()
    for root in roots:
        for dirpath, subdirs, subfiles in os.walk(root):
            for item in [*subdirs, *subfiles]:
                path = os.path.join(dirpath, item)
                tail = os.path.relpath(path, root)
                tails.add(tail)
    tails = [*sorted(tails)]
    for tail in tails:
        a = full_stat(roots[0], tail)
        b = full_stat(roots[1], tail)
