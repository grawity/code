#!/usr/bin/env bash
# rdo -- run a command across all hosts

. lib.bash || exit

usage() {
	echo "Usage: $progname [-C path] [-H hosts] [-NSWq] <command>"
	echo
	echo "Run a command simultaneously on all hosts."
	echo
	echo_opt "-C path"	"working directory"
	echo_opt "-N"		"automatically use NFS for working directory"
	echo_opt "-H hosts"	"list of hosts to connect to"
	echo_opt "-S"		"connect as superuser (root)"
	echo_opt "-W"		"output in order (disables parallel output)"
	echo_opt "-q"		"quiet; don't output hostnames"
	# XXX: We could still invoke the commands in parallel and only show
	# output in order, after all have returned. This might increase the
	# perceived delay, though, so it should be -WW or something.
}

wd=
nfs=0
hosts=
user=
wait=0
quiet=0

while getopts ":C:H:NSWq" OPT; do
	case $OPT in
	C) wd=$OPTARG;;
	H) hosts=${OPTARG//,/ };;
	N) nfs=1;;
	S) user="root@";;
	W) wait=1;;
	q) quiet=1;;
	*) lib:die_getopts;;
	esac
done; shift $((OPTIND-1))

hosts=$(rlisthosts "$hosts") || exit

if (( ! $# )); then
	die "command not specified"
elif (( $# == 1 )); then
	cmd=$1
else
	cmd=${*@Q}
fi

if (( nfs )); then
	if [[ ! -e /proc/fs/nfsd/versions ]]; then
		die "NFS service not running on $HOSTNAME"
	fi
	# "-N" implies "-C ." in order to be useful
	wd=${wd:-"."}
fi

if [[ $wd && $wd != - ]]; then
	# Allow "-C ." to be specified in a useful way (i.e. translate the
	# local working directory into its remote or NFS equivalent)
	if [[ $wd != /* ]]; then
		wd=$(realpath -s "$wd")
	fi
	if (( nfs )); then
		wd="$wd/"
		wd="/net/$HOSTNAME/${wd#/net/*/}"
		wd="${wd%/}"
	fi
fi

if [[ $wd != - ]]; then
	# Allow "-C -" to disable the command wrapping completely (both 'cd'
	# and ~/.profile loading), for use with RouterOS
	wd=${wd:-"."}
	cmd="(cd ${wd@Q} && \$SHELL -l -c ${cmd@Q}) 2>&1"
fi

lck=$(mktemp /tmp/rdo.XXXXXXXX) || exit
trap 'wait; rm -f "$lck"' INT

for host in $hosts; do
	{
		out=$(mktemp /tmp/rdo.XXXXXXXX) || exit
		if (( quiet )); then
			ssh -n $user$host "$cmd" > "$out"
			flock "$lck" cat "$out"
		else
			(ssh -n $user$host "$cmd" || echo "=> $?") > "$out"
			flock "$lck" awk -v host=$host \
				'BEGIN {printf "%s:", host}
				{print "\t" $0}
				END {if (!NR) print}' < "$out"
		fi
		rm -f "$out"
	} &
	if (( wait )); then wait; fi
done

wait; rm -f "$lck"
