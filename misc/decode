#!/usr/bin/env python3
# decode -- tool for decoding various structured binary identifiers
#
# (This should eventually incorporate 'nsap' and 'parse-snmp-engine-id'.)
import argparse
import binascii
import datetime
import enum
import io
import uuid
from nullroute.io import BinaryReader

# https://www.iana.org/assignments/arp-parameters/arp-parameters.xhtml#arp-parameters-2
class ArpHardwareType(enum.IntEnum):
    NonHardware = 0 # Defined for DHCP client identifiers (RFC 2132)
    Ethernet = 1
    Ieee802 = 6     # *Sometimes* used for Wi-Fi aka IEEE 802.11
    Ieee1394 = 24   # FireWire

# https://www.iana.org/assignments/dhcpv6-parameters/dhcpv6-parameters.xhtml#dhcpv6-parameters-6
class DUIDType(enum.IntEnum):
    LLT = 1         # Link-Layer + Time (RFC 3315)
    EN = 2          # Enterprise Number (RFC 3315)
    LL = 3          # Link Layer (RFC 3315)
    UUID = 4        # Universally Unique ID (RFC 6355)

def try_enum(etype, value):
    try:
        return etype(value)
    except ValueError:
        return value

def lookup_iana_pen(vendor):
    return {
        43793: "systemd (Tom Gundersen)",
    }.get(vendor, "unknown")

def parse_hex(s):
    if ":" in s:
        s = s.split(":")
        s = [int(c, 16) for c in s]
        return bytes(s)
    else:
        s = s.replace("-", "")
        s = s.replace(" ", "")
        return binascii.unhexlify(s)

def fmt_hex(buf):
    h = ["%02x" % c for c in buf]
    h = ":".join(h).upper()
    return h

def is_ascii(buf):
    return all(0x20 < x < 0x7F for x in buf)

def print_hdr(hdr):
    print("\033[1m%s\033[m" % hdr)

def decode_dhcp_client_id(buf):
    # https://tools.ietf.org/html/rfc2132#section-9.14
    # Types (except 0 and 255) correspond to link-layer types, 1 is Ethernet
    print_hdr("DHCP Client Identifier")
    br = BinaryReader(buf)
    type = br.read_u8()
    type = try_enum(ArpHardwareType, type)
    if type == 0x00:
        print("Type:", "non-hardware (%d)" % type)
        ident = br.fh.read()
        if is_ascii(ident):
            print("  Identifier:", repr(ident))
        else:
            print("  Identifier:", fmt_hex(ident))
    elif type == 0xFF:
        # https://tools.ietf.org/html/rfc4361#section-6.1
        print("Type:", "embedded RFC 3315 IAID+DUID (%d)" % type)
        iaid = br.read(4)
        print("  IAID:", fmt_hex(iaid))
        duid = br.fh.read()
        print("  DUID:", fmt_hex(duid))
        print("  -- Decoding nested DUID --")
        decode_dhcpv6_duid(duid)
    else:
        print("Type:", "link-layer address (%s) (%d)" % (type.name, type))
        mac = br.fh.read()
        print("  Link-layer address:", fmt_hex(mac))

def decode_dhcpv6_duid(buf):
    # https://tools.ietf.org/html/rfc3315#section-9.1
    print_hdr("DHCPv6 DUID")
    br = BinaryReader(buf)
    type = br.read_u16_be()
    type = try_enum(DUIDType, type)
    if type == DUIDType.LLT:
        print("Type:", "link-layer + time (DUID-LLT) (%d)" % type)
        hwtype = br.read_u16_be()
        print("  Hardware type:", "unknown (%d)" % hwtype)
        time = br.read_u32_be()
        time = datetime.datetime.fromtimestamp(time)
        print("  Time:", time)
        lladdr = br.fh.read()
        print("  Link-layer address:", fmt_hex(lladdr))
    elif type == DUIDType.EN:
        print("Type:", "vendor-assigned (DUID-EN) (%d)" % type)
        vendor = br.read_u32_be()
        print("  Vendor:", "%s (%d)" % (lookup_iana_pen(vendor), vendor))
        rest = br.fh.read()
        print("  Identifier:", fmt_hex(rest))
    elif type == DUIDType.LL:
        print("Type:", "link-layer (DUID-LL) (%d)" % type)
        hwtype = br.read_u16_be()
        hwtype = try_enum(ArpHardwareType, hwtype)
        print("  Hardware type:", hwtype)
        lladdr = br.fh.read()
        print("  Link-layer address:", fmt_hex(lladdr))
    elif type == DUIDType.UUID:
        print("Type:", "universally unique (DUID-UUID) (%d)" % type)
        uid = br.read(16)
        uid = uuid.UUID(bytes=buf)
        print("  UUID:", uid)
    else:
        print("Type:", "unknown (%d)" % type)

def decode_osi_nsap(buf):
    br = BinaryReader(buf)
    afi = br.read_u8()
    if afi == 0x47:
        print("AFI: ISO 6523-ICD IDI (%02x)" % afi)
        icd = br.read_u16_be()
        icd_name = {
            0x0005: "US Federal Government (GOSIP)",
            0x0079: "ATM Forum",
            0x0090: "IANA",
            0x0180: "Lithuania",
        }.get(icd)
        print("IDI (ICD): %s (%04x)" % (icd_name, icd))
        if icd == 0x0005:
            # 47.0005.80FFE1000000F21A26D8.0020EA000EE0.00
            print("HO-DSP (US GOSIP v2):")
            print("  DFI: %s"           % fmt_hex(br.read(1)))
            print("  AdmAuthority: %s"  % fmt_hex(br.read(3)))
            print("  Reserved: %s"      % fmt_hex(br.read(2)))
            print("  RtDomainID: %s"    % fmt_hex(br.read(2)))
            print("  AreaID: %s"        % fmt_hex(br.read(2)))
            print("ID: %s"              % fmt_hex(br.read(6)))
            print("SEL: %s"             % fmt_hex(br.read(1)))
        elif icd == 0x0091:
            print("HO-DSP (Cisco):")
            print("  %s" % fmt_hex(br.read(4)))
            print("  MAC: %s" % fmt_hex(br.read(6)))
            print("ID: %s"              % fmt_hex(br.read(6)))
            print("SEL: %s"             % fmt_hex(br.read(1)))
        else:
            print("Unknown DSP format")
    else:
        print("AFI: unknown (%02x)" % afi)

parser = argparse.ArgumentParser()
parser.add_argument("type")
parser.add_argument("data")
args = parser.parse_args()
data = parse_hex(args.data.replace(".", ""))

if args.type == "dhcp-client-id":
    decode_dhcp_client_id(data)
elif args.type == "dhcpv6-duid":
    decode_dhcpv6_duid(data)
elif args.type == "osi-nsap":
    decode_osi_nsap(data)
else:
    exit("error: Unknown type %r" % args.type)
