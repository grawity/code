#!/usr/bin/env bash

dir=${0%/dist/*}
PATH=$dir/bin:$PATH

. lib.bash || exit

progname='dist/bootstrap'
progname_prefix=0

pick() { until have "$1"; do shift; (( $# )) || return; done; echo "$1"; }

check-gpg-version() {
	$gpg --version | sed 's/gpg (GnuPG) //; q' | {
		IFS="." read -r major minor rest
		(( major >= 2 )) || (( major == 1 && minor >= 4 ))
	}
}

# set up own environment

OWNER=grawity
EMAIL=grawity@gmail.com

if [[ "$USER" != @($OWNER|mantas) ]]; then
	warn "This script should not be used by anyone else than $OWNER."
	warn "  It installs $OWNER's SSH authorized_keys, their Kerberos"
	warn "  ~/.k5login, and forwards all mail to their inbox."
	warn "  I'm fairly sure you do not want any of that, do you?"
	confirm "continue anyway?" || exit
fi

errors=0 warnings=0

# check for necessary programs

wants="crontab curl! gcc git! mailx perl!"

for bin in $wants; do
	case $bin in
	*!)	bin=${bin%!}
		have "$bin" || err  "'$bin' not installed";;
	*)	have "$bin" || warn "'$bin' not installed";;
	esac
done

gpg=$(pick gpg2 gpg) || err "'gpg' not installed"

(( errors ))   && die "required tools missing"
(( warnings )) && { confirm "continue bootstrap?" || exit 1; }

warnings=0

# base layout and dotfiles

cd "$dir" || exit

mkdir -p -m 0755 ~/bin
mkdir -p -m 0755 ~/lib
mkdir -p -m 0700 ~/.cache

if [[ ! -d ~/lib/dotfiles ]]; then
	log "cloning dotfiles.git"
	git clone "https://github.com/grawity/dotfiles.git" ~/lib/dotfiles
fi

if [[ ! "$PREFIX" ]]; then
	log "installing dotfiles"
	~/lib/dotfiles/install
	. ~/lib/dotfiles/environ
fi

# initial authorized_keys fetch

if [[ -s ~/.ssh/authorized_keys ]]; then
	log "authorized_keys already configured"
elif [[ ! "$gpg" ]]; then
	warn "skipping authorized_keys (GnuPG missing)"
elif ! check-gpg-version; then
	warn "skipping authorized_keys ('$gpg' older than v1.4)"
else
	log "configuring authorized_keys"
	security/update-authorized-keys -r
fi

# nightly dist/pull cronjob

if [[ -e ~/.config/.nocron ]]; then
	log "skipping dist/pull cronjob (found ~/.config/.nocron)"
elif ! have crontab; then
	warn "skipping dist/pull cronjob ('crontab' missing)"
else
	err=$(crontab -l 2>&1 >/dev/null)

	if [[ "$err" == "no crontab for $USER" ]]; then
		err=""
	fi

	if [[ "$err" ]]; then
		warn "skipping dist/pull cronjob: '$err'"
	elif ! crontab -l 2>/dev/null | grep -qs "/dist/pull"; then
		log "adding dist/pull cronjob"
		(crontab -l 2>/dev/null
		 echo "@daily	~/code/dist/pull") | crontab -
	else
		log "dist/pull cronjob already configured"
	fi
fi

# mail forwarding

if [[ -e ~/.noforward ]]; then
	log "skipping mail forwarding (found ~/.noforward)"
elif [[ -s ~/.forward ]]; then
	log "mail forwarding already configured (to $(sed 1q ~/.forward))"
elif [[ -s ~/.mailfilter ]]; then
	log "mail forwarding already configured (via ~/.mailfilter)"
else
	if ! sendmail=$(pick /usr/{lib,bin,sbin}/sendmail); then
		warn "'sendmail' not installed"
		sendmail=/usr/sbin/sendmail
	fi

	log "forwarding mail to $EMAIL"

	echo "\"|$sendmail -i $EMAIL\"" > ~/.forward
	if have maildrop; then
		echo "to \"!$EMAIL\"" > ~/.mailfilter
	fi

	if [[ -x $sendmail ]]; then
		if confirm "send test mail?"; then
			{
			echo "Subject: Test from $HOSTNAME"
			echo "Date: $(date "+%a, %d %b %Y %H:%M:%S %z")"
			echo "To: <$EMAIL>"
			echo ""
			echo "Test mail from $USER ($UID) at $(fqdn || hostname)"
			} | $sendmail -i "$EMAIL"
		fi
	fi
fi
