#!/usr/bin/env bash
# cap - screenshot a window or entire screen
#
# Uses GNOME Shell's screenshot functionality if available, so that window
# shadows get captured correctly (with PNG transparency).

. lib.bash || exit

set -u

has_gnome_shell() {
	busctl --user --auto-start=no call \
		org.gnome.Shell \
		/org/gnome/Shell \
		org.freedesktop.DBus.Peer Ping \
		&> /dev/null
}

usage() {
	echo "Usage: $progname [-auw]"
	echo ""
	echo_opt "-a"		"capture selected area"
	echo_opt "-w"		"capture active window"
	echo_opt "-u"		"upload image after capture"
}

basedir=$(systemd-path user-pictures || echo ~/Pictures)
file=$basedir/Screenshots/$(date +%Y-%m-%d.%H%M%S).${HOSTNAME%%.*}.png

opt_area=0
opt_upload=0
opt_window=0

while getopts :auw OPT; do
	case $OPT in
	a) opt_area=1;;
	u) opt_upload=1;;
	w) opt_window=1;;
	*) lib:die_getopts;;
	esac
done; shift $((OPTIND-1))

if (( $# )); then
	vdie "excess arguments"
fi

if (( opt_area && opt_window )); then
	vdie "-a and -w cannot be used together"
fi

# XXX: implement delay and selectdelay

if have gnome-screenshot && has_gnome_shell; then
	args=()
	if (( opt_window )); then
		args+=(--window)
	elif (( opt_area )); then
		args+=(--area)
		if (( sleep_area )); then
			args+=(--delay=$sleep_area)
		fi
	fi
	gnome-screenshot "${args[@]}" --file="$file"
elif have scrot; then
	args=()
	if (( opt_window )); then
		args+=(-u -b)
	elif (( opt_area )); then
		args+=(-s -b)
	fi
	scrot "${args[@]}" "$file"
elif have maim && have slop; then
	args=()
	if (( opt_window )); then
		# XXX: 'xdotool getactivewindow' only reports the "real" window
		# and has no way to report the parent WM frame, so we must
		# select the window interactively.
		args+=(-s)
	elif (( opt_area )); then
		if (( sleep_area )); then
			geom=$(slop -f %g)
			sleep $sleep_area
			args+=(-g "$geom")
		else
			args+=(-s)
		fi
	fi
	maim "${args[@]}" "$file"
else
	vdie "no screenshot program"
fi

if [[ ! -s $file ]]; then
	notifysend -i error "Screenshot failed" &
	vdie "screenshot failed ('$file' not created)"
fi

sfile=${file/#"$HOME/"/"~/"}

if (( opt_upload )); then
	url=$(cap-upload.sh "$file")
	if (( $? )); then
		notify-send -i error "Screenshot captured but upload failed" &
		echo "$file" | gclip
		echo "$file"
		vdie "screenshot upload failed"
	else
		notify-send -i "$file" "Screenshot captured and uploaded" &
		echo "$url" | gclip
		echo "$url"
	fi
else
	notifysend -i "$file" "Screenshot captured" "$sfile" &
	echo "$file" | gclip
	echo "$file"
fi
