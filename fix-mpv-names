#!/usr/bin/env perl
use warnings;
use strict;
use File::Basename;
use Image::Size;
use POSIX;
use Nullroute::Lib;

my $qr_y_m_d = qr/\d{4}-\d{2}-\d{2}/;

my $host = $ENV{host};

sub detect_host {
	my ($file) = @_;

	my ($h, $w) = imgsize($file);
	_debug("image '$file' is $h*$w");

	return "snow" if ("$h*$w" eq "1280*1024");
	return "raindows";
}

sub do_file {
	my ($file) = @_;
	_debug("processing file '$file'");

	my ($old_name, $dir, $suffix) = fileparse($file, qr/\.[^.]+$/);
	my $new_name = $old_name;

	for ($new_name) {
		my @mtime = gmtime((stat $file)[9]);

		# OneDrive screenshots (host given in command line)
		if ($host) {
			s/.*/strftime("Screenshot_%Y-%m-%d_%H%M%S", @mtime).".".$host/e;
			last;
		}

		# mpv
		if (/^(?:gnome-)?mpv-shot.*(\.[^.]+)$/
		|| /^Screenshot from [^:]+(\.[^.]+)$/)
		{
			s//strftime("Screenshot_%Y-%m-%d_%H%M%S", @mtime).$1/e;
			last;
		}

		# Dropbox on Windows
		s/^Screenshot ($qr_y_m_d) (\d+)\.(\d+)\.(\d+)/$1.$2$3$4/;

		# GNOME Shell
		s/^Screenshot from ($qr_y_m_d) (\d+)[:-](\d+)[:-](\d+)/$1.$2$3$4/;

		# Dropbox on Android
		s/^($qr_y_m_d) (\d+)\.(\d+)\.(\d+)/Screenshot_$1.$2$3$4/;

		# VLC
		s/^Snapshot_($qr_y_m_d)-(\d+)h(\d+)m(\d+)s\d+/Screenshot_$1.$2$3$4/;
		s/^vlcsnap-($qr_y_m_d)-(\d+)h(\d+)m(\d+)s\d+/Screenshot_$1.$2$3$4/;

		# Android (??)
		s/^Screenshot_($qr_y_m_d)-(\d+)-(\d+)-(\d+)/Screenshot_$1.$2$3$4/;
	}

	for ($new_name) {
		s/^Screenshot_($qr_y_m_d)_(\d{2})(\d{2})(\d{2})/$1.$2$3$4/;
	}

	$old_name .= $suffix;
	$new_name .= $suffix;

	if ($new_name eq $old_name) {
		return;
	} elsif (-e $new_name) {
		_err("not renaming '$old_name' to '$new_name': target already exists");
	} elsif ($::debug) {
		_info("would rename '$dir$old_name' to '$new_name'");
	} else {
		_info("renaming '$dir$old_name' to '$new_name'");
		if (!rename($dir.$old_name, $dir.$new_name)) {
			_err("rename '$old_name' to '$new_name': !! $!");
		}
	}
}

sub do_dir {
	my (@dirs) = reverse @_;
	_debug("processing dirs [@dirs]");

	while (@dirs) {
		my $dir = pop @dirs;
		my @next = ();
		_debug("reading '$dir'");
		if (opendir(my $dh, $dir)) {
			for my $name (sort readdir($dh)) {
				my $path = "$dir/$name";

				if ($name eq "." || $name eq "..") {
					next;
				}
				elsif (-d $path) {
					# queue?
					push @next, $path;
					# recursion?
					#do_dir($path);
				}
				elsif (-f $path) {
					do_file($path);
				}
			}
			closedir($dh);
		} else {
			_err("cannot open directory '$dir': $!");
		}
		if (@next) {
			push @dirs, reverse @next;
		}
	}
}

my @args = @ARGV;

if (!@args) {
	@args = (".");
}

for (@args) {
	_debug("processing arg '$_'");
	if (-d) {
		do_dir($_);
	} else {
		do_file($_);
	}
}

Nullroute::Lib::_exit();
