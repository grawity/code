#!/usr/bin/env python3
import argparse
import sys
from nullroute.core import Core
from nullroute.scrape import Scraper
from pprint import pprint
import re
import subprocess
import twitter.util
import twitter.scraper

def save_m3u_video(url, file_name):
    subprocess.run(["youtube-dl", url, "-o", file_name + ".%(ext)s"])

class TwitterMediaScraper(Scraper):
    def scrape(self, url, file_prefix):
        if m := re.fullmatch(r"https://(?:mobile\.)?twitter\.com/(?:i/web|[^/]+)/status/(\d+)(?:/photo/\d+)?(?:\?.*)?", url):
            id = m.group(1)
        else:
            Core.err("unrecognized URL %r", url)
            return False

        Core.info("processing tweet %r", url)

        _res = self.api.tweets_by_id([id])
        _res = _res[0]["data"]["tweetResult"]["result"]

        status = _res["legacy"]
        author = _res["core"]["user_results"]["result"]["legacy"]["screen_name"]

        if "extended_entities" not in status:
            Core.warn("tweet %r (%r) does not have attached media", url,
                                                                    status["full_text"][:30])
            return False

        media = status["extended_entities"]["media"]

        for i, medium in enumerate(media):
            #Core.info("processing medium %r", medium["expanded_url"])
            if medium["type"] in {"video", "animated_gif"}:
                # 'video' has a m3u variant & a few video/mp4 variants
                # 'animated_gif' has no m3u & only one variant (video/mp4 with bitrate=0)
                video_id = medium["id_str"]
                if len(media) > 1:
                    file_name = "%s [%s_v%d]" % (author, status["id_str"], i)
                else:
                    file_name = "%s [%s]" % (author, status["id_str"])
                if file_prefix:
                    file_name = "%s %s" % (file_prefix, file_name)
                m3u_url = None
                best_bitrate = -1
                best_bitrate_url = None
                for variant in medium["video_info"]["variants"]:
                    Core.trace("variant: %r", variant)
                    if variant["content_type"] == "application/x-mpegURL":
                        m3u_url = variant["url"]
                    elif variant["bitrate"] > best_bitrate:
                        best_bitrate = variant["bitrate"]
                        best_bitrate_url = variant["url"]
                if m3u_url:
                    # youtube-dl will choose the 'best' format from the playlist
                    Core.info("- downloading %r to %r", m3u_url, file_name)
                    save_m3u_video(m3u_url, file_name)
                elif best_bitrate_url:
                    file_name += ".mp4"
                    Core.info("- downloading %r to %r", best_bitrate_url, file_name)
                    self.save_file(best_bitrate_url,
                                   file_name,
                                   progress=True)
                else:
                    Core.err("video attachment didn't have MPEG playlist")
            elif medium["type"] == "photo":
                photo_url = medium["media_url_https"] + "?name=orig"
                photo_id = medium["media_url_https"].split("/")[-1]
                if len(media) > 1:
                    file_name = "%s [%s_p%d] %s" % (author, status["id_str"], i, photo_id)
                else:
                    file_name = "%s [%s] %s" % (author, status["id_str"], photo_id)
                if file_prefix:
                    file_name = "%s %s" % (file_prefix, file_name)
                Core.info("- downloading %r to %r", photo_url, file_name)
                self.save_file(photo_url,
                               file_name,
                               progress=True)
            else:
                Core.warn("- skipping non-video medium")
                pprint(medium)

parser = argparse.ArgumentParser()
parser.add_argument("--prefix")
parser.add_argument("url", nargs="*")
args = parser.parse_args()

api = twitter.scraper.Scraper(session=twitter.util.init_session(),
                              save=False,
                              pbar=False)

s = TwitterMediaScraper()
s.api = api
for url in args.url:
    s.scrape(url, args.prefix)

if len(args.url) > len({*args.url}):
    Core.warn("duplicate URL arguments were found")

Core.fini()
