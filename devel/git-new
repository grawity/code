#!/usr/bin/env bash
# git-new - show new commits in a branch, based on the reflog

. lib.bash || exit

while [[ $1 == --* ]]; do
	case $1 in
		--add-no-merges)
			git config --add nullroute.git-new.options "--no-merges"
			shift
			;;
		--add-no-po)
			git config --add nullroute.git-new.paths ":(exclude)**.po"
			shift
			;;
		--*)
			die "unknown option '$1'"
			;;
		*)
			break
	esac
done

if [[ ! -d .git ]] && [[ -d $1 ]]; then
	cd "$1" || exit
	shift
fi

if [[ $PWD == $HOME/src/* ]]; then
	dir=$(git rev-parse --git-dir) || exit
	fetch=$(git config --get-all remote.origin.fetch)
	if [[ "$fetch" == "+refs/*:refs/*" ]]; then
		warn "refspec '$fetch' may allow tag deletion"
		fetch="+refs/heads/*:refs/heads/*"
		if confirm "change to '$fetch'?"; then
			git config --unset-all remote.origin.fetch
			git config --unset-all remote.origin.mirror
			git config remote.origin.fetch "$fetch"
			git for-each-ref --format="%(refname)" |
			egrep -v '^refs/(heads|notes|tags)/' | {
				declare refs=()
				while read -r ref; do
					echo "found junk ref '$ref'"
					refs+=("$ref")
				done
				if (( ${#refs[@]} )) && confirm "purge refs?"; then
					for ref in "${refs[@]}"; do
						git update-ref -d "$ref"
					done
				fi
			}
		fi
	elif [[ ! "$fetch" ]] && [[ "$(git config --get remote.origin.url)" ]]; then
		fetch="+refs/heads/*:refs/heads/*"
		warn "refspec not set; changing to '$fetch'"
		git config remote.origin.fetch "$fetch"
	fi
	for remote in $(git remote); do
		url_raw=$(git config --get remote.$remote.url)
		url_new=$(git remote get-url $remote)
		if [[ "$url_new" == @(git|http)://* ]]; then
			warn "remote '$remote' uses insecure protocol: $url_new"
		elif [[ "$url_raw" == @(git|http)://* ]]; then
			notice "remote '$remote' relies on URL rewriting: $url_raw"
			if confirm "change permanently to '$url_new'?"; then
				git remote set-url $remote "$url_new"
			fi
		fi
	done
	#rdempty --quiet "$dir" &
fi

opts=$(git config --get-all nullroute.git-new.options || true)
paths=$(git config --get-all nullroute.git-new.paths || true)

if [[ -t 1 ]] && which tig >/dev/null 2>&1; then
	cmd='tig'
else
	cmd='git lg'
fi

ref=${1:-HEAD}

if [[ $ref != HEAD ]]; then
	# explicit check is faster than letting tig do it
	if ! git rev-parse --verify "$ref" >/dev/null 2>&1; then
		echo "error: bad ref '$ref'" >&2
		exit 1
	fi
fi

settitle "git new [${PWD/#"$HOME/"/"~/"}]"

exec $cmd $opts "^$ref@{1}" "$ref" "${@:2}" -- $paths
